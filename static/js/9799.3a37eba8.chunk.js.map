{"version":3,"file":"static/js/9799.3a37eba8.chunk.js","mappings":"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","sources":["webpack://class-interactives/./src/components/Timers.module.css?1d5a","components/Timers.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"celebration\":\"Timers_celebration__GNReZ\",\"bounce\":\"Timers_bounce__krDO3\",\"GameArea\":\"Timers_GameArea__G9MID\",\"pauseButton\":\"Timers_pauseButton__m94ak\"};","import React, { useState, useEffect } from \"react\";\nimport styles from \"./Timers.module.css\";\n\nconst TimerBar = ({ label, remainingTime, height, initialTime }) => {\n  // Calculate the percentage of time remaining\n  const percentage = (remainingTime / initialTime) * 100;\n\n  // Define the style for the timer bar\n  const style = {\n    height: `${height}%`,\n    padding: \"10px\",\n    margin: \"10px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    border: \"1px solid black\",\n    // Ensure the gradient visually decreases from the left as time decreases\n    background: `linear-gradient(to left, #FFCCCC ${percentage}%, #ADD8E6 ${percentage}%)`,\n  };\n\n  return (\n    <div style={style}>\n      <span style={{ fontSize: \"xx-large\" }}>\n        {label} ({Math.max(0, Math.round(remainingTime))})\n      </span>\n    </div>\n  );\n};\n\nfunction Timers({ text }) {\n  const [showCelebration, setShowCelebration] = useState(false);\n  const [celebrationPlayed, setCelebrationPlayed] = useState(false);\n  const lines = text.split(\"\\n\");\n  const initialTimes = lines.map((line) => parseInt(line.split(\":\")[1], 10));\n  const [startTime] = useState(Date.now());\n  const [currentTime, setCurrentTime] = useState(Date.now());\n  const [isPaused, setIsPaused] = useState(false);\n  const [pauseOffset, setPauseOffset] = useState(0);\n  const [lastPauseTime, setLastPauseTime] = useState(null);\n\n  useEffect(() => {\n    let interval;\n\n    const setupInterval = () => {\n      // Clear any existing interval\n      clearInterval(interval);\n\n      const now = Date.now();\n      const elapsed = now - startTime - pauseOffset;\n      const nextTickDuration = 1000 - (elapsed % 1000); // Time until the next full second\n\n      interval = setTimeout(() => {\n        setCurrentTime(Date.now());\n\n        // Set up the regular interval after adjusting to the next full second\n        interval = setInterval(() => {\n          setCurrentTime(Date.now());\n        }, 1000);\n      }, nextTickDuration);\n    };\n\n    if (!isPaused) {\n      setupInterval();\n    } else {\n      clearInterval(interval);\n    }\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [isPaused, pauseOffset, startTime]);\n\n  const calculateRemainingTimes = () => {\n    let totalElapsedSeconds = (currentTime - startTime - pauseOffset) / 1000;\n    let accumulatedTime = 0;\n\n    return initialTimes.map((initialTime, index) => {\n      if (\n        totalElapsedSeconds > accumulatedTime &&\n        totalElapsedSeconds < accumulatedTime + initialTime\n      ) {\n        const remainingTime =\n          initialTime - (totalElapsedSeconds - accumulatedTime);\n        accumulatedTime += initialTime;\n        return remainingTime;\n      } else if (totalElapsedSeconds >= accumulatedTime + initialTime) {\n        accumulatedTime += initialTime;\n        return 0;\n      } else {\n        accumulatedTime += initialTime;\n        return initialTime;\n      }\n    });\n  };\n\n  const togglePause = () => {\n    if (isPaused) {\n      // Unpausing\n      const currentPauseTime = Date.now() - lastPauseTime;\n      setPauseOffset((prevOffset) => prevOffset + currentPauseTime);\n      setCurrentTime(Date.now()); // Update currentTime immediately on unpause\n    } else {\n      // Pausing\n      setLastPauseTime(Date.now());\n    }\n    setIsPaused(!isPaused);\n  };\n\n  const remainingTimes = calculateRemainingTimes();\n\n  useEffect(() => {\n    const totalDuration = initialTimes.reduce((acc, time) => acc + time, 0);\n    const adjustedElapsedTime = (currentTime - startTime - pauseOffset) / 1000;\n\n    if (adjustedElapsedTime >= totalDuration && !celebrationPlayed) {\n      setShowCelebration(true);\n      playTrumpetBlast();\n      setCelebrationPlayed(true);\n    }\n  }, [currentTime, initialTimes, startTime, pauseOffset, celebrationPlayed]);\n\n  const timerBars = lines.map((line, index) => {\n    const [label] = line.split(\":\");\n    const height =\n      (initialTimes[index] /\n        initialTimes.reduce((acc, time) => acc + time, 0)) *\n      100;\n    return (\n      <TimerBar\n        key={label}\n        label={label}\n        remainingTime={remainingTimes[index]}\n        height={height}\n        initialTime={initialTimes[index]}\n      />\n    );\n  });\n\n  return (\n    <>\n      <div className={styles.GameArea}>\n        <button onClick={togglePause} className={styles.pauseButton}>\n          {isPaused ? \"‚ñ∂Ô∏è\" : \"‚è∏Ô∏è\"}\n        </button>\n        {timerBars}\n      </div>\n      {showCelebration && <div className={styles.celebration}>üéâ</div>}\n    </>\n  );\n}\n\n// Function to play a trumpet-like note\nfunction playNote(frequency, duration) {\n  // Create audio context but leave uninitialised\n  let audioCtx = null;\n\n  if (!audioCtx) {\n    audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n    // Now you can use audioContext as needed\n  }\n  // Ensure audioContext is in the correct state (resumed) if already initialized\n  if (audioCtx.state === \"suspended\") {\n    audioCtx.resume();\n  }\n\n  // Create oscillator\n  const oscillator = audioCtx.createOscillator();\n  oscillator.type = \"sawtooth\"; // Sawtooth wave is somewhat similar to a trumpet's timbre\n  oscillator.frequency.setValueAtTime(frequency, audioCtx.currentTime); // Frequency in Hz\n\n  // Create a filter to alter the sound\n  const filter = audioCtx.createBiquadFilter();\n  filter.type = \"lowpass\";\n  filter.frequency.setValueAtTime(2000, audioCtx.currentTime);\n\n  // Connect nodes and start playing\n  oscillator.connect(filter);\n  filter.connect(audioCtx.destination);\n  oscillator.start();\n  oscillator.stop(audioCtx.currentTime + duration);\n}\n\n// Play a sequence of notes to simulate a trumpet blast\nfunction playTrumpetBlast() {\n  playNote(440, 0.3); // A4\n  setTimeout(() => playNote(466.16, 0.3), 300); // A#4/Bb4\n  setTimeout(() => playNote(493.88, 0.3), 600); // B4\n  setTimeout(() => playNote(493.88, 0.3), 900); // B4\n}\n\nexport default Timers;\n"],"names":["TimerBar","_ref","label","remainingTime","height","initialTime","percentage","style","concat","padding","margin","display","alignItems","justifyContent","border","background","_jsx","children","_jsxs","fontSize","Math","max","round","playNote","frequency","duration","audioCtx","window","AudioContext","webkitAudioContext","state","resume","oscillator","createOscillator","type","setValueAtTime","currentTime","filter","createBiquadFilter","connect","destination","start","stop","_ref2","text","showCelebration","setShowCelebration","useState","celebrationPlayed","setCelebrationPlayed","lines","split","initialTimes","map","line","parseInt","startTime","Date","now","setCurrentTime","isPaused","setIsPaused","pauseOffset","setPauseOffset","lastPauseTime","setLastPauseTime","useEffect","interval","clearInterval","setupInterval","setTimeout","setInterval","remainingTimes","calculateRemainingTimes","totalElapsedSeconds","accumulatedTime","index","totalDuration","reduce","acc","time","timerBars","_Fragment","className","styles","onClick","togglePause","currentPauseTime","prevOffset"],"sourceRoot":""}