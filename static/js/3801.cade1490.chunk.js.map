{"version":3,"file":"static/js/3801.cade1490.chunk.js","mappings":"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","sources":["webpack://class-interactives/./src/components/FreyarDiagram.module.css?d403","components/FreyarDiagram.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"FreyarDiagram_container__YiSQD\",\"title\":\"FreyarDiagram_title__A8Gfw\",\"diagram\":\"FreyarDiagram_diagram__V4xME\",\"row\":\"FreyarDiagram_row__MmVAk\",\"box\":\"FreyarDiagram_box__Tzzg6\",\"itemList\":\"FreyarDiagram_itemList__+CpAe\",\"item\":\"FreyarDiagram_item__fPuXt\",\"rubbishSection\":\"FreyarDiagram_rubbishSection__gzocJ\",\"rubbishBin\":\"FreyarDiagram_rubbishBin__+wksp\",\"binIcon\":\"FreyarDiagram_binIcon__Mcwt6\"};","import React, { useState } from \"react\";\r\nimport { DragDropContext, Droppable, Draggable } from \"@hello-pangea/dnd\";\r\nimport InputModal from \"./InputModal\";\r\nimport styles from \"./FreyarDiagram.module.css\";\r\n\r\nfunction FreyarDiagram({ text }) {\r\n  const title = text;\r\n\r\n  const [columns, setColumns] = useState({\r\n    Definition: [],\r\n    Characteristics: [],\r\n    Examples: [],\r\n    \"Anti-Examples\": [],\r\n  });\r\n\r\n  const [inputModalVisible, setInputModalVisible] = useState(false);\r\n  const [inputModalValue, setInputModalValue] = useState(\"\");\r\n  const [currentCategory, setCurrentCategory] = useState(\"\");\r\n\r\n  const handleAddItem = (category) => {\r\n    setCurrentCategory(category);\r\n    setInputModalValue(\"\");\r\n    setInputModalVisible(true);\r\n  };\r\n\r\n  const handleModalSubmit = (userInput) => {\r\n    const trimmedInput = userInput.trim();\r\n    if (trimmedInput) {\r\n      // Create a single item with multiline content\r\n      const newItem = {\r\n        id: `item-${Date.now()}-${Math.random()}`,\r\n        content: userInput,\r\n      };\r\n      setColumns((prev) => ({\r\n        ...prev,\r\n        [currentCategory]: [...prev[currentCategory], newItem],\r\n      }));\r\n    }\r\n    setInputModalVisible(false);\r\n  };\r\n\r\n  const onDragEnd = (result) => {\r\n    const { source, destination } = result;\r\n    if (!destination) return;\r\n    // If no position change, do nothing\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    )\r\n      return;\r\n\r\n    const startColumn = source.droppableId;\r\n    const finishColumn = destination.droppableId;\r\n\r\n    // Extract the item from the start column\r\n    const startItems = Array.from(columns[startColumn]);\r\n    const [movedItem] = startItems.splice(source.index, 1);\r\n\r\n    // If dropping in the rubbish bin\r\n    if (finishColumn === \"RubbishBin\") {\r\n      setColumns((prev) => ({\r\n        ...prev,\r\n        [startColumn]: startItems,\r\n      }));\r\n      return;\r\n    }\r\n\r\n    if (startColumn === finishColumn) {\r\n      // Reordering within the same column\r\n      startItems.splice(destination.index, 0, movedItem);\r\n      setColumns((prev) => ({\r\n        ...prev,\r\n        [startColumn]: startItems,\r\n      }));\r\n    } else {\r\n      // Moving item to a different column\r\n      const finishItems = Array.from(columns[finishColumn]);\r\n      finishItems.splice(destination.index, 0, movedItem);\r\n\r\n      setColumns((prev) => ({\r\n        ...prev,\r\n        [startColumn]: startItems,\r\n        [finishColumn]: finishItems,\r\n      }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {inputModalVisible && (\r\n        <InputModal\r\n          title={`Add items to ${currentCategory}`}\r\n          value={inputModalValue}\r\n          onChange={(e) => setInputModalValue(e.target.value)}\r\n          onSubmit={handleModalSubmit}\r\n          onClose={() => setInputModalVisible(false)}\r\n          multiLine={true}\r\n        />\r\n      )}\r\n\r\n      <h2 className={styles.title}>{title}</h2>\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        <div className={styles.container}>\r\n          <div className={styles.diagram}>\r\n            <div className={styles.row}>\r\n              {[\"Definition\", \"Characteristics\"].map((category) => (\r\n                <div className={styles.box} key={category}>\r\n                  <h3>{category.toUpperCase()}</h3>\r\n                  <Droppable droppableId={category}>\r\n                    {(provided) => (\r\n                      <div\r\n                        ref={provided.innerRef}\r\n                        {...provided.droppableProps}\r\n                        className={styles.itemList}\r\n                      >\r\n                        {columns[category].map((item, index) => (\r\n                          <Draggable\r\n                            key={item.id}\r\n                            draggableId={item.id}\r\n                            index={index}\r\n                          >\r\n                            {(provided) => (\r\n                              <div\r\n                                ref={provided.innerRef}\r\n                                {...provided.draggableProps}\r\n                                {...provided.dragHandleProps}\r\n                                className={styles.item}\r\n                              >\r\n                                {item.content}\r\n                              </div>\r\n                            )}\r\n                          </Draggable>\r\n                        ))}\r\n                        {provided.placeholder}\r\n                      </div>\r\n                    )}\r\n                  </Droppable>\r\n                  <button onClick={() => handleAddItem(category)}>Add</button>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <div className={styles.row}>\r\n              {[\"Examples\", \"Anti-Examples\"].map((category) => (\r\n                <div className={styles.box} key={category}>\r\n                  <h3>{category.toUpperCase()}</h3>\r\n                  <Droppable droppableId={category}>\r\n                    {(provided) => (\r\n                      <div\r\n                        ref={provided.innerRef}\r\n                        {...provided.droppableProps}\r\n                        className={styles.itemList}\r\n                      >\r\n                        {columns[category].map((item, index) => (\r\n                          <Draggable\r\n                            key={item.id}\r\n                            draggableId={item.id}\r\n                            index={index}\r\n                          >\r\n                            {(provided) => (\r\n                              <div\r\n                                ref={provided.innerRef}\r\n                                {...provided.draggableProps}\r\n                                {...provided.dragHandleProps}\r\n                                className={styles.item}\r\n                              >\r\n                                {item.content}\r\n                              </div>\r\n                            )}\r\n                          </Draggable>\r\n                        ))}\r\n                        {provided.placeholder}\r\n                      </div>\r\n                    )}\r\n                  </Droppable>\r\n                  <button onClick={() => handleAddItem(category)}>Add</button>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Rubbish bin section */}\r\n          <div className={styles.rubbishSection}>\r\n            <Droppable droppableId=\"RubbishBin\">\r\n              {(provided) => (\r\n                <div\r\n                  className={styles.rubbishBin}\r\n                  ref={provided.innerRef}\r\n                  {...provided.droppableProps}\r\n                >\r\n                  <span role=\"img\" aria-label=\"bin\" className={styles.binIcon}>\r\n                    🗑️\r\n                  </span>\r\n                  {provided.placeholder}\r\n                </div>\r\n              )}\r\n            </Droppable>\r\n          </div>\r\n        </div>\r\n      </DragDropContext>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default FreyarDiagram;\r\n"],"names":["_ref","text","title","columns","setColumns","useState","Definition","Characteristics","Examples","inputModalVisible","setInputModalVisible","inputModalValue","setInputModalValue","currentCategory","setCurrentCategory","handleAddItem","category","_jsxs","_Fragment","children","_jsx","InputModal","concat","value","onChange","e","target","onSubmit","userInput","trim","newItem","id","Date","now","Math","random","content","prev","onClose","multiLine","className","styles","DragDropContext","onDragEnd","result","source","destination","droppableId","index","startColumn","finishColumn","startItems","Array","from","movedItem","splice","finishItems","map","toUpperCase","Droppable","provided","ref","innerRef","droppableProps","item","Draggable","draggableId","draggableProps","dragHandleProps","placeholder","onClick","role"],"sourceRoot":""}