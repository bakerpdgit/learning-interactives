{"version":3,"file":"static/js/262.8ad64fbb.chunk.js","mappings":"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","sources":["components/ImagePins.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport \"./ImagePins.css\"; // Make sure to create corresponding CSS\nimport { handleFileChange } from \"../ImageUploads\";\nimport { useEditContext } from \"../EditContext\";\n\nfunction ImagePins({ text }) {\n  const [pins, setPins] = useState([]);\n  const [showInstruction, setShowInstruction] = useState(true);\n  const [draggedLabelIndex, setDraggedLabelIndex] = useState(null);\n  const { imageData, setImageData } = useEditContext();\n\n  const imgRef = useRef(null);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setShowInstruction(false);\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const placePin = (e) => {\n    if (!imgRef.current) return;\n\n    const rect = imgRef.current.getBoundingClientRect();\n    let x = e.clientX - rect.left;\n    let y = e.clientY - rect.top;\n\n    // Add new pin to the array\n    setPins((prevPins) => [\n      ...prevPins,\n      {\n        x: Math.max(0, Math.min(x, rect.width - 20)),\n        y: Math.max(0, Math.min(y, rect.height - 20)),\n        label: \"\",\n        labelX: x, // Initial Label X (same as pin X initially)\n        labelY: y - 40, // Initial Label Y (slightly above pin Y)\n      },\n    ]);\n  };\n\n  const handleRightClick = (e, index) => {\n    e.preventDefault(); // Prevent the browser context menu from opening\n    setPins((prevPins) => prevPins.filter((_, i) => i !== index)); // Remove the pin at the clicked index\n  };\n\n  const handleDoubleClick = (index) => {\n    const label = prompt(\"Enter a label for this pin:\", pins[index].label);\n    if (label !== null) {\n      // Check if the user didn't press Cancel\n      setPins(pins.map((pin, i) => (i === index ? { ...pin, label } : pin)));\n    }\n  };\n\n  // Adjusted onDragStart to prevent default behavior\n  const onDragStart = (e, index) => {\n    e.dataTransfer.setData(\"text/plain\", \"\"); // For Firefox compatibility\n    setDraggedLabelIndex(index);\n  };\n\n  // Moved onDragOver to the image-pin-container\n  const onDragOver = (e) => {\n    e.preventDefault(); // This is crucial for allowing the drop\n  };\n\n  const onDrop = (e) => {\n    if (!imgRef.current || draggedLabelIndex === null) return;\n\n    const rect = imgRef.current.getBoundingClientRect();\n    let labelX = e.clientX - rect.left;\n    let labelY = e.clientY - rect.top;\n\n    // Update only the label's position\n    setPins(\n      pins.map((pin, i) =>\n        i === draggedLabelIndex\n          ? { ...pin, labelX: labelX, labelY: labelY }\n          : pin\n      )\n    );\n\n    setDraggedLabelIndex(null); // Reset after drop\n  };\n\n  const updateImageData = (data) => {\n    setImageData(data);\n  };\n\n  return (\n    <div className=\"image-pin-maincontainer\">\n      <div\n        className=\"image-pin-container\"\n        draggable=\"false\" // Prevent the container from being draggable\n        onDragOver={onDragOver}\n        onDrop={onDrop}\n      >\n        {(text !== \"[local]\" || imageData) && (\n          <img\n            ref={imgRef}\n            className=\"image-pin-image\"\n            alt=\"Highlight\"\n            onClick={placePin}\n            draggable=\"false\"\n            src={text && text !== \"[local]\" ? text : imageData}\n            crossOrigin=\"anonymous\"\n          />\n        )}\n\n        {text === \"[local]\" && !imageData && (\n          <div>\n            The local image will need to be provided...\n            <br />{\" \"}\n            <input\n              type=\"file\"\n              className=\"fileUpload\"\n              accept=\"image/*\"\n              onChange={(event) =>\n                handleFileChange(event.target.files[0], updateImageData)\n              }\n            />\n          </div>\n        )}\n\n        {pins.map((pin, index) => (\n          <React.Fragment key={`pinlabel-${index}`}>\n            <div\n              key={`pin-${index}`}\n              className=\"pin\"\n              style={{ left: `${pin.x - 10}px`, top: `${pin.y - 10}px` }}\n              onContextMenu={(e) => handleRightClick(e, index)}\n              onDoubleClick={() => handleDoubleClick(index)}\n            ></div>\n            {pin.label && (\n              <div\n                className=\"pin-label\"\n                style={{ left: `${pin.labelX}px`, top: `${pin.labelY}px` }} // Use labelX and labelY for positioning\n                draggable=\"true\"\n                onDragStart={(e) => onDragStart(e, index)}\n              >\n                {pin.label}\n              </div>\n            )}\n          </React.Fragment>\n        ))}\n      </div>\n      {showInstruction && (\n        <div className=\"image-pin-instruction\">\n          <h1>Image Pins</h1>\n          <p>\n            click to drop pins, right-click to delete pin, double-click to add a\n            label; drag labels to reposition.\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ImagePins;\n"],"names":["_ref","text","pins","setPins","useState","showInstruction","setShowInstruction","draggedLabelIndex","setDraggedLabelIndex","imageData","setImageData","useEditContext","imgRef","useRef","useEffect","timer","setTimeout","clearTimeout","updateImageData","data","_jsxs","className","children","draggable","onDragOver","e","preventDefault","onDrop","current","rect","getBoundingClientRect","labelX","clientX","left","labelY","clientY","top","map","pin","i","_jsx","ref","alt","onClick","x","y","prevPins","Math","max","min","width","height","label","src","crossOrigin","type","accept","onChange","event","handleFileChange","target","files","index","React","style","concat","onContextMenu","handleRightClick","filter","_","onDoubleClick","prompt","handleDoubleClick","onDragStart","dataTransfer","setData"],"sourceRoot":""}