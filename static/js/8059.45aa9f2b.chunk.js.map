{"version":3,"file":"static/js/8059.45aa9f2b.chunk.js","mappings":"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","sources":["webpack://class-interactives/./src/components/InputModal.module.css?7028","components/InputModal.js","webpack://class-interactives/./src/components/WordFind.module.css?88b4","components/WordFind.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"modalOverlay\":\"InputModal_modalOverlay__Y-bWN\",\"modalContent\":\"InputModal_modalContent__z50rT\",\"modalTitle\":\"InputModal_modalTitle__FCo0P\",\"inputField\":\"InputModal_inputField__IeKtc\",\"inputArea\":\"InputModal_inputArea__qi5q6\",\"buttonGroup\":\"InputModal_buttonGroup__3nwbY\",\"submitButton\":\"InputModal_submitButton__irpiv\",\"cancelButton\":\"InputModal_cancelButton__xmt2G\"};","import React, { useState, useEffect } from \"react\";\r\nimport styles from \"./InputModal.module.css\";\r\n\r\nconst InputModal = ({\r\n  title,\r\n  placeholder,\r\n  value = \"\",\r\n  onSubmit,\r\n  onClose,\r\n  multiLine = false,\r\n}) => {\r\n  const [inputValue, setInputValue] = useState(value);\r\n\r\n  useEffect(() => {\r\n    setInputValue(value);\r\n  }, [value]);\r\n\r\n  const handleChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    onSubmit(inputValue);\r\n    onClose();\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === \"Enter\" && !multiLine) {\r\n      handleSubmit();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.modalOverlay}>\r\n      <div className={styles.modalContent}>\r\n        <h2 className={styles.modalTitle}>{title}</h2>\r\n        {multiLine ? (\r\n          <textarea\r\n            type=\"text\"\r\n            className={styles.inputArea}\r\n            placeholder={placeholder}\r\n            value={inputValue}\r\n            onChange={handleChange}\r\n            onKeyDown={handleKeyDown}\r\n            autoFocus\r\n          />\r\n        ) : (\r\n          <input\r\n            type=\"text\"\r\n            className={styles.inputField}\r\n            placeholder={placeholder}\r\n            value={inputValue}\r\n            onChange={handleChange}\r\n            onKeyDown={handleKeyDown}\r\n            autoFocus\r\n          />\r\n        )}\r\n\r\n        <div className={styles.buttonGroup}>\r\n          <button className={styles.submitButton} onClick={handleSubmit}>\r\n            Submit\r\n          </button>\r\n          <button className={styles.cancelButton} onClick={onClose}>\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputModal;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"GameAreaGrid\":\"WordFind_GameAreaGrid__QkxoS\",\"score\":\"WordFind_score__+-k8t\",\"wordFindButton\":\"WordFind_wordFindButton__Dr5KK\",\"wordTile\":\"WordFind_wordTile__CYgQI\",\"correct\":\"WordFind_correct__Q+bCz\",\"wrongGuess\":\"WordFind_wrongGuess__wNLHR\",\"celebration\":\"WordFind_celebration__vAu4G\",\"slideOut\":\"WordFind_slideOut__EmIeH\"};","import React, { useState, useEffect } from \"react\";\r\nimport styles from \"./WordFind.module.css\"; // Ensure you have corresponding CSS\r\nimport InputModal from \"./InputModal\";\r\n\r\nconst WordTile = ({ word, onRevealNextLetter, onGuess }) => {\r\n  const [revealedLetters, setRevealedLetters] = useState(1);\r\n  const [isCorrect, setIsCorrect] = useState(false);\r\n\r\n  const handleRevealNextLetter = () => {\r\n    if (revealedLetters < word.length) {\r\n      onRevealNextLetter(1, revealedLetters + 1 === word.length);\r\n      setRevealedLetters((prev) => prev + 1);\r\n    }\r\n  };\r\n\r\n  const markCorrect = () => {\r\n    setIsCorrect(true); // Mark this tile as correct\r\n    setRevealedLetters(word.length); // Reveal the full word\r\n  };\r\n\r\n  const handleGuess = () => {\r\n    onGuess(markCorrect); // Trigger the modal and pass the markCorrect function\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`${styles.wordTile} ${\r\n        isCorrect || revealedLetters === word.length ? styles.correct : \"\"\r\n      }`}\r\n    >\r\n      {word.slice(0, revealedLetters) +\r\n        \"_\".repeat(word.length - revealedLetters)}\r\n      {!isCorrect && revealedLetters < word.length && (\r\n        <div className={styles.icons}>\r\n          <button\r\n            className={styles.wordFindButton}\r\n            onClick={handleRevealNextLetter}\r\n          >\r\n            🔍\r\n          </button>\r\n          <button className={styles.wordFindButton} onClick={handleGuess}>\r\n            ✏️\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst WordFind = ({ text }) => {\r\n  const [wordsEnded, setWordsEnded] = useState(0); // Count of correctly guessed words\r\n  const [topic, setTopic] = useState(\"\");\r\n  const [wordList, setWordList] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n  const [inputMessage, setInputMessage] = useState({});\r\n\r\n  const handleTileGuess = (word, wordIndex, markTileCorrect) => {\r\n    setInputMessage({\r\n      prompt: \"Enter the full word:\",\r\n      value: \"\",\r\n      word: word,\r\n      wordIndex: wordIndex,\r\n      markTileCorrect: markTileCorrect, // Pass the function to mark the tile correct\r\n    });\r\n  };\r\n\r\n  const handleInputSubmit = (guess) => {\r\n    if (guess && guess.toLowerCase() === inputMessage.word.toLowerCase()) {\r\n      inputMessage.markTileCorrect(); // Call the function to mark the tile as correct\r\n      handleCorrectGuess(); // Increment the correct guesses count in WordFind\r\n    }\r\n    setInputMessage({}); // Clear the inputMessage to close the modal\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (text.includes(\"\\n\\n\")) {\r\n      const [newTopic, words] = text.split(\"\\n\\n\", 2);\r\n      setTopic(newTopic);\r\n      setWordList(words.split(\"\\n\"));\r\n    } else {\r\n      setWordList(text.split(\"\\n\"));\r\n    }\r\n  }, [text]);\r\n\r\n  useEffect(() => {\r\n    if (wordList.length > 0) {\r\n      setScore(wordList.reduce((acc, word) => acc + word.length - 1, 0));\r\n    }\r\n  }, [wordList]);\r\n\r\n  const handleRevealNextLetter = (decrement, isFinished) => {\r\n    setScore((prevScore) => prevScore - decrement);\r\n    if (isFinished) {\r\n      setWordsEnded((prev) => prev + 1);\r\n    }\r\n  };\r\n\r\n  const handleCorrectGuess = () => {\r\n    setWordsEnded((prev) => prev + 1);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {inputMessage.prompt && (\r\n        <InputModal\r\n          title={inputMessage.prompt}\r\n          placeholder=\"Type your guess here...\"\r\n          value={inputMessage.value}\r\n          onSubmit={handleInputSubmit}\r\n          onClose={() => setInputMessage({})}\r\n        />\r\n      )}\r\n\r\n      <h1>{topic}</h1>\r\n      <div className={styles.score}>\r\n        {wordsEnded !== wordList.length && <>Possible</>} Score: {score}\r\n      </div>\r\n      <div className={styles.GameAreaGrid}>\r\n        {wordsEnded === wordList.length && (\r\n          <div className={styles.celebration}>🎂</div>\r\n        )}\r\n\r\n        {wordList.map((word, index) => (\r\n          <WordTile\r\n            key={index}\r\n            word={word}\r\n            wordIndex={index}\r\n            onRevealNextLetter={handleRevealNextLetter}\r\n            onGuess={(markTileCorrect) =>\r\n              handleTileGuess(word, index, markTileCorrect)\r\n            } // Pass markTileCorrect to handleTileGuess\r\n          />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WordFind;\r\n"],"names":["_ref","title","placeholder","value","onSubmit","onClose","multiLine","inputValue","setInputValue","useState","useEffect","handleChange","e","target","handleSubmit","handleKeyDown","key","_jsx","className","styles","children","_jsxs","type","onChange","onKeyDown","autoFocus","onClick","WordTile","word","onRevealNextLetter","onGuess","revealedLetters","setRevealedLetters","isCorrect","setIsCorrect","markCorrect","length","concat","wordTile","correct","slice","repeat","icons","wordFindButton","handleRevealNextLetter","prev","handleGuess","_ref2","text","wordsEnded","setWordsEnded","topic","setTopic","wordList","setWordList","score","setScore","inputMessage","setInputMessage","includes","newTopic","words","split","reduce","acc","decrement","isFinished","prevScore","handleCorrectGuess","_Fragment","prompt","InputModal","guess","toLowerCase","markTileCorrect","GameAreaGrid","celebration","map","index","wordIndex","handleTileGuess"],"sourceRoot":""}