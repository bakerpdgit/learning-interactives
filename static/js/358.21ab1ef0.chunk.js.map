{"version":3,"file":"static/js/358.21ab1ef0.chunk.js","mappings":"gKAgEA,QA7DA,SAAoBA,GAAY,IAAX,KAAEC,GAAMD,EAC3B,MAAOE,EAAeC,IAAoBC,EAAAA,EAAAA,UAAS,KAC5CC,EAAiBC,IAAsBF,EAAAA,EAAAA,WAAS,GACjDG,GAASC,EAAAA,EAAAA,QAAO,MAQhBC,EAASR,EASf,OAPAS,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAQC,YAAW,KACvBN,GAAmB,EAAM,GACxB,KACH,MAAO,IAAMO,aAAaF,EAAM,GAC/B,KAGDG,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACrCF,EAAAA,EAAAA,MAAA,OAAKG,MAAO,CAAEC,SAAU,WAAYC,QAAS,gBAAiBH,SAAA,EAC5DI,EAAAA,EAAAA,KAAA,OACEC,IAAKd,EACLe,IAAKb,EACLM,UAAU,qBACVQ,IAAI,WAEL,IAAIC,MAAM,KAAKC,KAAI,CAACC,EAAGC,KACtBP,EAAAA,EAAAA,KAAA,OAEEL,UAAS,aAAAa,OACP1B,EAAc2B,SAASF,GAAS,mBAAqB,aAEvDV,MAAO,CACLa,MAAM,GAADF,OACHrB,EAAOwB,QAAuC,GAA7BxB,EAAOwB,QAAQC,YAAoB,OAEtDC,OAAO,GAADL,OACJrB,EAAOwB,QAAwC,GAA9BxB,EAAOwB,QAAQG,aAAqB,OAEvDC,IAAI,GAADP,OAA6B,GAAxBQ,KAAKC,MAAMV,EAAQ,GAAO,KAClCW,KAAK,GAADV,OAAMD,EAAQ,EAAK,GAAE,MAE3BY,QACErC,EAAc2B,SAASF,GAAS,KAAO,IAzChCA,KACZzB,EAAc2B,SAASF,IAC1BxB,GAAkBqC,GAAS,IAAIA,EAAMb,IACvC,EAsCuDc,CAAUd,IAfpDA,QAoBVtB,IACCS,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2BAA0BC,SAAA,EACvCI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,kBACJI,EAAAA,EAAAA,KAAA,KAAAJ,SAAG,+BAKb,C","sources":["components/ImageReveal.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./ImageReveal.css\";\n\nfunction ImageReveal({ text }) {\n  const [revealedBoxes, setRevealedBoxes] = useState([]);\n  const [showInstruction, setShowInstruction] = useState(true);\n  const imgRef = useRef(null);\n\n  const toggleBox = (index) => {\n    if (!revealedBoxes.includes(index)) {\n      setRevealedBoxes((prev) => [...prev, index]);\n    }\n  };\n\n  const imgSrc = text;\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setShowInstruction(false);\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <div className=\"image-reveal-container\">\n      <div style={{ position: \"relative\", display: \"inline-block\" }}>\n        <img\n          ref={imgRef}\n          src={imgSrc}\n          className=\"image-reveal-image\"\n          alt=\"Reveal\"\n        />\n        {[...Array(25)].map((_, index) => (\n          <div\n            key={index}\n            className={`image-box ${\n              revealedBoxes.includes(index) ? \"image-box-reveal\" : \"image-box\"\n            }`}\n            style={{\n              width: `${\n                imgRef.current ? imgRef.current.clientWidth * 0.2 : \"20%\"\n              }`,\n              height: `${\n                imgRef.current ? imgRef.current.clientHeight * 0.2 : \"20%\"\n              }`,\n              top: `${Math.floor(index / 5) * 20}%`,\n              left: `${(index % 5) * 20}%`,\n            }}\n            onClick={\n              revealedBoxes.includes(index) ? null : () => toggleBox(index)\n            }\n          ></div>\n        ))}\n      </div>\n      {showInstruction && (\n        <div className=\"image-reveal-instruction\">\n          <h1>Image Reveal</h1>\n          <p>click boxes to reveal</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ImageReveal;\n"],"names":["_ref","text","revealedBoxes","setRevealedBoxes","useState","showInstruction","setShowInstruction","imgRef","useRef","imgSrc","useEffect","timer","setTimeout","clearTimeout","_jsxs","className","children","style","position","display","_jsx","ref","src","alt","Array","map","_","index","concat","includes","width","current","clientWidth","height","clientHeight","top","Math","floor","left","onClick","prev","toggleBox"],"sourceRoot":""}