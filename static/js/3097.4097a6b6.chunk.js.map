{"version":3,"file":"static/js/3097.4097a6b6.chunk.js","mappings":"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","sources":["webpack://class-interactives/./src/components/Fishbone.module.css?e28b","components/Fishbone.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Fishbone_container__wVv0B\",\"canvas\":\"Fishbone_canvas__NtPIH\",\"controls\":\"Fishbone_controls__xQrzF\",\"canvasWrapper\":\"Fishbone_canvasWrapper__Um0W6\",\"headTitle\":\"Fishbone_headTitle__6Z42k\",\"branchTitleTop\":\"Fishbone_branchTitleTop__We1uv\",\"branchTitleBottom\":\"Fishbone_branchTitleBottom__WNk8Y\",\"branchButtonsUp\":\"Fishbone_branchButtonsUp__2urmZ\",\"branchButtonsDown\":\"Fishbone_branchButtonsDown__gvxwy\",\"labelUp\":\"Fishbone_labelUp__xla2a\",\"labelDown\":\"Fishbone_labelDown__VB2qa\",\"labelLine\":\"Fishbone_labelLine__QbdcL\",\"addLabel\":\"Fishbone_addLabel__VcABt\",\"shiftLabel\":\"Fishbone_shiftLabel__Vq5pj\"};","import React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport InputModal from \"./InputModal\";\nimport styles from \"./Fishbone.module.css\";\n\nfunction Fishbone({ text }) {\n  const containerRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [coords, setCoords] = useState({});\n  const [headCoords, setHeadCoords] = useState({ x: 0, w: 0 });\n\n  // Initialize branches state from the text prop\n  const [branches, setBranches] = useState(() => {\n    const lines = text.split(\"\\n\");\n    const branchTitles = lines.slice(1); // Get all lines after the first for branch titles\n    return branchTitles\n      .filter((bt) => bt.trim() !== \"\") // Filter out any empty lines intended as branches\n      .map((branchTitle, index) => ({\n        id: Date.now() + index, // Generate a simple unique ID\n        title: branchTitle.trim(),\n        labels: [],\n        labelShift: 0,\n      }));\n  });\n  const [fontSize, setFontSize] = useState(1);\n  const [spacing, setSpacing] = useState(160);\n  const [modalData, setModalData] = useState({\n    show: false,\n    title: \"\",\n    callback: null,\n    value: \"\",\n    deleteCallback: null,\n  });\n\n  const title = text.split(\"\\n\")[0];\n\n  const drawDiagram = useCallback(() => {\n    // add slight delay on the redraw to ensure canvas is ready\n\n    window.setTimeout(() => {\n      const canvas = canvasRef.current;\n      if (!canvas) return; // Guard clause if canvas is not yet available\n      const ctx = canvas.getContext(\"2d\");\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      const centerY = canvas.height / 2;\n\n      // Calculate adaptive headWidth\n      const calculatedHeadWidth = Math.max(300, canvas.width / 6);\n\n      // headX is the x-coordinate of the left edge of the head box\n      const headX = canvas.width - calculatedHeadWidth - 10; // 10px padding from the right edge\n\n      ctx.lineWidth = 4;\n      ctx.strokeStyle = \"black\";\n\n      ctx.beginPath();\n      ctx.moveTo(10, centerY);\n      // Draw spine up to the left edge of the head box area\n      ctx.lineTo(headX, centerY);\n      ctx.stroke();\n\n      // branches\n      const branchSpacing = spacing;\n      const branchLength = canvas.height * 0.45;\n      const dx = branchLength * Math.SQRT1_2; // cos 45deg\n      const dy = branchLength * Math.SQRT1_2; // sin 45deg\n      const newCoords = {};\n\n      ctx.lineWidth = 2;\n      branches.forEach((br, index) => {\n        const pairIndex = Math.floor(index / 2);\n        // Branches start relative to headX, which is the left edge of the head box\n        const side = index % 2 === 0 ? \"top\" : \"bottom\"; // Alternate sides for branches\n        const startX = headX - (pairIndex + 1) * branchSpacing;\n        const startY = centerY;\n        const endX = startX - dx;\n        const endY = startY + (side === \"top\" ? -dy : dy);\n\n        ctx.beginPath();\n        ctx.moveTo(startX, startY);\n        ctx.lineTo(endX, endY);\n        ctx.stroke();\n\n        newCoords[br.id] = {\n          startX,\n          startY,\n          endX,\n          endY,\n          midX: (startX + endX) / 2,\n          midY: (startY + endY) / 2,\n        };\n      });\n      setCoords(newCoords);\n      // Update headCoords with the new adaptive width and calculated positions\n      setHeadCoords({\n        x: headX,\n        w: calculatedHeadWidth,\n      });\n    }, 0); // Delay to ensure canvas is ready\n  }, [branches, spacing, canvasRef, setCoords, setHeadCoords]);\n\n  // handle resizing\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const handleResize = () => {\n      if (containerRef.current && canvas) {\n        // Set canvas drawing surface size to match its CSS-defined element size\n        // Ensure the parent container and canvas CSS are set up for flex-grow or specific height.\n        canvas.width = canvas.offsetWidth;\n        canvas.height = canvas.offsetHeight;\n        drawDiagram();\n      }\n    };\n    // Initial call to set size\n    handleResize();\n\n    // Add a slight delay for the initial resize if layout might still be settling\n    // This can sometimes help if offsetWidth/Height are 0 on first mount.\n    const timeoutId = setTimeout(handleResize, 50);\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      clearTimeout(timeoutId);\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, [drawDiagram]); // drawDiagram dependency is correct\n\n  const openModal = (title, callback, value = \"\", deleteCallback = null) => {\n    setModalData({ show: true, title, callback, value, deleteCallback });\n  };\n\n  const handleAddBranch = () => {\n    openModal(\"Branch title\", (value) => {\n      if (!value.trim()) return;\n      setBranches((prev) => [\n        ...prev,\n        { id: Date.now(), title: value, labels: [], labelShift: 0 }, // Initialize labelShift\n      ]);\n    });\n  };\n\n  const handleAddLabel = (branchId) => {\n    openModal(\"Label\", (value) => {\n      if (!value.trim()) return;\n      setBranches((prev) =>\n        prev.map((b) =>\n          b.id === branchId\n            ? {\n                ...b,\n                labels: [...b.labels, { id: Date.now(), text: value }],\n                labelShift: 0, // Reset labelShift to 0\n              }\n            : b\n        )\n      );\n    });\n  };\n\n  const handleShiftLabels = (branchId) => {\n    const dy = (canvasRef.current.height * Math.SQRT1_2) / 16;\n    setBranches((prevBranches) =>\n      prevBranches.map((branch) =>\n        branch.id === branchId\n          ? { ...branch, labelShift: branch.labelShift + dy }\n          : branch\n      )\n    );\n  };\n\n  const handleEditBranch = (branchId, currentTitle) => {\n    openModal(\n      \"Edit branch\",\n      (value) => {\n        if (!value.trim()) return;\n        setBranches((prev) =>\n          prev.map((b) => (b.id === branchId ? { ...b, title: value } : b))\n        );\n      },\n      currentTitle,\n      () => removeBranch(branchId)\n    );\n  };\n\n  const handleEditLabel = (branchId, labelId, currentText) => {\n    openModal(\n      \"Edit label\",\n      (value) => {\n        if (!value.trim()) return;\n        setBranches((prev) =>\n          prev.map((b) =>\n            b.id === branchId\n              ? {\n                  ...b,\n                  labels: b.labels.map((l) =>\n                    l.id === labelId ? { ...l, text: value } : l\n                  ),\n                }\n              : b\n          )\n        );\n      },\n      currentText,\n      () => removeLabel(branchId, labelId)\n    );\n  };\n\n  const removeBranch = (branchId) => {\n    setBranches((prev) => prev.filter((b) => b.id !== branchId));\n  };\n\n  const removeLabel = (branchId, labelId) => {\n    setBranches((prev) =>\n      prev.map((b) =>\n        b.id === branchId\n          ? { ...b, labels: b.labels.filter((l) => l.id !== labelId) }\n          : b\n      )\n    );\n  };\n\n  const increaseFont = () => setFontSize((f) => f + 0.1);\n  const decreaseFont = () => setFontSize((f) => Math.max(0.5, f - 0.1));\n\n  const titleFont = fontSize + 0.2;\n  const branchFont = fontSize + 0.1;\n\n  return (\n    <div ref={containerRef} className={styles.container}>\n      {modalData.show && (\n        <InputModal\n          title={modalData.title}\n          value={modalData.value}\n          onSubmit={modalData.callback}\n          onDelete={modalData.deleteCallback}\n          onClose={() => setModalData({ ...modalData, show: false })}\n        />\n      )}\n      <div className={styles.controls}>\n        <button onClick={handleAddBranch}>Add Branch</button>\n        <button onClick={() => setSpacing((s) => s + 20)}>Space ↑</button>\n        <button onClick={() => setSpacing((s) => Math.max(40, s - 20))}>\n          Space ↓\n        </button>\n        <button onClick={increaseFont}>Font ↑</button>\n        <button onClick={decreaseFont}>Font ↓</button>\n      </div>\n      <div className={styles.canvasWrapper}>\n        <canvas ref={canvasRef} className={styles.canvas}></canvas>\n        {headCoords.w > 0 && (\n          <div\n            className={styles.headTitle}\n            style={{\n              fontSize: `${titleFont}em`,\n              left: headCoords.x,\n              width: headCoords.w,\n            }}\n          >\n            {title}\n          </div>\n        )}\n        {branches.map((br, idx) => {\n          const c = coords[br.id];\n          if (!c) {\n            return null;\n          }\n          const side = idx % 2 === 0 ? \"top\" : \"bottom\"; // Alternate sides for branches\n          const labels = br.labels || [];\n\n          const branchLength = canvasRef.current\n            ? canvasRef.current.offsetHeight * 0.45\n            : 100; // Default to avoid NaN\n\n          return (\n            <React.Fragment key={br.id}>\n              <div\n                className={\n                  idx % 2 === 0\n                    ? styles.branchTitleTop\n                    : styles.branchTitleBottom\n                }\n                style={{\n                  left: c.endX,\n                  top: c.endY,\n                  fontSize: `${branchFont}em`,\n                }}\n                onContextMenu={(e) => {\n                  e.preventDefault();\n                  handleEditBranch(br.id, br.title);\n                }}\n              >\n                {br.title}\n              </div>\n              {/* Container for + and ^ buttons */}\n              <div\n                className={\n                  idx % 2 === 0\n                    ? styles.branchButtonsUp\n                    : styles.branchButtonsDown\n                }\n                style={{\n                  position: \"absolute\",\n                  left: c.endX,\n                  top: c.endY,\n                  display: \"flex\", // Arrange buttons side-by-side\n                  gap: \"5px\", // Space between buttons\n                }}\n              >\n                <div\n                  className={styles.addLabel} // Assuming this class provides base styling\n                  style={{\n                    // left, top, transform are handled by parent div\n                    fontSize: `${branchFont}em`,\n                    cursor: \"pointer\", // Make it look clickable\n                  }}\n                  onClick={() => handleAddLabel(br.id)}\n                >\n                  +\n                </div>\n                <div\n                  className={styles.shiftLabel} // Create or use similar styling to addLabel\n                  style={{\n                    fontSize: `${branchFont}em`,\n                    cursor: \"pointer\",\n                  }}\n                  onClick={() => handleShiftLabels(br.id)}\n                >\n                  {side === \"bottom\" ? \"↓\" : \"↑\"}\n                </div>\n              </div>\n              {labels.map((lab, labelIdx) => {\n                const numLabels = labels.length;\n                // Ensure numLabels is not zero before division, though map shouldn't run for empty array.\n                const t_original =\n                  numLabels > 0 ? (labelIdx + 0.5) / numLabels : 0;\n\n                const pixelShift = br.labelShift || 0;\n                // Ensure positive result for modulo, then ensure it's within [0, branchLength)\n                const effectivePixelOffsetOnBranch =\n                  ((pixelShift % branchLength) + branchLength) % branchLength;\n                const t_offset_due_to_shift =\n                  branchLength > 0\n                    ? effectivePixelOffsetOnBranch / branchLength\n                    : 0;\n\n                let effective_t = t_original + t_offset_due_to_shift;\n                effective_t = effective_t - Math.floor(effective_t); // Ensure t is in [0, 1)\n\n                const lx_on_line = c.startX + (c.endX - c.startX) * effective_t;\n                const ly_on_line = c.startY + (c.endY - c.startY) * effective_t;\n\n                return (\n                  <div\n                    key={lab.id}\n                    className={\n                      side === \"top\" ? styles.labelUp : styles.labelDown\n                    }\n                    style={{\n                      left: lx_on_line,\n                      top: ly_on_line,\n                      fontSize: `${fontSize}em`,\n                    }}\n                    onContextMenu={(e) => {\n                      e.preventDefault();\n                      handleEditLabel(br.id, lab.id, lab.text);\n                    }}\n                  >\n                    {lab.text}\n                    <div\n                      className={styles.labelLine}\n                      style={{\n                        left: -20,\n                        top: \"50%\",\n                        width: 20,\n                      }}\n                    />\n                  </div>\n                );\n              })}\n            </React.Fragment>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default Fishbone;\n"],"names":["_ref","text","containerRef","useRef","canvasRef","coords","setCoords","useState","headCoords","setHeadCoords","x","w","branches","setBranches","split","slice","filter","bt","trim","map","branchTitle","index","id","Date","now","title","labels","labelShift","fontSize","setFontSize","spacing","setSpacing","modalData","setModalData","show","callback","value","deleteCallback","drawDiagram","useCallback","window","setTimeout","canvas","current","ctx","getContext","clearRect","width","height","centerY","calculatedHeadWidth","Math","max","headX","lineWidth","strokeStyle","beginPath","moveTo","lineTo","stroke","branchSpacing","branchLength","dx","SQRT1_2","dy","newCoords","forEach","br","pairIndex","floor","startX","startY","endX","endY","midX","midY","useEffect","handleResize","offsetWidth","offsetHeight","timeoutId","addEventListener","clearTimeout","removeEventListener","openModal","arguments","length","undefined","removeBranch","branchId","prev","b","removeLabel","labelId","l","titleFont","branchFont","_jsxs","ref","className","styles","children","_jsx","InputModal","onSubmit","onDelete","onClose","onClick","handleAddBranch","s","increaseFont","f","decreaseFont","style","concat","left","idx","c","side","React","top","onContextMenu","e","handleEditBranch","currentTitle","preventDefault","position","display","gap","cursor","handleAddLabel","prevBranches","branch","handleShiftLabels","lab","labelIdx","numLabels","t_original","pixelShift","effective_t","lx_on_line","ly_on_line","handleEditLabel","currentText"],"sourceRoot":""}