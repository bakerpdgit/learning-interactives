{"version":3,"file":"static/js/826.2f1cc1fd.chunk.js","mappings":"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","sources":["components/MathComponent.js","components/QuizBoard.js"],"sourcesContent":["import { InlineMath } from \"react-katex\";\r\n\r\nfunction parseAndRenderMath(text) {\r\n  const prefix = Math.random().toString(36).substring(2, 10); // Generate an 8-character random string\r\n\r\n  // Split the text based on $$ delimiters\r\n  const segments = text.split(\"$$\");\r\n  const elements = [];\r\n\r\n  segments.forEach((segment, index) => {\r\n    if (index % 2 === 1) {\r\n      // Odd-indexed segments are LaTeX (since they are enclosed between $$ delimiters)\r\n      elements.push(\r\n        <InlineMath key={`MCIM-${prefix}-${index}`} math={segment} />\r\n      );\r\n    } else {\r\n      elements.push(<span key={`MCSP-${prefix}-${index}`}>{segment}</span>);\r\n    }\r\n  });\r\n\r\n  return elements;\r\n}\r\n\r\nconst renderWithNewLines = (text) => {\r\n  return text.replace(/\\\\n/g, \"\\n\");\r\n};\r\n\r\nfunction MathComponent({ text, renderNewLines = false }) {\r\n  if (renderNewLines) {\r\n    text = renderWithNewLines(text);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        whiteSpace:\r\n          text.includes(\"\\n\") && renderNewLines ? \"pre-wrap\" : \"normal\",\r\n        marginTop: text.includes(\"$$\") ? \"0.5em\" : \"0\",\r\n      }}\r\n    >\r\n      {parseAndRenderMath(text)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MathComponent;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./QuizBoard.css\";\nimport MathComponent from \"./MathComponent.js\";\n\nfunction QuizBoard({ text }) {\n  const [state, setState] = useState([]);\n  const [columns, setColumns] = useState(4);\n\n  const processQuestionText = (qText) => {\n    const isAlignedTopLeft = qText.startsWith(\"*\");\n    const processedQuestion = isAlignedTopLeft ? qText.slice(1) : qText;\n    return { isAlignedTopLeft, content: processedQuestion };\n  };\n\n  const extractQuestionAndAnswer = (qText) => {\n    const regex = /^(.*?)(?:@([\\s\\S]*))?$/;\n    const match = regex.exec(qText);\n    return {\n      question: match[1].trim(),\n      answer: match[2] ? match[2].trim() : null,\n    };\n  };\n\n  useEffect(() => {\n    let updatedQuestions = [];\n    let columnsValue = 4; // default\n\n    if (text) {\n      const lines = text.split(\"\\n\").filter((line) => line.trim());\n\n      if (lines[0].startsWith(\"OPTIONS:\")) {\n        const optionsLine = lines[0].slice(8).trim(); // Remove 'OPTIONS:' prefix\n        const optionsArray = optionsLine.split(\",\").map((opt) => opt.trim());\n\n        optionsArray.forEach((opt) => {\n          const [key, value] = opt.split(\"=\").map((s) => s.trim());\n          if (key.toLowerCase() === \"columns\") {\n            columnsValue = parseInt(value, 10);\n          }\n        });\n\n        // Remove the OPTIONS line from the questions\n        updatedQuestions = lines.slice(1);\n      } else {\n        updatedQuestions = lines;\n      }\n    }\n\n    setColumns(columnsValue);\n\n    setState(\n      updatedQuestions.map((q) => {\n        const { question, answer } = extractQuestionAndAnswer(q);\n        const processedText = processQuestionText(question);\n        return {\n          question,\n          answer,\n          isAlignedTopLeft: processedText.isAlignedTopLeft,\n          content: processedText.content,\n          shown: 0,\n        };\n      })\n    );\n  }, [text]);\n\n  const handleClick = (index) => {\n    const newState = [...state];\n    newState[index].shown = (newState[index].shown + 1) % 6;\n    if (newState[index].shown === 2 && newState[index].answer === null) {\n      newState[index].shown += 1;\n    }\n    setState(newState);\n  };\n\n  return (\n    <>\n      <div className=\"quizBoardContainer\">\n        <div\n          className=\"board\"\n          style={{ gridTemplateColumns: `repeat(${columns}, 1fr)` }}\n        >\n          {state.map((item, index) => (\n            <div\n              key={index}\n              className={\n                \"question \" +\n                (item.shown === 3\n                  ? \"blue\"\n                  : item.shown === 4\n                  ? \"red\"\n                  : item.shown === 5\n                  ? \"grey\"\n                  : \"\")\n              }\n              onClick={() => handleClick(index)}\n            >\n              <div\n                className={`qtext ${\n                  item.isAlignedTopLeft && item.shown > 0 ? \"top-left\" : \"\"\n                }`}\n              >\n                {item.shown === 0 ? (\n                  \"Q\" + (index + 1)\n                ) : item.shown === 1 ? (\n                  <MathComponent text={item.content} renderNewLines={true} />\n                ) : item.shown === 2 ? (\n                  <MathComponent text={item.answer} renderNewLines={true} />\n                ) : (\n                  \"\"\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default QuizBoard;\n"],"names":["parseAndRenderMath","text","prefix","Math","random","toString","substring","segments","split","elements","forEach","segment","index","push","_jsx","InlineMath","math","concat","children","_ref","renderNewLines","replace","renderWithNewLines","style","whiteSpace","includes","marginTop","state","setState","useState","columns","setColumns","useEffect","updatedQuestions","columnsValue","lines","filter","line","trim","startsWith","slice","map","opt","key","value","s","toLowerCase","parseInt","q","question","answer","qText","match","exec","extractQuestionAndAnswer","processedText","isAlignedTopLeft","content","processQuestionText","shown","_Fragment","className","gridTemplateColumns","item","onClick","newState","handleClick","MathComponent"],"sourceRoot":""}