{"version":3,"file":"static/js/2334.923885fa.chunk.js","mappings":"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","sources":["webpack://class-interactives/./src/components/AudioWordComplete.module.css?405c","components/AudioWordComplete.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"audioWordCompleteContainer\":\"AudioWordComplete_audioWordCompleteContainer__HYZRY\",\"audioPlayer\":\"AudioWordComplete_audioPlayer__5VfU9\",\"sentence\":\"AudioWordComplete_sentence__U-0yV\",\"inputBox\":\"AudioWordComplete_inputBox__2gpj3\",\"foundWord\":\"AudioWordComplete_foundWord__TCqCY\",\"wrong\":\"AudioWordComplete_wrong__KtE0s\",\"nextQuestion\":\"AudioWordComplete_nextQuestion__ciWpJ\",\"celebration\":\"AudioWordComplete_celebration__koUjh\",\"pop\":\"AudioWordComplete_pop__Seee4\",\"fadeOut\":\"AudioWordComplete_fadeOut__k5Nw+\",\"hide\":\"AudioWordComplete_hide__ZhHhx\"};","import React, { useState, useEffect, useRef } from \"react\";\r\nimport ReactPlayer from \"react-player\"; // Included the missing import\r\nimport styles from \"./AudioWordComplete.module.css\";\r\nimport { useEditContext } from \"../EditContext\";\r\n\r\nfunction AudioWordComplete({ text }) {\r\n  const [blocks, setBlocks] = useState([]);\r\n  const [currentBlockIndex, setCurrentBlockIndex] = useState(0);\r\n  const [celebrate, setCelebrate] = useState(false);\r\n  const [currentSentence, setCurrentSentence] = useState(\"\");\r\n  const [currentBlock, setCurrentBlock] = useState(null);\r\n  const [asteriskedWords, setAsteriskedWords] = useState([]);\r\n  const [userInputs, setUserInputs] = useState({});\r\n  const [allCorrect, setAllCorrect] = useState(false);\r\n  const [playing, setPlaying] = useState(false);\r\n\r\n  const playerRef = useRef(null);\r\n  const audioRef = useRef(null); // Reference to the audio element\r\n  const inputRefs = useRef({});\r\n  const { imageData } = useEditContext(); // Access the local audio data\r\n\r\n  useEffect(() => {\r\n    const parseBlocks = () => {\r\n      const rawBlocks = text.trim().split(/\\r?\\n\\s*\\r?\\n/);\r\n      const parsedBlocks = rawBlocks\r\n        .map((block, index) => {\r\n          const lines = block.split(/\\r?\\n/).map((line) => line.trim());\r\n          if (lines.length !== 4) {\r\n            console.error(\r\n              `Block ${index + 1}: Expected 4 lines but got ${lines.length}.`\r\n            );\r\n            return null;\r\n          }\r\n          const [url, startTime, endTime, sentence] = lines;\r\n          return {\r\n            url,\r\n            startTime: parseFloat(startTime),\r\n            endTime: parseFloat(endTime),\r\n            sentence,\r\n          };\r\n        })\r\n        .filter((block) => block !== null);\r\n      setBlocks(parsedBlocks);\r\n    };\r\n    parseBlocks();\r\n  }, [text]);\r\n\r\n  useEffect(() => {\r\n    if (blocks.length > 0 && currentBlockIndex < blocks.length) {\r\n      const block = blocks[currentBlockIndex];\r\n      setCurrentBlock(block);\r\n      setCurrentSentence(block.sentence);\r\n\r\n      // Extract asterisked words\r\n      const regex = /\\*([^\\s]+)/g;\r\n      const words = [];\r\n      let match;\r\n      while ((match = regex.exec(block.sentence)) !== null) {\r\n        let word = match[1];\r\n        // Remove any trailing punctuation marks\r\n        word = word.replace(/[.,?!]+$/, \"\");\r\n        words.push(word);\r\n      }\r\n      setAsteriskedWords(words);\r\n\r\n      // Initialize user inputs\r\n      const inputs = {};\r\n      words.forEach((word) => {\r\n        inputs[word] = \"\";\r\n      });\r\n      setUserInputs(inputs);\r\n      setAllCorrect(false);\r\n      setPlaying(true); // Start playing immediately\r\n    } else if (currentBlockIndex >= blocks.length && blocks.length > 0) {\r\n      setCelebrate(true);\r\n    }\r\n  }, [blocks, currentBlockIndex]);\r\n\r\n  // Start or stop playback when currentBlock or playing state changes\r\n  useEffect(() => {\r\n    if (currentBlock) {\r\n      if (playing) {\r\n        if (currentBlock.url === \"[local]\") {\r\n          if (audioRef.current) {\r\n            audioRef.current.currentTime = currentBlock.startTime;\r\n            audioRef.current.play().catch((error) => {\r\n              console.error(\"Error playing audio:\", error);\r\n            });\r\n          }\r\n        } else {\r\n          if (playerRef.current) {\r\n            playerRef.current.seekTo(currentBlock.startTime, \"seconds\");\r\n          }\r\n        }\r\n      } else {\r\n        if (currentBlock.url === \"[local]\") {\r\n          if (audioRef.current) {\r\n            audioRef.current.pause();\r\n          }\r\n        } else {\r\n          // For YouTube, ReactPlayer handles pausing\r\n        }\r\n      }\r\n    }\r\n  }, [currentBlock, playing]);\r\n\r\n  useEffect(() => {\r\n    const allCorrect = asteriskedWords.every(\r\n      (w) => userInputs[w].trim().toLowerCase() === w.toLowerCase()\r\n    );\r\n    setAllCorrect(allCorrect);\r\n\r\n    // Focus on the first incomplete input\r\n    if (!allCorrect) {\r\n      const nextWord = asteriskedWords.find(\r\n        (word) => userInputs[word].trim().toLowerCase() !== word.toLowerCase()\r\n      );\r\n      if (nextWord && inputRefs.current[nextWord]) {\r\n        inputRefs.current[nextWord].focus();\r\n      }\r\n    }\r\n  }, [userInputs, asteriskedWords]);\r\n\r\n  const handleInputChange = (e) => {\r\n    const word = e.target.dataset.word;\r\n    const value = e.target.value;\r\n    setUserInputs((prevInputs) => ({\r\n      ...prevInputs,\r\n      [word]: value,\r\n    }));\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      const word = e.target.dataset.word;\r\n      const inputValue = userInputs[word];\r\n      if (inputValue.trim().toLowerCase() === word.toLowerCase()) {\r\n        // Correct\r\n        setUserInputs((prevInputs) => ({\r\n          ...prevInputs,\r\n          [word]: inputValue,\r\n        }));\r\n      } else {\r\n        // Incorrect, flash red\r\n        e.target.classList.add(styles.wrong);\r\n        setTimeout(() => {\r\n          e.target.classList.remove(styles.wrong);\r\n        }, 500);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handlePlayAudio = () => {\r\n    setPlaying(false); // Stop any current playback\r\n    setTimeout(() => {\r\n      setPlaying(true); // Start playback\r\n    }, 100); // Slight delay to ensure state updates\r\n  };\r\n\r\n  const handleAudioTimeUpdate = () => {\r\n    if (audioRef.current) {\r\n      const currentTime = audioRef.current.currentTime;\r\n      if (currentTime >= currentBlock.endTime) {\r\n        audioRef.current.pause();\r\n        setPlaying(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleAudioEnded = () => {\r\n    setPlaying(false);\r\n  };\r\n\r\n  const handleProgress = (state) => {\r\n    const currentTime = state.playedSeconds;\r\n    if (currentTime >= currentBlock.endTime) {\r\n      setPlaying(false);\r\n    }\r\n  };\r\n\r\n  const nextQuestion = () => {\r\n    setCurrentBlockIndex((prevIndex) => prevIndex + 1);\r\n    setPlaying(true); // Start playback for the next question\r\n  };\r\n\r\n  const getSentenceElements = () => {\r\n    inputRefs.current = {}; // Reset input refs here\r\n\r\n    const elements = [];\r\n    let tempSentence = currentSentence;\r\n    // Remove asterisks for display\r\n    tempSentence = tempSentence.replace(/\\*/g, \"\");\r\n\r\n    const tokens = tempSentence.split(/(\\s+)/); // Split by spaces, keeping them\r\n    tokens.forEach((token, index) => {\r\n      const trimmedToken = token.trim();\r\n      // Extract trailing punctuation\r\n      const wordMatch = trimmedToken.match(/^([^\\s.,?!]+)([.,?!]*)$/);\r\n      if (wordMatch) {\r\n        // eslint-disable-next-line\r\n        const [_, wordWithoutPunct, punctuation] = wordMatch;\r\n\r\n        if (asteriskedWords.includes(wordWithoutPunct)) {\r\n          const inputValue = userInputs[wordWithoutPunct] || \"\";\r\n          const isCorrect =\r\n            inputValue.trim().toLowerCase() === wordWithoutPunct.toLowerCase();\r\n          if (isCorrect) {\r\n            elements.push(\r\n              <span\r\n                key={index}\r\n                className={styles.foundWord}\r\n                style={{ minWidth: `${wordWithoutPunct.length}ch` }}\r\n              >\r\n                {wordWithoutPunct}\r\n              </span>\r\n            );\r\n          } else {\r\n            elements.push(\r\n              <input\r\n                key={index}\r\n                ref={(el) => {\r\n                  if (el) {\r\n                    inputRefs.current[wordWithoutPunct] = el;\r\n                  }\r\n                }}\r\n                type=\"text\"\r\n                data-word={wordWithoutPunct}\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n                onKeyDown={handleKeyDown}\r\n                style={{ width: `${wordWithoutPunct.length}ch` }}\r\n                className={styles.inputBox}\r\n              />\r\n            );\r\n          }\r\n          // Add the punctuation back\r\n          elements.push(punctuation);\r\n        } else {\r\n          elements.push(token);\r\n        }\r\n      } else {\r\n        elements.push(token);\r\n      }\r\n    });\r\n    return elements;\r\n  };\r\n\r\n  if (celebrate) {\r\n    return (\r\n      <div className={styles.celebration}>\r\n        <span role=\"img\" aria-label=\"celebrate\">\r\n          🎉\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!currentBlock) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className={styles.audioWordCompleteContainer}>\r\n      <div className={styles.audioPlayer}>\r\n        <button onClick={handlePlayAudio}>Repeat Audio</button>\r\n      </div>\r\n\r\n      {currentBlock.url === \"[local]\" ? (\r\n        <audio\r\n          ref={audioRef}\r\n          src={imageData ? URL.createObjectURL(imageData) : \"\"}\r\n          onTimeUpdate={handleAudioTimeUpdate}\r\n          onEnded={handleAudioEnded}\r\n          style={{ display: \"none\" }}\r\n        />\r\n      ) : (\r\n        <ReactPlayer\r\n          ref={playerRef}\r\n          url={currentBlock.url}\r\n          playing={playing}\r\n          controls={false}\r\n          width=\"0\"\r\n          height=\"0\"\r\n          onProgress={handleProgress}\r\n          onEnded={() => setPlaying(false)}\r\n          config={{\r\n            youtube: {\r\n              playerVars: {\r\n                autoplay: 1,\r\n                controls: 0,\r\n                start: currentBlock.startTime,\r\n                end: currentBlock.endTime,\r\n              },\r\n            },\r\n          }}\r\n        />\r\n      )}\r\n\r\n      <div className={styles.sentence}>{getSentenceElements()}</div>\r\n      {allCorrect && (\r\n        <div className={styles.nextQuestion}>\r\n          <button onClick={nextQuestion}>Next Question</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AudioWordComplete;\r\n"],"names":["_ref","text","blocks","setBlocks","useState","currentBlockIndex","setCurrentBlockIndex","celebrate","setCelebrate","currentSentence","setCurrentSentence","currentBlock","setCurrentBlock","asteriskedWords","setAsteriskedWords","userInputs","setUserInputs","allCorrect","setAllCorrect","playing","setPlaying","playerRef","useRef","audioRef","inputRefs","imageData","useEditContext","useEffect","parseBlocks","parsedBlocks","trim","split","map","block","index","lines","line","length","console","error","concat","url","startTime","endTime","sentence","parseFloat","filter","regex","words","match","exec","word","replace","push","inputs","forEach","current","currentTime","play","catch","seekTo","pause","every","w","toLowerCase","nextWord","find","focus","handleInputChange","e","target","dataset","value","prevInputs","handleKeyDown","key","inputValue","classList","add","styles","setTimeout","remove","_jsx","className","children","role","_jsxs","onClick","handlePlayAudio","ref","src","URL","createObjectURL","onTimeUpdate","handleAudioTimeUpdate","onEnded","handleAudioEnded","style","display","ReactPlayer","controls","width","height","onProgress","state","playedSeconds","config","youtube","playerVars","autoplay","start","end","getSentenceElements","elements","tempSentence","token","wordMatch","_","wordWithoutPunct","punctuation","includes","minWidth","el","type","onChange","onKeyDown","nextQuestion","prevIndex"],"sourceRoot":""}