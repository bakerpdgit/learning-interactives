{"version":3,"file":"static/js/919.1421c415.chunk.js","mappings":"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","sources":["components/Timers.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./Timers.css\";\n\nconst TimerBar = ({ label, remainingTime, height, initialTime }) => {\n  // Calculate the percentage of time remaining\n  const percentage = (remainingTime / initialTime) * 100;\n\n  // Define the style for the timer bar\n  const style = {\n    height: `${height}%`,\n    padding: \"10px\",\n    margin: \"10px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    border: \"1px solid black\",\n    // Ensure the gradient visually decreases from the left as time decreases\n    background: `linear-gradient(to left, #FFCCCC ${percentage}%, #ADD8E6 ${percentage}%)`,\n  };\n\n  return (\n    <div style={style}>\n      <span style={{ fontSize: \"xx-large\" }}>\n        {label} ({Math.max(0, Math.round(remainingTime))})\n      </span>\n    </div>\n  );\n};\n\nfunction Timers({ text }) {\n  const [showCelebration, setShowCelebration] = useState(false);\n  const [celebrationPlayed, setCelebrationPlayed] = useState(false);\n  const lines = text.split(\"\\n\");\n  const initialTimes = lines.map((line) => parseInt(line.split(\":\")[1], 10));\n  const [startTime] = useState(Date.now());\n  const [currentTime, setCurrentTime] = useState(Date.now());\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(Date.now());\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  const calculateRemainingTimes = () => {\n    let totalElapsedSeconds = (currentTime - startTime) / 1000;\n    let accumulatedTime = 0;\n\n    return initialTimes.map((initialTime, index) => {\n      if (\n        totalElapsedSeconds > accumulatedTime &&\n        totalElapsedSeconds < accumulatedTime + initialTime\n      ) {\n        // Active timer\n        const remainingTime =\n          initialTime - (totalElapsedSeconds - accumulatedTime);\n        accumulatedTime += initialTime;\n        return remainingTime;\n      } else if (totalElapsedSeconds >= accumulatedTime + initialTime) {\n        // Past timer\n        accumulatedTime += initialTime;\n        return 0;\n      } else {\n        // Future timer\n        accumulatedTime += initialTime;\n        return initialTime; // Display full time for timers that haven't started\n      }\n    });\n  };\n\n  const remainingTimes = calculateRemainingTimes();\n\n  useEffect(() => {\n    const totalDuration = initialTimes.reduce((acc, time) => acc + time, 0);\n    if (\n      (currentTime - startTime) / 1000 >= totalDuration &&\n      !celebrationPlayed\n    ) {\n      setShowCelebration(true);\n      playTrumpetBlast();\n      setCelebrationPlayed(true); // Set this to true so it doesn't play again\n    }\n  }, [currentTime, initialTimes, startTime, celebrationPlayed]);\n\n  const timerBars = lines.map((line, index) => {\n    const [label] = line.split(\":\");\n    const height =\n      (initialTimes[index] /\n        initialTimes.reduce((acc, time) => acc + time, 0)) *\n      100;\n    return (\n      <TimerBar\n        key={label}\n        label={label}\n        remainingTime={remainingTimes[index]}\n        height={height}\n        initialTime={initialTimes[index]}\n      />\n    );\n  });\n\n  return (\n    <>\n      <h1>Timers</h1>\n      <div className=\"GameArea\">{timerBars}</div>\n      {showCelebration && <div className=\"celebration\">ðŸŽ‰</div>}\n    </>\n  );\n}\n\n// Function to play a trumpet-like note\nfunction playNote(frequency, duration) {\n  // Create audio context but leave uninitialised\n  let audioCtx = null;\n\n  if (!audioCtx) {\n    audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n    // Now you can use audioContext as needed\n  }\n  // Ensure audioContext is in the correct state (resumed) if already initialized\n  if (audioCtx.state === \"suspended\") {\n    audioCtx.resume();\n  }\n\n  // Create oscillator\n  const oscillator = audioCtx.createOscillator();\n  oscillator.type = \"sawtooth\"; // Sawtooth wave is somewhat similar to a trumpet's timbre\n  oscillator.frequency.setValueAtTime(frequency, audioCtx.currentTime); // Frequency in Hz\n\n  // Create a filter to alter the sound\n  const filter = audioCtx.createBiquadFilter();\n  filter.type = \"lowpass\";\n  filter.frequency.setValueAtTime(2000, audioCtx.currentTime);\n\n  // Connect nodes and start playing\n  oscillator.connect(filter);\n  filter.connect(audioCtx.destination);\n  oscillator.start();\n  oscillator.stop(audioCtx.currentTime + duration);\n}\n\n// Play a sequence of notes to simulate a trumpet blast\nfunction playTrumpetBlast() {\n  playNote(440, 0.3); // A4\n  setTimeout(() => playNote(466.16, 0.3), 300); // A#4/Bb4\n  setTimeout(() => playNote(493.88, 0.3), 600); // B4\n  setTimeout(() => playNote(493.88, 0.3), 900); // B4\n}\n\nexport default Timers;\n"],"names":["TimerBar","_ref","label","remainingTime","height","initialTime","percentage","style","concat","padding","margin","display","alignItems","justifyContent","border","background","_jsx","children","_jsxs","fontSize","Math","max","round","playNote","frequency","duration","audioCtx","window","AudioContext","webkitAudioContext","state","resume","oscillator","createOscillator","type","setValueAtTime","currentTime","filter","createBiquadFilter","connect","destination","start","stop","_ref2","text","showCelebration","setShowCelebration","useState","celebrationPlayed","setCelebrationPlayed","lines","split","initialTimes","map","line","parseInt","startTime","Date","now","setCurrentTime","useEffect","timer","setInterval","clearInterval","remainingTimes","calculateRemainingTimes","totalElapsedSeconds","accumulatedTime","index","totalDuration","reduce","acc","time","setTimeout","timerBars","_Fragment","className"],"sourceRoot":""}