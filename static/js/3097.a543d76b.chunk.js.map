{"version":3,"file":"static/js/3097.a543d76b.chunk.js","mappings":"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","sources":["webpack://class-interactives/./src/components/Fishbone.module.css?e28b","components/Fishbone.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Fishbone_container__+3uqx\",\"canvas\":\"Fishbone_canvas__axqcP\",\"controls\":\"Fishbone_controls__DnZY5\",\"canvasWrapper\":\"Fishbone_canvasWrapper__YHU-l\",\"headTitle\":\"Fishbone_headTitle__8SVee\",\"branchTitleTop\":\"Fishbone_branchTitleTop__DpCz2\",\"branchTitleBottom\":\"Fishbone_branchTitleBottom__gMR7w\",\"branchButtonsUp\":\"Fishbone_branchButtonsUp__+iBJL\",\"branchButtonsDown\":\"Fishbone_branchButtonsDown__Bwomp\",\"labelUp\":\"Fishbone_labelUp__G1aSr\",\"labelDown\":\"Fishbone_labelDown__V0LwU\",\"labelLine\":\"Fishbone_labelLine__5xMfX\",\"addLabel\":\"Fishbone_addLabel__wufv+\",\"shiftLabel\":\"Fishbone_shiftLabel__khX5b\"};","import React, { useState, useRef, useEffect, useCallback } from \"react\";\r\nimport InputModal from \"./InputModal\";\r\nimport styles from \"./Fishbone.module.css\";\r\n\r\nfunction Fishbone({ text }) {\r\n  const containerRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  const [coords, setCoords] = useState({});\r\n  const [headCoords, setHeadCoords] = useState({ x: 0, w: 0 });\r\n  const [branches, setBranches] = useState([]);\r\n  const [fontSize, setFontSize] = useState(1);\r\n  const [spacing, setSpacing] = useState(160);\r\n  const [modalData, setModalData] = useState({\r\n    show: false,\r\n    title: \"\",\r\n    callback: null,\r\n  });\r\n\r\n  const title = text.split(\"\\n\")[0];\r\n\r\n  const drawDiagram = useCallback(() => {\r\n    // add slight delay on the redraw to ensure canvas is ready\r\n\r\n    window.setTimeout(() => {\r\n      const canvas = canvasRef.current;\r\n      if (!canvas) return; // Guard clause if canvas is not yet available\r\n      const ctx = canvas.getContext(\"2d\");\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      const centerY = canvas.height / 2;\r\n\r\n      // Calculate adaptive headWidth\r\n      const calculatedHeadWidth = Math.max(300, canvas.width / 4);\r\n\r\n      // headX is the x-coordinate of the left edge of the head box\r\n      const headX = canvas.width - calculatedHeadWidth - 10; // 10px padding from the right edge\r\n\r\n      ctx.lineWidth = 4;\r\n      ctx.strokeStyle = \"black\";\r\n\r\n      ctx.beginPath();\r\n      ctx.moveTo(10, centerY);\r\n      // Draw spine up to the left edge of the head box area\r\n      ctx.lineTo(headX, centerY);\r\n      ctx.stroke();\r\n\r\n      // branches\r\n      const branchSpacing = spacing;\r\n      const branchLength = canvas.height * 0.5;\r\n      const dx = branchLength * Math.SQRT1_2; // cos 45deg\r\n      const dy = branchLength * Math.SQRT1_2; // sin 45deg\r\n      const newCoords = {};\r\n\r\n      ctx.lineWidth = 2;\r\n      branches.forEach((br, index) => {\r\n        const pairIndex = Math.floor(index / 2);\r\n        // Branches start relative to headX, which is the left edge of the head box\r\n        const side = index % 2 === 0 ? \"top\" : \"bottom\"; // Alternate sides for branches\r\n        const startX = headX - (pairIndex + 1) * branchSpacing;\r\n        const startY = centerY;\r\n        const endX = startX - dx;\r\n        const endY = startY + (side === \"top\" ? -dy : dy);\r\n\r\n        ctx.beginPath();\r\n        ctx.moveTo(startX, startY);\r\n        ctx.lineTo(endX, endY);\r\n        ctx.stroke();\r\n\r\n        newCoords[br.id] = {\r\n          startX,\r\n          startY,\r\n          endX,\r\n          endY,\r\n          midX: (startX + endX) / 2,\r\n          midY: (startY + endY) / 2,\r\n        };\r\n      });\r\n      setCoords(newCoords);\r\n      // Update headCoords with the new adaptive width and calculated positions\r\n      setHeadCoords({\r\n        x: headX,\r\n        w: calculatedHeadWidth,\r\n      });\r\n    }, 0); // Delay to ensure canvas is ready\r\n  }, [branches, spacing, canvasRef, setCoords, setHeadCoords]);\r\n\r\n  // handle resizing\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const handleResize = () => {\r\n      if (containerRef.current && canvas) {\r\n        // Set canvas drawing surface size to match its CSS-defined element size\r\n        // Ensure the parent container and canvas CSS are set up for flex-grow or specific height.\r\n        canvas.width = canvas.offsetWidth;\r\n        canvas.height = canvas.offsetHeight;\r\n        drawDiagram();\r\n      }\r\n    };\r\n    // Initial call to set size\r\n    handleResize();\r\n\r\n    // Add a slight delay for the initial resize if layout might still be settling\r\n    // This can sometimes help if offsetWidth/Height are 0 on first mount.\r\n    const timeoutId = setTimeout(handleResize, 50);\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => {\r\n      clearTimeout(timeoutId);\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, [drawDiagram]); // drawDiagram dependency is correct\r\n\r\n  const openModal = (title, callback) => {\r\n    setModalData({ show: true, title, callback });\r\n  };\r\n\r\n  const handleAddBranch = () => {\r\n    openModal(\"Branch title\", (value) => {\r\n      if (!value.trim()) return;\r\n      setBranches((prev) => [\r\n        ...prev,\r\n        { id: Date.now(), title: value, labels: [], labelShift: 0 }, // Initialize labelShift\r\n      ]);\r\n    });\r\n  };\r\n\r\n  const handleAddLabel = (branchId) => {\r\n    openModal(\"Label\", (value) => {\r\n      if (!value.trim()) return;\r\n      setBranches((prev) =>\r\n        prev.map((b) =>\r\n          b.id === branchId\r\n            ? { ...b, labels: [...b.labels, { id: Date.now(), text: value }] }\r\n            : b\r\n        )\r\n      );\r\n    });\r\n  };\r\n\r\n  const handleShiftLabels = (branchId) => {\r\n    setBranches((prevBranches) =>\r\n      prevBranches.map((branch) =>\r\n        branch.id === branchId\r\n          ? { ...branch, labelShift: branch.labelShift + 20 }\r\n          : branch\r\n      )\r\n    );\r\n  };\r\n\r\n  const removeBranch = (branchId) => {\r\n    setBranches((prev) => prev.filter((b) => b.id !== branchId));\r\n  };\r\n\r\n  const removeLabel = (branchId, labelId) => {\r\n    setBranches((prev) =>\r\n      prev.map((b) =>\r\n        b.id === branchId\r\n          ? { ...b, labels: b.labels.filter((l) => l.id !== labelId) }\r\n          : b\r\n      )\r\n    );\r\n  };\r\n\r\n  const increaseFont = () => setFontSize((f) => f + 0.1);\r\n  const decreaseFont = () => setFontSize((f) => Math.max(0.5, f - 0.1));\r\n\r\n  const titleFont = fontSize + 0.2;\r\n  const branchFont = fontSize + 0.1;\r\n\r\n  return (\r\n    <div ref={containerRef} className={styles.container}>\r\n      {modalData.show && (\r\n        <InputModal\r\n          title={modalData.title}\r\n          value=\"\"\r\n          onSubmit={modalData.callback}\r\n          onClose={() => setModalData({ show: false })}\r\n        />\r\n      )}\r\n      <div className={styles.controls}>\r\n        <button onClick={handleAddBranch}>Add Branch</button>\r\n        <button onClick={() => setSpacing((s) => s + 20)}>Space ↑</button>\r\n        <button onClick={() => setSpacing((s) => Math.max(40, s - 20))}>\r\n          Space ↓\r\n        </button>\r\n        <button onClick={increaseFont}>Font ↑</button>\r\n        <button onClick={decreaseFont}>Font ↓</button>\r\n      </div>\r\n      <div className={styles.canvasWrapper}>\r\n        <canvas ref={canvasRef} className={styles.canvas}></canvas>\r\n        {headCoords.w > 0 && (\r\n          <div\r\n            className={styles.headTitle}\r\n            style={{\r\n              fontSize: `${titleFont}em`,\r\n              left: headCoords.x,\r\n              width: headCoords.w,\r\n            }}\r\n          >\r\n            {title}\r\n          </div>\r\n        )}\r\n        {branches.map((br, idx) => {\r\n          const c = coords[br.id];\r\n          if (!c) {\r\n            return null;\r\n          }\r\n          const side = idx % 2 === 0 ? \"top\" : \"bottom\"; // Alternate sides for branches\r\n          const labels = br.labels || [];\r\n\r\n          const branchLength = canvasRef.current\r\n            ? canvasRef.current.offsetHeight * 0.45\r\n            : 100; // Default to avoid NaN\r\n\r\n          return (\r\n            <React.Fragment key={br.id}>\r\n              <div\r\n                className={\r\n                  idx % 2 === 0\r\n                    ? styles.branchTitleTop\r\n                    : styles.branchTitleBottom\r\n                }\r\n                style={{\r\n                  left: c.endX,\r\n                  top: c.endY,\r\n                  fontSize: `${branchFont}em`,\r\n                }}\r\n                onContextMenu={(e) => {\r\n                  e.preventDefault();\r\n                  removeBranch(br.id);\r\n                }}\r\n              >\r\n                {br.title}\r\n              </div>\r\n              {/* Container for + and ^ buttons */}\r\n              <div\r\n                className={\r\n                  idx % 2 === 0\r\n                    ? styles.branchButtonsUp\r\n                    : styles.branchButtonsDown\r\n                }\r\n                style={{\r\n                  position: \"absolute\",\r\n                  left: c.endX,\r\n                  top: c.endY,\r\n                  display: \"flex\", // Arrange buttons side-by-side\r\n                  gap: \"5px\", // Space between buttons\r\n                }}\r\n              >\r\n                <div\r\n                  className={styles.addLabel} // Assuming this class provides base styling\r\n                  style={{\r\n                    // left, top, transform are handled by parent div\r\n                    fontSize: `${branchFont}em`,\r\n                    cursor: \"pointer\", // Make it look clickable\r\n                  }}\r\n                  onClick={() => handleAddLabel(br.id)}\r\n                >\r\n                  +\r\n                </div>\r\n                <div\r\n                  className={styles.shiftLabel} // Create or use similar styling to addLabel\r\n                  style={{\r\n                    fontSize: `${branchFont}em`,\r\n                    cursor: \"pointer\",\r\n                  }}\r\n                  onClick={() => handleShiftLabels(br.id)}\r\n                >\r\n                  {side === \"bottom\" ? \"↓\" : \"↑\"}\r\n                </div>\r\n              </div>\r\n              {labels.map((lab, idx) => {\r\n                const t_original = (idx + 1) / (labels.length + 1);\r\n\r\n                const pixelShift = br.labelShift || 0;\r\n                // Ensure positive result for modulo, then ensure it's within [0, branchLength)\r\n                const effectivePixelOffsetOnBranch =\r\n                  ((pixelShift % branchLength) + branchLength) % branchLength;\r\n                const t_offset_due_to_shift =\r\n                  branchLength > 0\r\n                    ? effectivePixelOffsetOnBranch / branchLength\r\n                    : 0;\r\n\r\n                let effective_t = t_original + t_offset_due_to_shift;\r\n                effective_t = effective_t - Math.floor(effective_t); // Ensure t is in [0, 1)\r\n\r\n                const lx_on_line = c.startX + (c.endX - c.startX) * effective_t;\r\n                const ly_on_line = c.startY + (c.endY - c.startY) * effective_t;\r\n\r\n                return (\r\n                  <div\r\n                    key={lab.id}\r\n                    className={\r\n                      idx % 2 === 0 ? styles.labelUp : styles.labelDown\r\n                    }\r\n                    style={{\r\n                      left: lx_on_line,\r\n                      top: ly_on_line,\r\n                      fontSize: `${fontSize}em`,\r\n                    }}\r\n                    onContextMenu={(e) => {\r\n                      e.preventDefault();\r\n                      removeLabel(br.id, lab.id);\r\n                    }}\r\n                  >\r\n                    {lab.text}\r\n                    <div\r\n                      className={styles.labelLine}\r\n                      style={{\r\n                        left: -20,\r\n                        top: \"50%\",\r\n                        width: 20,\r\n                      }}\r\n                    />\r\n                  </div>\r\n                );\r\n              })}\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Fishbone;\r\n"],"names":["_ref","text","containerRef","useRef","canvasRef","coords","setCoords","useState","headCoords","setHeadCoords","x","w","branches","setBranches","fontSize","setFontSize","spacing","setSpacing","modalData","setModalData","show","title","callback","split","drawDiagram","useCallback","window","setTimeout","canvas","current","ctx","getContext","clearRect","width","height","centerY","calculatedHeadWidth","Math","max","headX","lineWidth","strokeStyle","beginPath","moveTo","lineTo","stroke","branchSpacing","branchLength","dx","SQRT1_2","dy","newCoords","forEach","br","index","pairIndex","floor","startX","startY","endX","endY","id","midX","midY","useEffect","handleResize","offsetWidth","offsetHeight","timeoutId","addEventListener","clearTimeout","removeEventListener","openModal","titleFont","branchFont","_jsxs","ref","className","styles","children","_jsx","InputModal","value","onSubmit","onClose","onClick","handleAddBranch","trim","prev","Date","now","labels","labelShift","s","increaseFont","f","decreaseFont","style","concat","left","map","idx","c","side","React","top","onContextMenu","e","branchId","preventDefault","filter","b","position","display","gap","cursor","handleAddLabel","handleShiftLabels","prevBranches","branch","lab","t_original","length","pixelShift","effective_t","lx_on_line","ly_on_line","removeLabel","labelId","l"],"sourceRoot":""}