{"version":3,"file":"static/js/192.d0b506cb.chunk.js","mappings":"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","sources":["webpack://my-react-app/./src/components/RandomWheel.module.css?cdf8","components/RandomWheel.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"GameArea\":\"RandomWheel_GameArea__ypUzU\",\"celebration\":\"RandomWheel_celebration__A1WWm\",\"bounce\":\"RandomWheel_bounce__SMtb4\"};","import React, { useState, useEffect, useRef } from \"react\";\nimport styles from \"./RandomWheel.module.css\";\n\nfunction RandomWheel({ text }) {\n  const [items, setItems] = useState([]);\n  const [rotationAngle, setRotationAngle] = useState(0);\n  const canvasRef = useRef(null);\n  const gameAreaRef = useRef(null);\n  const animationRef = useRef(null);\n\n  const unifiedEasing = (t) => {\n    return 0.5 * (1 - Math.cos(Math.PI * t));\n  };\n\n  const spinWheel = () => {\n    let startTime = null;\n    let duration = 12000; // 1 seconds\n    let speedAdjuster = 0.6 + Math.random() * 0.4;\n\n    const spin = (timestamp) => {\n      if (!startTime) {\n        startTime = timestamp;\n      }\n\n      let elapsed = timestamp - startTime;\n      let speed;\n\n      if (elapsed < duration / 2) {\n        speed = unifiedEasing(elapsed / duration);\n      } else if (elapsed < duration) {\n        speed = 1 - unifiedEasing(elapsed / duration);\n      } else {\n        cancelAnimationFrame(animationRef.current);\n        return;\n      }\n\n      // Increased the speed multiplier to 0.2 for faster full speed\n      setRotationAngle(\n        (prevAngle) => (prevAngle + speed * speedAdjuster) % (2 * Math.PI)\n      );\n      animationRef.current = requestAnimationFrame(spin);\n    };\n\n    animationRef.current = requestAnimationFrame(spin);\n  };\n\n  useEffect(() => {\n    const parsedItems = text.split(\"\\n\");\n    setItems(parsedItems);\n  }, [text]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const gameArea = gameAreaRef.current;\n    const ctx = canvas.getContext(\"2d\");\n\n    const rect = gameArea.getBoundingClientRect();\n    canvas.width = rect.width;\n    canvas.height = rect.height;\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n    const radius = Math.min(centerX, centerY) - 10;\n\n    ctx.save();\n    ctx.translate(centerX, centerY);\n    ctx.rotate(rotationAngle);\n\n    ctx.beginPath();\n    ctx.arc(0, 0, radius, 0, 2 * Math.PI);\n    ctx.stroke();\n    ctx.fillStyle = \"lightpink\"; // Set the fill color to red\n    ctx.fill(); // Fill the circle with the specified color\n    ctx.fillStyle = \"black\"; // Set the fill color to black\n    ctx.font = \"24px Arial\";\n\n    const numItems = items.length;\n    const angleStep = (2 * Math.PI) / numItems;\n\n    const offsetAngle = angleStep / 2;\n    for (let i = 0; i < numItems; i++) {\n      const angle = i * angleStep + offsetAngle;\n      ctx.beginPath();\n      ctx.moveTo(0, 0);\n      ctx.lineTo(radius * Math.cos(angle), radius * Math.sin(angle));\n      ctx.stroke();\n    }\n\n    ctx.textAlign = \"right\";\n    ctx.textBaseline = \"middle\";\n    for (let i = 0; i < numItems; i++) {\n      const angle = i * angleStep;\n      ctx.save();\n      ctx.rotate(angle);\n      ctx.fillText(items[i], radius - 10, 0);\n      ctx.restore();\n    }\n\n    ctx.restore();\n  }, [items, rotationAngle]);\n\n  return (\n    <>\n      <h1>Random Wheel</h1>\n      <button\n        onClick={spinWheel}\n        style={{ display: \"block\", margin: \"0 auto\" }}\n      >\n        Spin Wheel\n        <br /> v\n      </button>\n      <div ref={gameAreaRef} className={styles.GameArea}>\n        <canvas ref={canvasRef}></canvas>\n      </div>\n    </>\n  );\n}\n\nexport default RandomWheel;\n"],"names":["_ref","text","items","setItems","useState","rotationAngle","setRotationAngle","canvasRef","useRef","gameAreaRef","animationRef","unifiedEasing","t","Math","cos","PI","useEffect","parsedItems","split","canvas","current","gameArea","ctx","getContext","rect","getBoundingClientRect","width","height","clearRect","centerX","centerY","radius","min","save","translate","rotate","beginPath","arc","stroke","fillStyle","fill","font","numItems","length","angleStep","offsetAngle","i","angle","moveTo","lineTo","sin","textAlign","textBaseline","fillText","restore","_jsxs","_Fragment","children","_jsx","onClick","spinWheel","startTime","duration","speedAdjuster","random","spin","timestamp","speed","elapsed","cancelAnimationFrame","prevAngle","requestAnimationFrame","style","display","margin","ref","className","styles"],"sourceRoot":""}