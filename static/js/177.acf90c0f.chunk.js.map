{"version":3,"file":"static/js/177.acf90c0f.chunk.js","mappings":"8LAwGA,QAlGA,SAAuBA,GAAY,IAAX,KAAEC,GAAMD,EAC9B,MAAME,EAAUD,EAAKE,MAAM,MAAMC,QAAQC,GAAWA,KAC7CC,EAAoBC,IAAyBC,EAAAA,EAAAA,UAAS,GACvDC,EAAQP,EAAQI,GAAoBH,MAAM,KAAKC,QAAQM,GAASA,KAC/DC,EAAcC,IAAmBJ,EAAAA,EAAAA,UAASC,EAAMI,KAAI,IAAM,WAc3DC,EAAaA,CAACJ,EAAMK,IACX,SAATA,EACKL,EAAKP,MAAM,IAAIU,KAAI,CAACG,EAAQC,KACjCC,EAAAA,EAAAA,KAAA,QAAwBC,UAAU,SAAQC,SACvCJ,GADQC,KAIF,UAATF,EACK,CAACL,EAAKW,OAAO,MAAO,IAAIC,OAAOZ,EAAKa,OAAS,GAAGpB,MAAM,KAAKU,KAChE,CAACG,EAAQC,KACPC,EAAAA,EAAAA,KAAA,QAAwBC,UAAU,SAAQC,SACvCJ,GADQC,KAKV,IACJK,OAAOZ,EAAKa,QACZpB,MAAM,IACNU,KAAI,CAACG,EAAQC,KACZC,EAAAA,EAAAA,KAAA,QAAwBC,UAAU,SAAQC,SACvCJ,GADQC,KAwBjB,OACEO,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAL,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,mBAAkBC,SAAC,qBACjCF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,eAAcC,SAAC,wCAC5BI,EAAAA,EAAAA,MAAA,OAAKL,UAAS,0BAA4BC,SAAA,EACxCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBC,SAC/BX,EAAMI,KAAI,CAACH,EAAMgB,KAChBF,EAAAA,EAAAA,MAAA,QAEEL,UAAU,gBACVQ,QAASA,IAjEDD,KAClB,MAAME,EAAW,IAAIjB,GACG,SAApBiB,EAASF,GACXE,EAASF,GAAS,SACW,UAApBE,EAASF,GAClBE,EAASF,GAAS,OAElBE,EAASF,GAAS,QAEpBd,EAAgBgB,EAAS,EAwDAC,CAAWH,GAAON,SAAA,CAEhCN,EAAWJ,EAAMC,EAAae,IAAS,MAJnCA,OAQVxB,EAAQqB,OAAS,IAChBC,EAAAA,EAAAA,MAAA,OAAKL,UAAU,oBAAmBC,SAAA,EAChCF,EAAAA,EAAAA,KAACY,EAAAA,EAAU,CACTH,QA5BaI,KACnBzB,EAAqB,IACvBC,EAAsBD,EAAqB,GAC3CM,EACEV,EAAQI,EAAqB,GAAGH,MAAM,KAAKU,KAAI,IAAM,WAEzD,EAuBUmB,SAAiC,IAAvB1B,EAAyBc,UAEnCF,EAAAA,EAAAA,KAACe,EAAAA,EAAa,OAEhBf,EAAAA,EAAAA,KAACY,EAAAA,EAAU,CACTH,QA3CaO,KACnB5B,EAAqBJ,EAAQqB,OAAS,IACxChB,EAAsBD,EAAqB,GAC3CM,EACEV,EAAQI,EAAqB,GAAGH,MAAM,KAAKU,KAAI,IAAM,WAEzD,EAsCUmB,SAAU1B,IAAuBJ,EAAQqB,OAAS,EAAEH,UAEpDF,EAAAA,EAAAA,KAACiB,EAAAA,EAAgB,cAO/B,C","sources":["components/PhraseMemorise.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { IconButton } from \"@mui/material\";\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\nimport \"./PhraseMemorise.css\"; // Importing the CSS file\n\nfunction PhraseMemorise({ text }) {\n  const phrases = text.split(\"\\n\").filter((phrase) => phrase);\n  const [currentPhraseIndex, setCurrentPhraseIndex] = useState(0);\n  const words = phrases[currentPhraseIndex].split(\" \").filter((word) => word);\n  const [displayModes, setDisplayModes] = useState(words.map(() => \"first\"));\n\n  const toggleWord = (index) => {\n    const newModes = [...displayModes];\n    if (newModes[index] === \"full\") {\n      newModes[index] = \"hidden\";\n    } else if (newModes[index] === \"first\") {\n      newModes[index] = \"full\";\n    } else {\n      newModes[index] = \"first\";\n    }\n    setDisplayModes(newModes);\n  };\n\n  const renderWord = (word, mode) => {\n    if (mode === \"full\")\n      return word.split(\"\").map((letter, letterIndex) => (\n        <span key={letterIndex} className=\"letter\">\n          {letter}\n        </span>\n      ));\n    if (mode === \"first\")\n      return [word.charAt(0), ...\"_\".repeat(word.length - 1).split(\"\")].map(\n        (letter, letterIndex) => (\n          <span key={letterIndex} className=\"letter\">\n            {letter}\n          </span>\n        )\n      );\n    return \"_\"\n      .repeat(word.length)\n      .split(\"\")\n      .map((letter, letterIndex) => (\n        <span key={letterIndex} className=\"letter\">\n          {letter}\n        </span>\n      ));\n  };\n\n  const handleNextPhrase = () => {\n    if (currentPhraseIndex < phrases.length - 1) {\n      setCurrentPhraseIndex(currentPhraseIndex + 1);\n      setDisplayModes(\n        phrases[currentPhraseIndex + 1].split(\" \").map(() => \"first\")\n      );\n    }\n  };\n\n  const handlePrevPhrase = () => {\n    if (currentPhraseIndex > 0) {\n      setCurrentPhraseIndex(currentPhraseIndex - 1);\n      setDisplayModes(\n        phrases[currentPhraseIndex - 1].split(\" \").map(() => \"first\")\n      );\n    }\n  };\n\n  return (\n    <>\n      <h1 className=\"interactiveTitle\">Phrase Memorise</h1>\n      <p className=\"instructions\">click each word to toggle its view</p>\n      <div className={`phraseMemoriseContainer`}>\n        <div className=\"phraseMemoriseBox\">\n          {words.map((word, index) => (\n            <span\n              key={index}\n              className=\"clickableWord\"\n              onClick={() => toggleWord(index)}\n            >\n              {renderWord(word, displayModes[index])}{\" \"}\n            </span>\n          ))}\n        </div>\n        {phrases.length > 1 && (\n          <div className=\"navigationButtons\">\n            <IconButton\n              onClick={handlePrevPhrase}\n              disabled={currentPhraseIndex === 0}\n            >\n              <ArrowBackIcon />\n            </IconButton>\n            <IconButton\n              onClick={handleNextPhrase}\n              disabled={currentPhraseIndex === phrases.length - 1}\n            >\n              <ArrowForwardIcon />\n            </IconButton>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default PhraseMemorise;\n"],"names":["_ref","text","phrases","split","filter","phrase","currentPhraseIndex","setCurrentPhraseIndex","useState","words","word","displayModes","setDisplayModes","map","renderWord","mode","letter","letterIndex","_jsx","className","children","charAt","repeat","length","_jsxs","_Fragment","index","onClick","newModes","toggleWord","IconButton","handlePrevPhrase","disabled","ArrowBackIcon","handleNextPhrase","ArrowForwardIcon"],"sourceRoot":""}