{"version":3,"file":"static/js/59.4b166b4b.chunk.js","mappings":"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","sources":["webpack://my-react-app/./src/components/InputModal.module.css?7028","components/InputModal.js","webpack://my-react-app/./src/components/WordFind.module.css?88b4","components/WordFind.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"modalOverlay\":\"InputModal_modalOverlay__Y-bWN\",\"modalContent\":\"InputModal_modalContent__z50rT\",\"modalTitle\":\"InputModal_modalTitle__FCo0P\",\"inputField\":\"InputModal_inputField__IeKtc\",\"buttonGroup\":\"InputModal_buttonGroup__3nwbY\",\"submitButton\":\"InputModal_submitButton__irpiv\",\"cancelButton\":\"InputModal_cancelButton__xmt2G\"};","import React, { useState, useEffect } from \"react\";\r\nimport styles from \"./InputModal.module.css\";\r\n\r\nconst InputModal = ({ title, placeholder, value = \"\", onSubmit, onClose }) => {\r\n  const [inputValue, setInputValue] = useState(value);\r\n\r\n  useEffect(() => {\r\n    setInputValue(value);\r\n  }, [value]);\r\n\r\n  const handleChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    onSubmit(inputValue);\r\n    onClose();\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      handleSubmit();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.modalOverlay}>\r\n      <div className={styles.modalContent}>\r\n        <h2 className={styles.modalTitle}>{title}</h2>\r\n        <input\r\n          type=\"text\"\r\n          className={styles.inputField}\r\n          placeholder={placeholder}\r\n          value={inputValue}\r\n          onChange={handleChange}\r\n          onKeyDown={handleKeyDown}\r\n          autoFocus\r\n        />\r\n        <div className={styles.buttonGroup}>\r\n          <button className={styles.submitButton} onClick={handleSubmit}>\r\n            Submit\r\n          </button>\r\n          <button className={styles.cancelButton} onClick={onClose}>\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputModal;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"GameAreaGrid\":\"WordFind_GameAreaGrid__QkxoS\",\"score\":\"WordFind_score__+-k8t\",\"wordFindButton\":\"WordFind_wordFindButton__Dr5KK\",\"wordTile\":\"WordFind_wordTile__CYgQI\",\"correct\":\"WordFind_correct__Q+bCz\",\"wrongGuess\":\"WordFind_wrongGuess__wNLHR\",\"celebration\":\"WordFind_celebration__vAu4G\",\"slideOut\":\"WordFind_slideOut__EmIeH\"};","import React, { useState, useEffect } from \"react\";\r\nimport styles from \"./WordFind.module.css\"; // Ensure you have corresponding CSS\r\nimport InputModal from \"./InputModal\";\r\n\r\nconst WordTile = ({ word, onRevealNextLetter, onGuess }) => {\r\n  const [revealedLetters, setRevealedLetters] = useState(1);\r\n  const [isCorrect, setIsCorrect] = useState(false);\r\n\r\n  const handleRevealNextLetter = () => {\r\n    if (revealedLetters < word.length) {\r\n      onRevealNextLetter(1, revealedLetters + 1 === word.length);\r\n      setRevealedLetters((prev) => prev + 1);\r\n    }\r\n  };\r\n\r\n  const markCorrect = () => {\r\n    setIsCorrect(true); // Mark this tile as correct\r\n    setRevealedLetters(word.length); // Reveal the full word\r\n  };\r\n\r\n  const handleGuess = () => {\r\n    onGuess(markCorrect); // Trigger the modal and pass the markCorrect function\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`${styles.wordTile} ${\r\n        isCorrect || revealedLetters === word.length ? styles.correct : \"\"\r\n      }`}\r\n    >\r\n      {word.slice(0, revealedLetters) +\r\n        \"_\".repeat(word.length - revealedLetters)}\r\n      {!isCorrect && revealedLetters < word.length && (\r\n        <div className={styles.icons}>\r\n          <button\r\n            className={styles.wordFindButton}\r\n            onClick={handleRevealNextLetter}\r\n          >\r\n            🔍\r\n          </button>\r\n          <button className={styles.wordFindButton} onClick={handleGuess}>\r\n            ✏️\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst WordFind = ({ text }) => {\r\n  const [wordsEnded, setWordsEnded] = useState(0); // Count of correctly guessed words\r\n  const [topic, setTopic] = useState(\"\");\r\n  const [wordList, setWordList] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n  const [inputMessage, setInputMessage] = useState({});\r\n\r\n  const handleTileGuess = (word, wordIndex, markTileCorrect) => {\r\n    setInputMessage({\r\n      prompt: \"Enter the full word:\",\r\n      value: \"\",\r\n      word: word,\r\n      wordIndex: wordIndex,\r\n      markTileCorrect: markTileCorrect, // Pass the function to mark the tile correct\r\n    });\r\n  };\r\n\r\n  const handleInputSubmit = (guess) => {\r\n    if (guess && guess.toLowerCase() === inputMessage.word.toLowerCase()) {\r\n      inputMessage.markTileCorrect(); // Call the function to mark the tile as correct\r\n      handleCorrectGuess(); // Increment the correct guesses count in WordFind\r\n    }\r\n    setInputMessage({}); // Clear the inputMessage to close the modal\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (text.includes(\"\\n\\n\")) {\r\n      const [newTopic, words] = text.split(\"\\n\\n\", 2);\r\n      setTopic(newTopic);\r\n      setWordList(words.split(\"\\n\"));\r\n    } else {\r\n      setWordList(text.split(\"\\n\"));\r\n    }\r\n  }, [text]);\r\n\r\n  useEffect(() => {\r\n    if (wordList.length > 0) {\r\n      setScore(wordList.reduce((acc, word) => acc + word.length - 1, 0));\r\n    }\r\n  }, [wordList]);\r\n\r\n  const handleRevealNextLetter = (decrement, isFinished) => {\r\n    setScore((prevScore) => prevScore - decrement);\r\n    if (isFinished) {\r\n      setWordsEnded((prev) => prev + 1);\r\n    }\r\n  };\r\n\r\n  const handleCorrectGuess = () => {\r\n    setWordsEnded((prev) => prev + 1);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {inputMessage.prompt && (\r\n        <InputModal\r\n          title={inputMessage.prompt}\r\n          placeholder=\"Type your guess here...\"\r\n          value={inputMessage.value}\r\n          onSubmit={handleInputSubmit}\r\n          onClose={() => setInputMessage({})}\r\n        />\r\n      )}\r\n\r\n      <h1>{topic}</h1>\r\n      <div className={styles.score}>\r\n        {wordsEnded !== wordList.length && <>Possible</>} Score: {score}\r\n      </div>\r\n      <div className={styles.GameAreaGrid}>\r\n        {wordsEnded === wordList.length && (\r\n          <div className={styles.celebration}>🎂</div>\r\n        )}\r\n\r\n        {wordList.map((word, index) => (\r\n          <WordTile\r\n            key={index}\r\n            word={word}\r\n            wordIndex={index}\r\n            onRevealNextLetter={handleRevealNextLetter}\r\n            onGuess={(markTileCorrect) =>\r\n              handleTileGuess(word, index, markTileCorrect)\r\n            } // Pass markTileCorrect to handleTileGuess\r\n          />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WordFind;\r\n"],"names":["_ref","title","placeholder","value","onSubmit","onClose","inputValue","setInputValue","useState","useEffect","handleSubmit","_jsx","className","styles","children","_jsxs","type","onChange","e","target","onKeyDown","key","autoFocus","onClick","WordTile","word","onRevealNextLetter","onGuess","revealedLetters","setRevealedLetters","isCorrect","setIsCorrect","markCorrect","length","concat","wordTile","correct","slice","repeat","icons","wordFindButton","handleRevealNextLetter","prev","handleGuess","_ref2","text","wordsEnded","setWordsEnded","topic","setTopic","wordList","setWordList","score","setScore","inputMessage","setInputMessage","includes","newTopic","words","split","reduce","acc","decrement","isFinished","prevScore","handleCorrectGuess","_Fragment","prompt","InputModal","guess","toLowerCase","markTileCorrect","GameAreaGrid","celebration","map","index","wordIndex","handleTileGuess"],"sourceRoot":""}