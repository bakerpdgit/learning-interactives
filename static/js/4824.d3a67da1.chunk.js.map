{"version":3,"file":"static/js/4824.d3a67da1.chunk.js","mappings":"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","sources":["webpack://class-interactives/./src/components/GridSolve.module.css?eb8b","components/GridSolve.js","components/MathComponent.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"GameAreaGrid\":\"GridSolve_GameAreaGrid__krVGP\",\"Card\":\"GridSolve_Card__ugqxm\",\"text\":\"GridSolve_text__ieJru\",\"answer\":\"GridSolve_answer__AHQYh\",\"centered_input\":\"GridSolve_centered_input__+UkFJ\",\"celebrationGrid\":\"GridSolve_celebrationGrid__lEA51\",\"moveUpDownGrid\":\"GridSolve_moveUpDownGrid__57Vjq\"};","import React, { useState, useRef, useEffect } from \"react\";\nimport styles from \"./GridSolve.module.css\";\nimport MathComponent from \"./MathComponent.js\";\n\nconst Card = ({ text, answer, onCorrect }) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [isCorrect, setIsCorrect] = useState(false);\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    if (isEditing) {\n      inputRef.current.focus();\n    }\n  }, [isEditing]);\n\n  const handleDivClick = () => {\n    if (!isCorrect) {\n      setIsEditing(true);\n    }\n  };\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === \"Enter\") {\n      setIsEditing(false);\n\n      const sanitizedInput = inputValue.replace(/\\s+/g, \"\").toLowerCase();\n      const sanitizedAnswer = answer.replace(/\\s+/g, \"\").toLowerCase();\n\n      if (sanitizedInput === sanitizedAnswer) {\n        setIsCorrect(true);\n        onCorrect();\n      }\n    }\n  };\n\n  return (\n    <div\n      onClick={handleDivClick}\n      className={styles.Card}\n      style={{\n        fontSize: \"1.4em\",\n        backgroundColor: isCorrect ? \"lightgreen\" : \"transparent\",\n      }}\n    >\n      <div className={styles.text}>\n        <MathComponent text={text} renderNewLines={true} />\n      </div>\n      {isEditing && (\n        <input\n          ref={inputRef}\n          className={styles.centered_input}\n          type=\"text\"\n          value={inputValue}\n          onChange={handleInputChange}\n          onKeyPress={handleKeyPress}\n          style={{ fontSize: \"0.7em\" }}\n        />\n      )}\n      {isCorrect && <div className={styles.answer}>{answer}</div>}\n    </div>\n  );\n};\n\nconst GridSolve = ({ text }) => {\n  const [showCelebration, setShowCelebration] = useState(false);\n  // eslint-disable-next-line\n  const [correctCount, setCorrectCount] = useState(0);\n\n  const handleCorrect = () => {\n    setCorrectCount((prevCount) => {\n      const newCount = prevCount + 1;\n      if (newCount === originalPairs.length) {\n        setShowCelebration(true);\n        setTimeout(() => setShowCelebration(false), 3000);\n      }\n      return newCount;\n    });\n  };\n\n  const originalPairs = text.split(\"\\n\\n\").map((pair) => {\n    const lines = pair.split(\"\\n\");\n    const answer = lines.pop();\n    const question = lines.join(\"\\n\");\n    return { question, answer };\n  });\n\n  return (\n    <>\n      <div className={styles.GameAreaGrid}>\n        {originalPairs.map((pair, index) => (\n          <Card\n            key={index}\n            text={pair.question}\n            answer={pair.answer}\n            onCorrect={handleCorrect}\n          />\n        ))}\n      </div>\n      {showCelebration && <div className={styles.celebrationGrid}>ðŸŽ‰</div>}\n    </>\n  );\n};\n\nexport default GridSolve;\n","import { InlineMath } from \"react-katex\";\n\nfunction parseAndRenderMath(text) {\n  const prefix = Math.random().toString(36).substring(2, 10); // Generate an 8-character random string\n\n  // Split the text based on $$ delimiters\n  const segments = text.split(\"$$\");\n  const elements = [];\n\n  segments.forEach((segment, index) => {\n    if (index % 2 === 1) {\n      // Odd-indexed segments are LaTeX (since they are enclosed between $$ delimiters)\n      elements.push(\n        <InlineMath key={`MCIM-${prefix}-${index}`} math={segment} />\n      );\n    } else {\n      elements.push(<span key={`MCSP-${prefix}-${index}`}>{segment}</span>);\n    }\n  });\n\n  return elements;\n}\n\nconst renderWithNewLines = (text) => {\n  return text.replace(/\\\\n/g, \"\\n\");\n};\n\nfunction MathComponent({ text, renderNewLines = false }) {\n  if (renderNewLines) {\n    text = renderWithNewLines(text);\n  }\n\n  return (\n    <div\n      style={{\n        whiteSpace:\n          text.includes(\"\\n\") && renderNewLines ? \"pre-wrap\" : \"normal\",\n        marginTop: text.includes(\"$$\") ? \"0.5em\" : \"0\",\n      }}\n    >\n      {parseAndRenderMath(text)}\n    </div>\n  );\n}\n\nexport default MathComponent;\n"],"names":["Card","_ref","text","answer","onCorrect","isEditing","setIsEditing","useState","inputValue","setInputValue","isCorrect","setIsCorrect","inputRef","useRef","useEffect","current","focus","_jsxs","onClick","handleDivClick","className","styles","style","fontSize","backgroundColor","children","_jsx","MathComponent","renderNewLines","ref","type","value","onChange","e","target","onKeyPress","key","replace","toLowerCase","_ref2","showCelebration","setShowCelebration","correctCount","setCorrectCount","handleCorrect","prevCount","newCount","originalPairs","length","setTimeout","split","map","pair","lines","pop","question","join","_Fragment","index","parseAndRenderMath","prefix","Math","random","toString","substring","segments","elements","forEach","segment","push","InlineMath","math","concat","renderWithNewLines","whiteSpace","includes","marginTop"],"sourceRoot":""}