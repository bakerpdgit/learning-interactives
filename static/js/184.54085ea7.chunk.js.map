{"version":3,"file":"static/js/184.54085ea7.chunk.js","mappings":"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","sources":["components/MatchDragDrop.js","components/MathComponent.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./MatchDragDrop.css\";\nimport MathComponent from \"./MathComponent.js\";\n\nfunction MatchDragDrop({ text }) {\n  const originalPairs = text.split(\"\\n\\n\").map((pair) => {\n    const [term, ...definition] = pair.split(\"\\n\");\n    return { term, definition: definition.join(\" \") };\n  });\n\n  const shuffled = (array) => {\n    let shuffledArray = [...array];\n    for (let i = shuffledArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [shuffledArray[i], shuffledArray[j]] = [\n        shuffledArray[j],\n        shuffledArray[i],\n      ];\n    }\n    return shuffledArray;\n  };\n\n  const [terms] = useState(shuffled(originalPairs.map((p) => p.term)));\n  const [definitions] = useState(\n    shuffled(originalPairs.map((p, idx) => ({ ...p, id: idx })))\n  );\n  const [matchedPairs, setMatchedPairs] = useState([]);\n\n  const [showCelebration, setShowCelebration] = useState(false);\n\n  const dropHandler = (termIndex, defIndex) => {\n    const definitionDiv = document.querySelector(\n      `.droppable[data-id=\"${defIndex}\"]`\n    );\n    if (terms[termIndex] === definitions[defIndex].term) {\n      definitionDiv.classList.add(\"correct\");\n      setMatchedPairs((prevState) => [...prevState, termIndex]);\n      setTimeout(() => {\n        const termToHide = document.querySelector(\n          `.draggable[data-id=\"${termIndex}\"]`\n        );\n        termToHide.style.display = \"none\";\n        definitionDiv.style.display = \"none\";\n        if (matchedPairs.length + 1 === terms.length) {\n          setShowCelebration(true);\n        }\n      }, 500);\n    } else {\n      definitionDiv.classList.add(\"wrong\");\n      setTimeout(() => {\n        definitionDiv.classList.remove(\"wrong\");\n      }, 500);\n    }\n  };\n\n  return (\n    <>\n      <h1 className=\"interactiveTitle\">Match Drag & Drop</h1>\n      {showCelebration ? (\n        <div className=\"celebration\">ðŸ˜ƒ</div>\n      ) : (\n        <div className=\"matchContainer\">\n          <div className=\"terms\">\n            {terms.map(\n              (term, index) =>\n                !matchedPairs.includes(index) && (\n                  <div\n                    key={index}\n                    className=\"draggable\"\n                    draggable\n                    data-id={index}\n                    onDragStart={(e) =>\n                      e.dataTransfer.setData(\"text/plain\", index)\n                    }\n                  >\n                    <MathComponent text={term} renderNewLines={true} />\n                  </div>\n                )\n            )}\n          </div>\n          <div className=\"definitions\">\n            {definitions.map((definition, index) => (\n              <div\n                key={index}\n                className=\"droppable\"\n                data-id={index}\n                onDragOver={(e) => e.preventDefault()}\n                onDrop={(e) => {\n                  const termIndex = e.dataTransfer.getData(\"text/plain\");\n                  dropHandler(termIndex, index);\n                }}\n              >\n                <MathComponent\n                  text={definition.definition}\n                  renderNewLines={true}\n                />\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default MatchDragDrop;\n","import { InlineMath } from \"react-katex\";\r\n\r\nfunction parseAndRenderMath(text) {\r\n  // Split the text based on $$ delimiters\r\n  const segments = text.split(\"$$\");\r\n  const elements = [];\r\n\r\n  segments.forEach((segment, index) => {\r\n    if (index % 2 === 1) {\r\n      // Odd-indexed segments are LaTeX (since they are enclosed between $$ delimiters)\r\n      elements.push(<InlineMath key={`MCIM${index}`} math={segment} />);\r\n    } else {\r\n      elements.push(<span key={`MCSP${index}`}>{segment}</span>);\r\n    }\r\n  });\r\n\r\n  return elements;\r\n}\r\n\r\nconst renderWithNewLines = (text) => {\r\n  return text.replace(/\\\\n/g, \"\\n\");\r\n};\r\n\r\nfunction MathComponent({ text, renderNewLines = false }) {\r\n  if (renderNewLines) {\r\n    text = renderWithNewLines(text);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        whiteSpace:\r\n          text.includes(\"\\n\") && renderNewLines ? \"pre-wrap\" : \"normal\",\r\n        marginTop: text.includes(\"$$\") ? \"0.5em\" : \"0\",\r\n      }}\r\n    >\r\n      {parseAndRenderMath(text)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MathComponent;\r\n"],"names":["_ref","text","originalPairs","split","map","pair","term","definition","join","shuffled","array","shuffledArray","i","length","j","Math","floor","random","terms","useState","p","definitions","idx","id","matchedPairs","setMatchedPairs","showCelebration","setShowCelebration","_jsxs","_Fragment","children","_jsx","className","index","includes","draggable","onDragStart","e","dataTransfer","setData","MathComponent","renderNewLines","onDragOver","preventDefault","onDrop","dropHandler","termIndex","defIndex","definitionDiv","document","querySelector","concat","classList","add","prevState","setTimeout","style","display","remove","getData","parseAndRenderMath","segments","elements","forEach","segment","push","InlineMath","math","replace","renderWithNewLines","whiteSpace","marginTop"],"sourceRoot":""}