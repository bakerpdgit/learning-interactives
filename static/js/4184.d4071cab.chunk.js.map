{"version":3,"file":"static/js/4184.d4071cab.chunk.js","mappings":"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","sources":["components/MatchDragDrop.js","components/MathComponent.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { DragDropContext, Draggable, Droppable } from \"@hello-pangea/dnd\";\nimport \"./MatchDragDrop.css\";\nimport MathComponent from \"./MathComponent.js\";\n\nfunction MatchDragDrop({ text }) {\n  const originalPairs = text.split(\"\\n\\n\").map((pair) => {\n    const [term, ...definition] = pair.split(\"\\n\");\n    return { term, definition: definition.join(\" \") };\n  });\n\n  const shuffled = (array) => {\n    let shuffledArray = [...array];\n    for (let i = shuffledArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [shuffledArray[i], shuffledArray[j]] = [\n        shuffledArray[j],\n        shuffledArray[i],\n      ];\n    }\n    return shuffledArray;\n  };\n\n  const [terms, setTerms] = useState(\n    shuffled(\n      originalPairs.map((p, idx) => ({\n        id: `term-${idx}`,\n        content: p.term,\n      }))\n    )\n  );\n\n  const [definitions, setDefinitions] = useState(\n    shuffled(\n      originalPairs.map((p, idx) => ({\n        id: `def-${idx}`,\n        termId: `term-${idx}`,\n        content: p.definition,\n      }))\n    )\n  );\n\n  const [matchedPairs, setMatchedPairs] = useState([]);\n  const [wrongMatch, setWrongMatch] = useState(null);\n  const [correctMatch, setCorrectMatch] = useState(null);\n  const [showCelebration, setShowCelebration] = useState(false);\n  const [showFinalResult, setShowFinalResult] = useState(false);\n\n  // Check if all pairs have been matched\n  useEffect(() => {\n    if (matchedPairs.length === originalPairs.length) {\n      setShowCelebration(true);\n      setTimeout(() => {\n        setShowCelebration(false);\n        setShowFinalResult(true);\n      }, 3000); // 3-second celebration\n    }\n  }, [matchedPairs, originalPairs.length]);\n\n  const onDragEnd = (result) => {\n    // eslint-disable-next-line no-unused-vars\n    const { source, destination, draggableId } = result;\n\n    // Dropped outside a droppable area\n    if (!destination) return;\n\n    // If dropped back to the terms area, do nothing\n    if (destination.droppableId === \"terms\") {\n      return;\n    }\n\n    // Only proceed if dropped into a definition area\n    if (destination.droppableId.startsWith(\"def-\")) {\n      const defIndex = definitions.findIndex(\n        (def) => def.id === destination.droppableId\n      );\n\n      if (definitions[defIndex].termId === draggableId) {\n        // Correct match\n        setCorrectMatch(definitions[defIndex].id);\n        setTimeout(() => {\n          setCorrectMatch(null);\n          setMatchedPairs((prevState) => [...prevState, draggableId]);\n\n          // Remove the matched term and definition from the lists\n          setTerms((prevTerms) =>\n            prevTerms.filter((term) => term.id !== draggableId)\n          );\n          setDefinitions((prevDefs) =>\n            prevDefs.filter((def) => def.id !== destination.droppableId)\n          );\n        }, 500);\n      } else {\n        // Incorrect match\n        setWrongMatch(definitions[defIndex].id);\n        setTimeout(() => {\n          setWrongMatch(null);\n        }, 500);\n      }\n    }\n  };\n\n  return (\n    <>\n      {showFinalResult ? (\n        <div className=\"matchContainer\">\n          <div className=\"terms\">\n            {originalPairs.map((pair, index) => (\n              <div key={index} className=\"finishedTerm\">\n                <MathComponent text={pair.term} renderNewLines={true} />\n              </div>\n            ))}\n          </div>\n          <div className=\"definitions\">\n            {originalPairs.map((pair, index) => (\n              <div key={index} className=\"finishedDefinition\">\n                <MathComponent text={pair.definition} renderNewLines={true} />\n              </div>\n            ))}\n          </div>\n        </div>\n      ) : showCelebration ? (\n        <div className=\"celebration\">ðŸŽ‰</div>\n      ) : (\n        <DragDropContext onDragEnd={onDragEnd}>\n          <div className=\"matchContainer\">\n            {/* Wrap terms in a Droppable */}\n            <Droppable droppableId=\"terms\" isDropDisabled={true}>\n              {(provided) => (\n                <div\n                  className=\"terms\"\n                  ref={provided.innerRef}\n                  {...provided.droppableProps}\n                >\n                  {terms.map((term, index) => (\n                    <Draggable\n                      key={term.id}\n                      draggableId={term.id}\n                      index={index}\n                    >\n                      {(provided) => (\n                        <div\n                          className=\"draggable\"\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                        >\n                          <MathComponent\n                            text={term.content}\n                            renderNewLines={true}\n                          />\n                        </div>\n                      )}\n                    </Draggable>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n            <div className=\"definitions\">\n              {definitions.map((definition) => {\n                const isMatched = matchedPairs.includes(definition.termId);\n\n                return (\n                  <Droppable\n                    key={definition.id}\n                    droppableId={definition.id}\n                    isDropDisabled={isMatched}\n                  >\n                    {(provided) => (\n                      <div\n                        className={`droppable ${\n                          correctMatch === definition.id\n                            ? \"correct\"\n                            : wrongMatch === definition.id\n                            ? \"wrong\"\n                            : \"\"\n                        }`}\n                        ref={provided.innerRef}\n                        {...provided.droppableProps}\n                      >\n                        <MathComponent\n                          text={definition.content}\n                          renderNewLines={true}\n                        />\n                        {provided.placeholder}\n                      </div>\n                    )}\n                  </Droppable>\n                );\n              })}\n            </div>\n          </div>\n        </DragDropContext>\n      )}\n    </>\n  );\n}\n\nexport default MatchDragDrop;\n","import { InlineMath } from \"react-katex\";\r\n\r\nfunction parseAndRenderMath(text) {\r\n  const prefix = Math.random().toString(36).substring(2, 10); // Generate an 8-character random string\r\n\r\n  // Split the text based on $$ delimiters\r\n  const segments = text.split(\"$$\");\r\n  const elements = [];\r\n\r\n  segments.forEach((segment, index) => {\r\n    if (index % 2 === 1) {\r\n      // Odd-indexed segments are LaTeX (since they are enclosed between $$ delimiters)\r\n      elements.push(\r\n        <InlineMath key={`MCIM-${prefix}-${index}`} math={segment} />\r\n      );\r\n    } else {\r\n      elements.push(<span key={`MCSP-${prefix}-${index}`}>{segment}</span>);\r\n    }\r\n  });\r\n\r\n  return elements;\r\n}\r\n\r\nconst renderWithNewLines = (text) => {\r\n  return text.replace(/\\\\n/g, \"\\n\");\r\n};\r\n\r\nfunction MathComponent({ text, renderNewLines = false }) {\r\n  if (renderNewLines) {\r\n    text = renderWithNewLines(text);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        whiteSpace:\r\n          text.includes(\"\\n\") && renderNewLines ? \"pre-wrap\" : \"normal\",\r\n        marginTop: text.includes(\"$$\") ? \"0.5em\" : \"0\",\r\n      }}\r\n    >\r\n      {parseAndRenderMath(text)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MathComponent;\r\n"],"names":["_ref","text","originalPairs","split","map","pair","term","definition","join","shuffled","array","shuffledArray","i","length","j","Math","floor","random","terms","setTerms","useState","p","idx","id","concat","content","definitions","setDefinitions","termId","matchedPairs","setMatchedPairs","wrongMatch","setWrongMatch","correctMatch","setCorrectMatch","showCelebration","setShowCelebration","showFinalResult","setShowFinalResult","useEffect","setTimeout","_jsx","_Fragment","children","_jsxs","className","index","MathComponent","renderNewLines","DragDropContext","onDragEnd","result","source","destination","draggableId","droppableId","startsWith","defIndex","findIndex","def","prevState","prevTerms","filter","prevDefs","Droppable","isDropDisabled","provided","ref","innerRef","droppableProps","Draggable","draggableProps","dragHandleProps","placeholder","isMatched","includes","parseAndRenderMath","prefix","toString","substring","segments","elements","forEach","segment","push","InlineMath","math","replace","renderWithNewLines","style","whiteSpace","marginTop"],"sourceRoot":""}