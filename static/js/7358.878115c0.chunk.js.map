{"version":3,"file":"static/js/7358.878115c0.chunk.js","mappings":"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","sources":["components/ImageReveal.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./ImageReveal.css\";\n\nimport { handleImageFileChange } from \"../ImageUploads\";\nimport { useEditContext } from \"../EditContext\";\nimport { LOCAL_MARKER } from \"./TextInput\";\n\nfunction ImageReveal({ text }) {\n  const [revealedBoxes, setRevealedBoxes] = useState([]);\n  const [showInstruction, setShowInstruction] = useState(true);\n  const [gridSize, setGridSize] = useState(5);\n  const [imageScale, setImageScale] = useState(1.0);\n  const [url, setUrl] = useState(\"\");\n  const [originalWidth, setOriginalWidth] = useState(0);\n  const [originalHeight, setOriginalHeight] = useState(0);\n  const [imageWidth, setImageWidth] = useState(0);\n  const [imageHeight, setImageHeight] = useState(0);\n  const imgRef = useRef(null);\n  const { imageData, setImageData } = useEditContext();\n\n  const toggleBox = (index) => {\n    if (!revealedBoxes.includes(index)) {\n      setRevealedBoxes((prev) => [...prev, index]);\n    }\n  };\n\n  useEffect(() => {\n    const handleResize = () => {\n      // reload on window resize to recalculate image dimensions\n      window.location.reload();\n    };\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, [originalWidth, originalHeight, imageScale]);\n\n  useEffect(() => {\n    // Check if first line starts with OPTIONS:\n    const optionsSet = text.startsWith(\"OPTIONS:\") ? text.split(\"\\n\")[0] : null;\n    const parsedOptions = optionsSet\n      ? Object.fromEntries(\n          optionsSet\n            .slice(8)\n            .split(\",\")\n            .map((opt) => opt.split(\"=\").map((s) => s.trim()))\n        )\n      : {};\n\n    if (parsedOptions.gridsize) {\n      setGridSize(parseInt(parsedOptions.gridsize, 10));\n    }\n\n    if (parsedOptions.scale) {\n      // Add parsed scale as a float\n      setImageScale(parseFloat(parsedOptions.scale));\n    }\n\n    // Extract the last line as the URL\n    const lines = text.split(\"\\n\").filter((line) => line.trim());\n    setUrl(lines[lines.length - 1]);\n  }, [text]);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setShowInstruction(false);\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  // Handle image load to get original dimensions\n  const handleImageLoad = () => {\n    if (imgRef.current) {\n      setOriginalWidth(imgRef.current.naturalWidth);\n      setOriginalHeight(imgRef.current.naturalHeight);\n    }\n  };\n\n  // Update image dimensions when scale or original dimensions change\n  useEffect(() => {\n    if (originalWidth && originalHeight) {\n      // Desired dimensions based on scale\n      let desiredWidth = originalWidth * imageScale;\n      let desiredHeight = originalHeight * imageScale;\n\n      // Get viewport dimensions\n      const viewportWidth = window.innerWidth;\n      const viewportHeight = window.innerHeight;\n\n      // Define maximum allowed dimensions (subtracting margins/padding if any)\n      const maxAllowedWidth = viewportWidth - 40; // Adjust as needed\n      const maxAllowedHeight = viewportHeight - 150; // Adjust as needed\n\n      // Calculate scaling factors to fit within viewport\n      const widthScaleFactor = maxAllowedWidth / desiredWidth;\n      const heightScaleFactor = maxAllowedHeight / desiredHeight;\n\n      // Use the smaller scale factor to maintain aspect ratio\n      let finalScaleFactor = Math.min(widthScaleFactor, heightScaleFactor, 1);\n\n      // Adjust dimensions if they exceed maximum allowed dimensions\n      if (finalScaleFactor < 1) {\n        desiredWidth *= finalScaleFactor;\n        desiredHeight *= finalScaleFactor;\n      }\n\n      setImageWidth(desiredWidth);\n      setImageHeight(desiredHeight);\n    }\n  }, [imageScale, originalWidth, originalHeight]);\n\n  const updateImageData = (data) => {\n    setImageData(data);\n  };\n\n  return (\n    <div className=\"image-reveal-container\">\n      <div\n        style={{\n          position: \"relative\",\n          display: \"inline-block\",\n          width: `${imageWidth}px`,\n          height: `${imageHeight}px`,\n        }}\n      >\n        {(!url.includes(LOCAL_MARKER) || imageData) && (\n          <img\n            ref={imgRef}\n            src={url && !url.includes(LOCAL_MARKER) ? url : imageData}\n            className=\"image-reveal-image\"\n            alt=\"Reveal\"\n            onLoad={handleImageLoad}\n            style={{ width: `${imageWidth}px`, height: `${imageHeight}px` }}\n          />\n        )}\n\n        {url.includes(LOCAL_MARKER) && !imageData && (\n          <div>\n            The local image will need to be provided...\n            <br />\n            <input\n              type=\"file\"\n              className=\"fileUpload\"\n              accept=\"image/*\"\n              onChange={(event) =>\n                handleImageFileChange(event.target.files[0], updateImageData)\n              }\n            />\n          </div>\n        )}\n\n        {[...Array(gridSize ** 2)].map((_, index) => (\n          <div\n            key={index}\n            className={`image-box ${\n              revealedBoxes.includes(index) ? \"image-box-reveal\" : \"image-box\"\n            }`}\n            style={{\n              width: `${100 / gridSize + 0.1}%`,\n              height: `${100 / gridSize + 0.1}%`,\n              top: `${Math.floor(index / gridSize) * (100 / gridSize)}%`,\n              left: `${(index % gridSize) * (100 / gridSize)}%`,\n            }}\n            onClick={\n              revealedBoxes.includes(index) ? null : () => toggleBox(index)\n            }\n          >\n            {index + 1}\n          </div>\n        ))}\n      </div>\n      {showInstruction && (\n        <div className=\"image-reveal-instruction\">\n          <h1>Image Reveal</h1>\n          <p>Click boxes to reveal</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ImageReveal;\n"],"names":["_ref","text","revealedBoxes","setRevealedBoxes","useState","showInstruction","setShowInstruction","gridSize","setGridSize","imageScale","setImageScale","url","setUrl","originalWidth","setOriginalWidth","originalHeight","setOriginalHeight","imageWidth","setImageWidth","imageHeight","setImageHeight","imgRef","useRef","imageData","setImageData","useEditContext","useEffect","handleResize","window","location","reload","addEventListener","removeEventListener","optionsSet","startsWith","split","parsedOptions","Object","fromEntries","slice","map","opt","s","trim","gridsize","parseInt","scale","parseFloat","lines","filter","line","length","timer","setTimeout","clearTimeout","desiredWidth","desiredHeight","widthScaleFactor","innerWidth","heightScaleFactor","innerHeight","finalScaleFactor","Math","min","updateImageData","data","_jsxs","className","children","style","position","display","width","concat","height","includes","LOCAL_MARKER","_jsx","ref","src","alt","onLoad","handleImageLoad","current","naturalWidth","naturalHeight","type","accept","onChange","event","handleImageFileChange","target","files","Array","_","index","top","floor","left","onClick","prev","toggleBox"],"sourceRoot":""}