{"version":3,"file":"static/js/1428.378b48c2.chunk.js","mappings":"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","sources":["webpack://class-interactives/./src/components/InputModal.module.css?7028","components/InputModal.js","webpack://class-interactives/./src/components/ColorPickerModal.module.css?9c08","components/ColorPickerModal.js","webpack://class-interactives/./src/components/KanbanBoard.module.css?5d1a","components/KanbanBoard.js","components/MathComponent.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"modalOverlay\":\"InputModal_modalOverlay__Y-bWN\",\"modalContent\":\"InputModal_modalContent__z50rT\",\"modalTitle\":\"InputModal_modalTitle__FCo0P\",\"inputField\":\"InputModal_inputField__IeKtc\",\"inputArea\":\"InputModal_inputArea__qi5q6\",\"buttonGroup\":\"InputModal_buttonGroup__3nwbY\",\"submitButton\":\"InputModal_submitButton__irpiv\",\"cancelButton\":\"InputModal_cancelButton__xmt2G\"};","import React, { useState, useEffect } from \"react\";\r\nimport styles from \"./InputModal.module.css\";\r\n\r\nconst InputModal = ({\r\n  title,\r\n  placeholder,\r\n  value = \"\",\r\n  onSubmit,\r\n  onClose,\r\n  multiLine = false,\r\n}) => {\r\n  const [inputValue, setInputValue] = useState(value);\r\n\r\n  useEffect(() => {\r\n    setInputValue(value);\r\n  }, [value]);\r\n\r\n  const handleChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    onSubmit(inputValue);\r\n    onClose();\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === \"Enter\" && !multiLine) {\r\n      handleSubmit();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.modalOverlay}>\r\n      <div className={styles.modalContent}>\r\n        <h2 className={styles.modalTitle}>{title}</h2>\r\n        {multiLine ? (\r\n          <textarea\r\n            type=\"text\"\r\n            className={styles.inputArea}\r\n            placeholder={placeholder}\r\n            value={inputValue}\r\n            onChange={handleChange}\r\n            onKeyDown={handleKeyDown}\r\n            autoFocus\r\n          />\r\n        ) : (\r\n          <input\r\n            type=\"text\"\r\n            className={styles.inputField}\r\n            placeholder={placeholder}\r\n            value={inputValue}\r\n            onChange={handleChange}\r\n            onKeyDown={handleKeyDown}\r\n            autoFocus\r\n          />\r\n        )}\r\n\r\n        <div className={styles.buttonGroup}>\r\n          <button className={styles.submitButton} onClick={handleSubmit}>\r\n            Submit\r\n          </button>\r\n          <button className={styles.cancelButton} onClick={onClose}>\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputModal;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"modalOverlay\":\"ColorPickerModal_modalOverlay__DFw5o\",\"modalContent\":\"ColorPickerModal_modalContent__w2quJ\",\"modalTitle\":\"ColorPickerModal_modalTitle__w6cGx\",\"buttonGroup\":\"ColorPickerModal_buttonGroup__1ZKIz\",\"submitButton\":\"ColorPickerModal_submitButton__1j8oD\",\"cancelButton\":\"ColorPickerModal_cancelButton__WSvhb\"};","import React, { useState } from \"react\";\r\nimport styles from \"./ColorPickerModal.module.css\";\r\n\r\nfunction ColorPickerModal({ title, initialColor, onSubmit, onClose }) {\r\n  const [colorValue, setColorValue] = useState(initialColor || \"#FFFFFF\");\r\n\r\n  const handleSubmit = () => {\r\n    onSubmit(colorValue);\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <div className={styles.modalOverlay}>\r\n      <div className={styles.modalContent}>\r\n        <h2 className={styles.modalTitle}>{title}</h2>\r\n        <input\r\n          type=\"color\"\r\n          value={colorValue}\r\n          onChange={(e) => setColorValue(e.target.value)}\r\n        />\r\n        <div className={styles.buttonGroup}>\r\n          <button className={styles.submitButton} onClick={handleSubmit}>\r\n            Submit\r\n          </button>\r\n          <button className={styles.cancelButton} onClick={onClose}>\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ColorPickerModal;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"kanbanBoard\":\"KanbanBoard_kanbanBoard__XUkTy\",\"kanbanColumns\":\"KanbanBoard_kanbanColumns__vWkWw\",\"kanbanColumn\":\"KanbanBoard_kanbanColumn__WAdjB\",\"kanbanColumnHeader\":\"KanbanBoard_kanbanColumnHeader__cgoph\",\"columnMenuButton\":\"KanbanBoard_columnMenuButton__IMxCs\",\"columnDropdown\":\"KanbanBoard_columnDropdown__QFEke\",\"columnDropdownItem\":\"KanbanBoard_columnDropdownItem__z+BWZ\",\"addItemBtn\":\"KanbanBoard_addItemBtn__T89OM\",\"kanbanColumnContent\":\"KanbanBoard_kanbanColumnContent__6F2D7\",\"kanbanItem\":\"KanbanBoard_kanbanItem__GnooQ\",\"deleteItem\":\"KanbanBoard_deleteItem__lsGm5\",\"addColumn\":\"KanbanBoard_addColumn__FJHNm\",\"addColumnBar\":\"KanbanBoard_addColumnBar__Dx-l1\"};","import React, { useState, useMemo } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"@hello-pangea/dnd\";\nimport MathComponent from \"./MathComponent\";\nimport InputModal from \"./InputModal\";\nimport ColorPickerModal from \"./ColorPickerModal\";\nimport styles from \"./KanbanBoard.module.css\";\n\nfunction KanbanBoard({ text }) {\n  // Parse the text prop to extract options and initial columns\n  const { options, initialColumns } = useMemo(() => {\n    const lines = text.split(\"\\n\").filter((line) => line.trim() !== \"\");\n    let options = {};\n    let initialColumns = [];\n\n    if (lines[0].startsWith(\"OPTIONS:\")) {\n      const optionsLine = lines.shift().substring(8); // Remove 'OPTIONS:'\n      optionsLine.split(\",\").forEach((option) => {\n        const [key, value] = option.split(\"=\");\n        options[key.trim()] = value.trim();\n      });\n    }\n\n    initialColumns = lines.map((line, index) => ({\n      id: `column-${index}`,\n      name: line.trim(),\n      color: \"#FFFDD0\", // Light cream color\n      items: [],\n    }));\n\n    return { options, initialColumns };\n  }, [text]);\n\n  const [columns, setColumns] = useState(initialColumns);\n\n  // State for InputModal\n  const [inputModalOpen, setInputModalOpen] = useState(false);\n  const [inputModalProps, setInputModalProps] = useState({});\n\n  // State for ColorPickerModal\n  const [colorPickerModalOpen, setColorPickerModalOpen] = useState(false);\n  const [colorPickerModalProps, setColorPickerModalProps] = useState({});\n\n  const [columnMenuOpen, setColumnMenuOpen] = useState(null);\n\n  // Handle adding new items\n  const handleAddItem = (columnId) => {\n    setInputModalProps({\n      title: \"Please enter text for the new item:\",\n      placeholder: \"Type here...\",\n      value: \"\",\n      onSubmit: (userInput) => {\n        if (userInput) {\n          const newItem = {\n            id: `item-${Date.now()}`,\n            content: userInput,\n          };\n\n          setColumns((prevColumns) =>\n            prevColumns.map((column) => {\n              if (column.id === columnId) {\n                return {\n                  ...column,\n                  items: [...column.items, newItem],\n                };\n              }\n              return column;\n            })\n          );\n        }\n        setInputModalOpen(false);\n      },\n      multiLine: true,\n    });\n    setInputModalOpen(true);\n  };\n\n  // Handle renaming a column\n  const handleRenameColumn = (columnId, currentName) => {\n    setInputModalProps({\n      title: \"Rename Column:\",\n      placeholder: \"Enter new column name\",\n      value: currentName,\n      onSubmit: (newName) => {\n        if (newName) {\n          setColumns((prevColumns) =>\n            prevColumns.map((column) => {\n              if (column.id === columnId) {\n                return {\n                  ...column,\n                  name: newName,\n                };\n              }\n              return column;\n            })\n          );\n        }\n        setInputModalOpen(false);\n      },\n      multiLine: false,\n    });\n    setInputModalOpen(true);\n    setColumnMenuOpen(null);\n  };\n\n  // Handle adding a new column\n  const handleAddColumn = () => {\n    setInputModalProps({\n      title: \"Add New Column:\",\n      placeholder: \"Enter column name\",\n      value: \"\",\n      onSubmit: (newName) => {\n        if (newName) {\n          const newColumn = {\n            id: `column-${Date.now()}`,\n            name: newName,\n            color: \"#FFFDD0\",\n            items: [],\n          };\n          setColumns((prevColumns) => [...prevColumns, newColumn]);\n        }\n        setInputModalOpen(false);\n      },\n      multiLine: false,\n    });\n    setInputModalOpen(true);\n  };\n\n  // Handle recolouring a column\n  const handleRecolourColumn = (columnId, currentColor) => {\n    setColorPickerModalProps({\n      title: \"Select Column Colour:\",\n      initialColor: currentColor,\n      onSubmit: (newColor) => {\n        setColumns((prevColumns) =>\n          prevColumns.map((column) => {\n            if (column.id === columnId) {\n              return {\n                ...column,\n                color: newColor,\n              };\n            }\n            return column;\n          })\n        );\n        setColorPickerModalOpen(false);\n      },\n    });\n    setColorPickerModalOpen(true);\n    setColumnMenuOpen(null);\n  };\n\n  // Handle deleting a column\n  const handleDeleteColumn = (columnId) => {\n    setColumns((prevColumns) =>\n      prevColumns.filter((column) => column.id !== columnId)\n    );\n    setColumnMenuOpen(null);\n  };\n\n  // Handle deleting an item\n  const handleDeleteItem = (columnId, itemId) => {\n    setColumns((prevColumns) =>\n      prevColumns.map((column) => {\n        if (column.id === columnId) {\n          return {\n            ...column,\n            items: column.items.filter((item) => item.id !== itemId),\n          };\n        }\n        return column;\n      })\n    );\n  };\n\n  const handleToggleColumnMenu = (columnId) => {\n    setColumnMenuOpen((prev) => (prev === columnId ? null : columnId));\n  };\n\n  // Handle drag and drop\n  const onDragEnd = (result) => {\n    const { source, destination } = result;\n\n    // If dropped outside the list, do nothing\n    if (!destination) {\n      return;\n    }\n\n    // If dropped in the same place, do nothing\n    if (\n      source.droppableId === destination.droppableId &&\n      source.index === destination.index\n    ) {\n      return;\n    }\n\n    // Move the item from source to destination\n    setColumns((prevColumns) => {\n      const sourceColumnIndex = prevColumns.findIndex(\n        (column) => column.id === source.droppableId\n      );\n      const destColumnIndex = prevColumns.findIndex(\n        (column) => column.id === destination.droppableId\n      );\n\n      const sourceColumn = prevColumns[sourceColumnIndex];\n      const destColumn = prevColumns[destColumnIndex];\n\n      const sourceItems = Array.from(sourceColumn.items);\n      const destItems = Array.from(destColumn.items);\n\n      const [removedItem] = sourceItems.splice(source.index, 1);\n\n      if (sourceColumn.id === destColumn.id) {\n        // Reordering within the same column\n        sourceItems.splice(destination.index, 0, removedItem);\n\n        const newColumns = [...prevColumns];\n        newColumns[sourceColumnIndex] = {\n          ...sourceColumn,\n          items: sourceItems,\n        };\n\n        return newColumns;\n      } else {\n        // Moving item to a different column\n        destItems.splice(destination.index, 0, removedItem);\n\n        const newColumns = [...prevColumns];\n\n        newColumns[sourceColumnIndex] = {\n          ...sourceColumn,\n          items: sourceItems,\n        };\n\n        newColumns[destColumnIndex] = {\n          ...destColumn,\n          items: destItems,\n        };\n\n        return newColumns;\n      }\n    });\n  };\n\n  return (\n    <>\n      {inputModalOpen && (\n        <InputModal\n          title={inputModalProps.title}\n          placeholder={inputModalProps.placeholder}\n          value={inputModalProps.value}\n          onSubmit={inputModalProps.onSubmit}\n          onClose={() => setInputModalOpen(false)}\n          multiLine={inputModalProps.multiLine}\n        />\n      )}\n      {colorPickerModalOpen && (\n        <ColorPickerModal\n          title={colorPickerModalProps.title}\n          initialColor={colorPickerModalProps.initialColor}\n          onSubmit={colorPickerModalProps.onSubmit}\n          onClose={() => setColorPickerModalOpen(false)}\n        />\n      )}\n      {options.add === \"yes\" && (\n        <div className={styles.addColumnBar}>\n          <button className={styles.addColumn} onClick={handleAddColumn}>\n            Add Column\n          </button>\n        </div>\n      )}\n      <div className={styles.kanbanBoard}>\n        <div className={styles.kanbanColumns}>\n          <DragDropContext onDragEnd={onDragEnd}>\n            {columns.map((column) => (\n              <div\n                key={column.id}\n                className={styles.kanbanColumn}\n                style={{ backgroundColor: column.color }}\n              >\n                <div className={styles.kanbanColumnHeader}>\n                  <span className={styles.kanbanColumnTitle}>\n                    {column.name}\n                  </span>\n                  <div>\n                    <button\n                      onClick={() => handleAddItem(column.id)}\n                      className={styles.addItemBtn}\n                    >\n                      Add\n                    </button>\n                  </div>\n                  {/* Dropdown menu */}\n                  <div className={styles.columnMenu}>\n                    <button\n                      className={styles.columnMenuButton}\n                      onClick={() => handleToggleColumnMenu(column.id)}\n                    >\n                      &#x22EE;\n                    </button>\n                    {columnMenuOpen === column.id && (\n                      <div className={styles.columnDropdown}>\n                        {options.add === \"yes\" && (\n                          <>\n                            <div\n                              className={styles.columnDropdownItem}\n                              onClick={() =>\n                                handleRenameColumn(column.id, column.name)\n                              }\n                            >\n                              Rename\n                            </div>\n                            <div\n                              className={styles.columnDropdownItem}\n                              onClick={() => handleDeleteColumn(column.id)}\n                            >\n                              Delete\n                            </div>\n                          </>\n                        )}\n                        <div\n                          className={styles.columnDropdownItem}\n                          onClick={() =>\n                            handleRecolourColumn(column.id, column.color)\n                          }\n                        >\n                          Recolour\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <Droppable droppableId={column.id}>\n                  {(provided) => (\n                    <div\n                      className={styles.kanbanColumnContent}\n                      ref={provided.innerRef}\n                      {...provided.droppableProps}\n                    >\n                      {column.items.map((item, index) => (\n                        <Draggable\n                          key={item.id}\n                          draggableId={item.id}\n                          index={index}\n                        >\n                          {(provided) => (\n                            <div\n                              className={styles.kanbanItem}\n                              ref={provided.innerRef}\n                              {...provided.draggableProps}\n                              {...provided.dragHandleProps}\n                            >\n                              <div\n                                className={styles.deleteItem}\n                                onClick={() =>\n                                  handleDeleteItem(column.id, item.id)\n                                }\n                              >\n                                &#x2716;\n                              </div>\n                              <MathComponent\n                                text={item.content}\n                                renderNewLines={true}\n                              />\n                            </div>\n                          )}\n                        </Draggable>\n                      ))}\n                      {provided.placeholder}\n                    </div>\n                  )}\n                </Droppable>\n              </div>\n            ))}\n          </DragDropContext>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default KanbanBoard;\n","import { InlineMath } from \"react-katex\";\r\n\r\nfunction parseAndRenderMath(text) {\r\n  const prefix = Math.random().toString(36).substring(2, 10); // Generate an 8-character random string\r\n\r\n  // Split the text based on $$ delimiters\r\n  const segments = text.split(\"$$\");\r\n  const elements = [];\r\n\r\n  segments.forEach((segment, index) => {\r\n    if (index % 2 === 1) {\r\n      // Odd-indexed segments are LaTeX (since they are enclosed between $$ delimiters)\r\n      elements.push(\r\n        <InlineMath key={`MCIM-${prefix}-${index}`} math={segment} />\r\n      );\r\n    } else {\r\n      elements.push(<span key={`MCSP-${prefix}-${index}`}>{segment}</span>);\r\n    }\r\n  });\r\n\r\n  return elements;\r\n}\r\n\r\nconst renderWithNewLines = (text) => {\r\n  return text.replace(/\\\\n/g, \"\\n\");\r\n};\r\n\r\nfunction MathComponent({ text, renderNewLines = false }) {\r\n  if (renderNewLines) {\r\n    text = renderWithNewLines(text);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        whiteSpace:\r\n          text.includes(\"\\n\") && renderNewLines ? \"pre-wrap\" : \"normal\",\r\n        marginTop: text.includes(\"$$\") ? \"0.5em\" : \"0\",\r\n      }}\r\n    >\r\n      {parseAndRenderMath(text)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MathComponent;\r\n"],"names":["_ref","title","placeholder","value","onSubmit","onClose","multiLine","inputValue","setInputValue","useState","useEffect","handleChange","e","target","handleSubmit","handleKeyDown","key","_jsx","className","styles","children","_jsxs","type","onChange","onKeyDown","autoFocus","onClick","initialColor","colorValue","setColorValue","text","options","initialColumns","useMemo","lines","split","filter","line","trim","startsWith","shift","substring","forEach","option","map","index","id","concat","name","color","items","columns","setColumns","inputModalOpen","setInputModalOpen","inputModalProps","setInputModalProps","colorPickerModalOpen","setColorPickerModalOpen","colorPickerModalProps","setColorPickerModalProps","columnMenuOpen","setColumnMenuOpen","_Fragment","InputModal","ColorPickerModal","add","addColumnBar","addColumn","handleAddColumn","newName","newColumn","Date","now","prevColumns","kanbanBoard","kanbanColumns","DragDropContext","onDragEnd","result","source","destination","droppableId","sourceColumnIndex","findIndex","column","destColumnIndex","sourceColumn","destColumn","sourceItems","Array","from","destItems","removedItem","splice","newColumns","kanbanColumn","style","backgroundColor","kanbanColumnHeader","kanbanColumnTitle","handleAddItem","columnId","userInput","newItem","content","addItemBtn","columnMenu","columnMenuButton","handleToggleColumnMenu","prev","columnDropdown","columnDropdownItem","handleRenameColumn","currentName","handleDeleteColumn","handleRecolourColumn","currentColor","newColor","Droppable","provided","kanbanColumnContent","ref","innerRef","droppableProps","item","Draggable","draggableId","kanbanItem","draggableProps","dragHandleProps","deleteItem","handleDeleteItem","itemId","MathComponent","renderNewLines","parseAndRenderMath","prefix","Math","random","toString","segments","elements","segment","push","InlineMath","math","replace","renderWithNewLines","whiteSpace","includes","marginTop"],"sourceRoot":""}