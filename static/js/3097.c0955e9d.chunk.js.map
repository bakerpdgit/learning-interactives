{"version":3,"file":"static/js/3097.c0955e9d.chunk.js","mappings":"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","sources":["webpack://class-interactives/./src/components/Fishbone.module.css?e28b","components/Fishbone.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Fishbone_container__+3uqx\",\"canvas\":\"Fishbone_canvas__axqcP\",\"controls\":\"Fishbone_controls__DnZY5\",\"canvasWrapper\":\"Fishbone_canvasWrapper__YHU-l\",\"headTitle\":\"Fishbone_headTitle__8SVee\",\"branchTitleTop\":\"Fishbone_branchTitleTop__DpCz2\",\"branchTitleBottom\":\"Fishbone_branchTitleBottom__gMR7w\",\"branchButtonsUp\":\"Fishbone_branchButtonsUp__+iBJL\",\"branchButtonsDown\":\"Fishbone_branchButtonsDown__Bwomp\",\"labelUp\":\"Fishbone_labelUp__G1aSr\",\"labelDown\":\"Fishbone_labelDown__V0LwU\",\"labelLine\":\"Fishbone_labelLine__5xMfX\",\"addLabel\":\"Fishbone_addLabel__wufv+\",\"shiftLabel\":\"Fishbone_shiftLabel__khX5b\"};","import React, { useState, useRef, useEffect, useCallback } from \"react\";\r\nimport InputModal from \"./InputModal\";\r\nimport styles from \"./Fishbone.module.css\";\r\n\r\nfunction Fishbone({ text }) {\r\n  const containerRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  const [coords, setCoords] = useState({});\r\n  const [headCoords, setHeadCoords] = useState({ x: 0, w: 0 });\r\n\r\n  // Initialize branches state from the text prop\r\n  const [branches, setBranches] = useState(() => {\r\n    const lines = text.split(\"\\n\");\r\n    const branchTitles = lines.slice(1); // Get all lines after the first for branch titles\r\n    return branchTitles\r\n      .filter((bt) => bt.trim() !== \"\") // Filter out any empty lines intended as branches\r\n      .map((branchTitle, index) => ({\r\n        id: Date.now() + index, // Generate a simple unique ID\r\n        title: branchTitle.trim(),\r\n        labels: [],\r\n        labelShift: 0,\r\n      }));\r\n  });\r\n  const [fontSize, setFontSize] = useState(1);\r\n  const [spacing, setSpacing] = useState(160);\r\n  const [modalData, setModalData] = useState({\r\n    show: false,\r\n    title: \"\",\r\n    callback: null,\r\n  });\r\n\r\n  const title = text.split(\"\\n\")[0];\r\n\r\n  const drawDiagram = useCallback(() => {\r\n    // add slight delay on the redraw to ensure canvas is ready\r\n\r\n    window.setTimeout(() => {\r\n      const canvas = canvasRef.current;\r\n      if (!canvas) return; // Guard clause if canvas is not yet available\r\n      const ctx = canvas.getContext(\"2d\");\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      const centerY = canvas.height / 2;\r\n\r\n      // Calculate adaptive headWidth\r\n      const calculatedHeadWidth = Math.max(300, canvas.width / 4);\r\n\r\n      // headX is the x-coordinate of the left edge of the head box\r\n      const headX = canvas.width - calculatedHeadWidth - 10; // 10px padding from the right edge\r\n\r\n      ctx.lineWidth = 4;\r\n      ctx.strokeStyle = \"black\";\r\n\r\n      ctx.beginPath();\r\n      ctx.moveTo(10, centerY);\r\n      // Draw spine up to the left edge of the head box area\r\n      ctx.lineTo(headX, centerY);\r\n      ctx.stroke();\r\n\r\n      // branches\r\n      const branchSpacing = spacing;\r\n      const branchLength = canvas.height * 0.5;\r\n      const dx = branchLength * Math.SQRT1_2; // cos 45deg\r\n      const dy = branchLength * Math.SQRT1_2; // sin 45deg\r\n      const newCoords = {};\r\n\r\n      ctx.lineWidth = 2;\r\n      branches.forEach((br, index) => {\r\n        const pairIndex = Math.floor(index / 2);\r\n        // Branches start relative to headX, which is the left edge of the head box\r\n        const side = index % 2 === 0 ? \"top\" : \"bottom\"; // Alternate sides for branches\r\n        const startX = headX - (pairIndex + 1) * branchSpacing;\r\n        const startY = centerY;\r\n        const endX = startX - dx;\r\n        const endY = startY + (side === \"top\" ? -dy : dy);\r\n\r\n        ctx.beginPath();\r\n        ctx.moveTo(startX, startY);\r\n        ctx.lineTo(endX, endY);\r\n        ctx.stroke();\r\n\r\n        newCoords[br.id] = {\r\n          startX,\r\n          startY,\r\n          endX,\r\n          endY,\r\n          midX: (startX + endX) / 2,\r\n          midY: (startY + endY) / 2,\r\n        };\r\n      });\r\n      setCoords(newCoords);\r\n      // Update headCoords with the new adaptive width and calculated positions\r\n      setHeadCoords({\r\n        x: headX,\r\n        w: calculatedHeadWidth,\r\n      });\r\n    }, 0); // Delay to ensure canvas is ready\r\n  }, [branches, spacing, canvasRef, setCoords, setHeadCoords]);\r\n\r\n  // handle resizing\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const handleResize = () => {\r\n      if (containerRef.current && canvas) {\r\n        // Set canvas drawing surface size to match its CSS-defined element size\r\n        // Ensure the parent container and canvas CSS are set up for flex-grow or specific height.\r\n        canvas.width = canvas.offsetWidth;\r\n        canvas.height = canvas.offsetHeight;\r\n        drawDiagram();\r\n      }\r\n    };\r\n    // Initial call to set size\r\n    handleResize();\r\n\r\n    // Add a slight delay for the initial resize if layout might still be settling\r\n    // This can sometimes help if offsetWidth/Height are 0 on first mount.\r\n    const timeoutId = setTimeout(handleResize, 50);\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => {\r\n      clearTimeout(timeoutId);\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, [drawDiagram]); // drawDiagram dependency is correct\r\n\r\n  const openModal = (title, callback) => {\r\n    setModalData({ show: true, title, callback });\r\n  };\r\n\r\n  const handleAddBranch = () => {\r\n    openModal(\"Branch title\", (value) => {\r\n      if (!value.trim()) return;\r\n      setBranches((prev) => [\r\n        ...prev,\r\n        { id: Date.now(), title: value, labels: [], labelShift: 0 }, // Initialize labelShift\r\n      ]);\r\n    });\r\n  };\r\n\r\n  const handleAddLabel = (branchId) => {\r\n    openModal(\"Label\", (value) => {\r\n      if (!value.trim()) return;\r\n      setBranches((prev) =>\r\n        prev.map((b) =>\r\n          b.id === branchId\r\n            ? {\r\n                ...b,\r\n                labels: [...b.labels, { id: Date.now(), text: value }],\r\n                labelShift: 0, // Reset labelShift to 0\r\n              }\r\n            : b\r\n        )\r\n      );\r\n    });\r\n  };\r\n\r\n  const handleShiftLabels = (branchId) => {\r\n    const dy = (canvasRef.current.height * Math.SQRT1_2) / 16;\r\n    setBranches((prevBranches) =>\r\n      prevBranches.map((branch) =>\r\n        branch.id === branchId\r\n          ? { ...branch, labelShift: branch.labelShift + dy }\r\n          : branch\r\n      )\r\n    );\r\n  };\r\n\r\n  const removeBranch = (branchId) => {\r\n    setBranches((prev) => prev.filter((b) => b.id !== branchId));\r\n  };\r\n\r\n  const removeLabel = (branchId, labelId) => {\r\n    setBranches((prev) =>\r\n      prev.map((b) =>\r\n        b.id === branchId\r\n          ? { ...b, labels: b.labels.filter((l) => l.id !== labelId) }\r\n          : b\r\n      )\r\n    );\r\n  };\r\n\r\n  const increaseFont = () => setFontSize((f) => f + 0.1);\r\n  const decreaseFont = () => setFontSize((f) => Math.max(0.5, f - 0.1));\r\n\r\n  const titleFont = fontSize + 0.2;\r\n  const branchFont = fontSize + 0.1;\r\n\r\n  return (\r\n    <div ref={containerRef} className={styles.container}>\r\n      {modalData.show && (\r\n        <InputModal\r\n          title={modalData.title}\r\n          value=\"\"\r\n          onSubmit={modalData.callback}\r\n          onClose={() => setModalData({ show: false })}\r\n        />\r\n      )}\r\n      <div className={styles.controls}>\r\n        <button onClick={handleAddBranch}>Add Branch</button>\r\n        <button onClick={() => setSpacing((s) => s + 20)}>Space ↑</button>\r\n        <button onClick={() => setSpacing((s) => Math.max(40, s - 20))}>\r\n          Space ↓\r\n        </button>\r\n        <button onClick={increaseFont}>Font ↑</button>\r\n        <button onClick={decreaseFont}>Font ↓</button>\r\n      </div>\r\n      <div className={styles.canvasWrapper}>\r\n        <canvas ref={canvasRef} className={styles.canvas}></canvas>\r\n        {headCoords.w > 0 && (\r\n          <div\r\n            className={styles.headTitle}\r\n            style={{\r\n              fontSize: `${titleFont}em`,\r\n              left: headCoords.x,\r\n              width: headCoords.w,\r\n            }}\r\n          >\r\n            {title}\r\n          </div>\r\n        )}\r\n        {branches.map((br, idx) => {\r\n          const c = coords[br.id];\r\n          if (!c) {\r\n            return null;\r\n          }\r\n          const side = idx % 2 === 0 ? \"top\" : \"bottom\"; // Alternate sides for branches\r\n          const labels = br.labels || [];\r\n\r\n          const branchLength = canvasRef.current\r\n            ? canvasRef.current.offsetHeight * 0.45\r\n            : 100; // Default to avoid NaN\r\n\r\n          return (\r\n            <React.Fragment key={br.id}>\r\n              <div\r\n                className={\r\n                  idx % 2 === 0\r\n                    ? styles.branchTitleTop\r\n                    : styles.branchTitleBottom\r\n                }\r\n                style={{\r\n                  left: c.endX,\r\n                  top: c.endY,\r\n                  fontSize: `${branchFont}em`,\r\n                }}\r\n                onContextMenu={(e) => {\r\n                  e.preventDefault();\r\n                  removeBranch(br.id);\r\n                }}\r\n              >\r\n                {br.title}\r\n              </div>\r\n              {/* Container for + and ^ buttons */}\r\n              <div\r\n                className={\r\n                  idx % 2 === 0\r\n                    ? styles.branchButtonsUp\r\n                    : styles.branchButtonsDown\r\n                }\r\n                style={{\r\n                  position: \"absolute\",\r\n                  left: c.endX,\r\n                  top: c.endY,\r\n                  display: \"flex\", // Arrange buttons side-by-side\r\n                  gap: \"5px\", // Space between buttons\r\n                }}\r\n              >\r\n                <div\r\n                  className={styles.addLabel} // Assuming this class provides base styling\r\n                  style={{\r\n                    // left, top, transform are handled by parent div\r\n                    fontSize: `${branchFont}em`,\r\n                    cursor: \"pointer\", // Make it look clickable\r\n                  }}\r\n                  onClick={() => handleAddLabel(br.id)}\r\n                >\r\n                  +\r\n                </div>\r\n                <div\r\n                  className={styles.shiftLabel} // Create or use similar styling to addLabel\r\n                  style={{\r\n                    fontSize: `${branchFont}em`,\r\n                    cursor: \"pointer\",\r\n                  }}\r\n                  onClick={() => handleShiftLabels(br.id)}\r\n                >\r\n                  {side === \"bottom\" ? \"↓\" : \"↑\"}\r\n                </div>\r\n              </div>\r\n              {labels.map((lab, labelIdx) => {\r\n                const numLabels = labels.length;\r\n                // Ensure numLabels is not zero before division, though map shouldn't run for empty array.\r\n                const t_original =\r\n                  numLabels > 0 ? (labelIdx + 0.5) / numLabels : 0;\r\n\r\n                const pixelShift = br.labelShift || 0;\r\n                // Ensure positive result for modulo, then ensure it's within [0, branchLength)\r\n                const effectivePixelOffsetOnBranch =\r\n                  ((pixelShift % branchLength) + branchLength) % branchLength;\r\n                const t_offset_due_to_shift =\r\n                  branchLength > 0\r\n                    ? effectivePixelOffsetOnBranch / branchLength\r\n                    : 0;\r\n\r\n                let effective_t = t_original + t_offset_due_to_shift;\r\n                effective_t = effective_t - Math.floor(effective_t); // Ensure t is in [0, 1)\r\n\r\n                const lx_on_line = c.startX + (c.endX - c.startX) * effective_t;\r\n                const ly_on_line = c.startY + (c.endY - c.startY) * effective_t;\r\n\r\n                return (\r\n                  <div\r\n                    key={lab.id}\r\n                    className={\r\n                      side === \"top\" ? styles.labelUp : styles.labelDown\r\n                    }\r\n                    style={{\r\n                      left: lx_on_line,\r\n                      top: ly_on_line,\r\n                      fontSize: `${fontSize}em`,\r\n                    }}\r\n                    onContextMenu={(e) => {\r\n                      e.preventDefault();\r\n                      removeLabel(br.id, lab.id);\r\n                    }}\r\n                  >\r\n                    {lab.text}\r\n                    <div\r\n                      className={styles.labelLine}\r\n                      style={{\r\n                        left: -20,\r\n                        top: \"50%\",\r\n                        width: 20,\r\n                      }}\r\n                    />\r\n                  </div>\r\n                );\r\n              })}\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Fishbone;\r\n"],"names":["_ref","text","containerRef","useRef","canvasRef","coords","setCoords","useState","headCoords","setHeadCoords","x","w","branches","setBranches","split","slice","filter","bt","trim","map","branchTitle","index","id","Date","now","title","labels","labelShift","fontSize","setFontSize","spacing","setSpacing","modalData","setModalData","show","callback","drawDiagram","useCallback","window","setTimeout","canvas","current","ctx","getContext","clearRect","width","height","centerY","calculatedHeadWidth","Math","max","headX","lineWidth","strokeStyle","beginPath","moveTo","lineTo","stroke","branchSpacing","branchLength","dx","SQRT1_2","dy","newCoords","forEach","br","pairIndex","floor","startX","startY","endX","endY","midX","midY","useEffect","handleResize","offsetWidth","offsetHeight","timeoutId","addEventListener","clearTimeout","removeEventListener","openModal","titleFont","branchFont","_jsxs","ref","className","styles","children","_jsx","InputModal","value","onSubmit","onClose","onClick","handleAddBranch","prev","s","increaseFont","f","decreaseFont","style","concat","left","idx","c","side","React","top","onContextMenu","e","branchId","preventDefault","b","position","display","gap","cursor","handleAddLabel","prevBranches","branch","handleShiftLabels","lab","labelIdx","numLabels","length","t_original","pixelShift","effective_t","lx_on_line","ly_on_line","removeLabel","labelId","l"],"sourceRoot":""}