{"version":3,"file":"static/js/826.ee6ed35d.chunk.js","mappings":"mJAEA,SAASA,EAAmBC,GAE1B,MAAMC,EAAWD,EAAKE,MAAM,MACtBC,EAAW,GAWjB,OATAF,EAASG,SAAQ,CAACC,EAASC,KACrBA,EAAQ,IAAM,EAEhBH,EAASI,MAAKC,EAAAA,EAAAA,KAACC,EAAAA,WAAU,CAAsBC,KAAML,GAAQ,OAAAM,OAAvBL,KAEtCH,EAASI,MAAKC,EAAAA,EAAAA,KAAA,QAAAI,SAA4BP,GAAO,OAAAM,OAAjBL,IAClC,IAGKH,CACT,CAwBA,QAlBA,SAAsBU,GAAoC,IAAnC,KAAEb,EAAI,eAAEc,GAAiB,GAAOD,EAKrD,OAJIC,IACFd,EANwBA,IACnBA,EAAKe,QAAQ,OAAQ,MAKnBC,CAAmBhB,KAI1BQ,EAAAA,EAAAA,KAAA,OACES,MAAO,CACLC,WACElB,EAAKmB,SAAS,OAASL,EAAiB,WAAa,SACvDM,UAAWpB,EAAKmB,SAAS,MAAQ,QAAU,KAC3CP,SAEDb,EAAmBC,IAG1B,C,+ECqDA,QAxFA,SAAkBa,GAAY,IAAX,KAAEb,GAAMa,EACrBQ,EAAY,GAEZrB,IACFqB,EAAYrB,EAAKE,MAAM,MAAMoB,QAAQC,GAAMA,EAAEC,UAG/C,MAeOC,EAAOC,IAAYC,EAAAA,EAAAA,UACxBN,EAAUO,KAAKL,IACb,MAAM,SAAEM,EAAQ,OAAEC,GAXYC,KAChC,MACMC,EADQ,uBACMC,KAAKF,GACzB,MAAO,CACLF,SAAUG,EAAM,GAAGR,OACnBM,OAAQE,EAAM,GAAKA,EAAM,GAAGR,OAAS,KACtC,EAK8BU,CAAyBX,GAChDY,EAlBmBJ,KAC3B,MAAMK,EAAmBL,EAAMM,WAAW,KAE1C,MAAO,CAAED,mBAAkBE,QADDF,EAAmBL,EAAMQ,MAAM,GAAKR,EACP,EAe/BS,CAAoBX,GAC1C,MAAO,CACLA,WACAC,SACAM,iBAAkBD,EAAcC,iBAChCE,QAASH,EAAcG,QACvBG,MAAO,EACR,KAaL,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA/B,SAAA,EACEJ,EAAAA,EAAAA,KAAA,MAAIoC,UAAU,mBAAkBhC,SAAC,gBACjCJ,EAAAA,EAAAA,KAAA,OAAKoC,UAAU,qBAAoBhC,UACjCJ,EAAAA,EAAAA,KAAA,OAAKoC,UAAU,QAAOhC,SACnBa,EAAMG,KAAI,CAACiB,EAAMvC,KAChBE,EAAAA,EAAAA,KAAA,OAEEoC,UACE,aACgB,IAAfC,EAAKJ,MACF,OACe,IAAfI,EAAKJ,MACL,MACe,IAAfI,EAAKJ,MACL,OACA,IAENK,QAASA,IA3BAxC,KACnB,MAAMyC,EAAW,IAAItB,GACrBsB,EAASzC,GAAOmC,OAASM,EAASzC,GAAOmC,MAAQ,GAAK,EACxB,IAA1BM,EAASzC,GAAOmC,OAA0C,OAA3BM,EAASzC,GAAOwB,SACjDiB,EAASzC,GAAOmC,OAAS,GAE3Bf,EAASqB,EAAS,EAqBOC,CAAY1C,GAAOM,UAElCJ,EAAAA,EAAAA,KAAA,OACEoC,UAAS,SAAAjC,OACPkC,EAAKT,kBAAoBS,EAAKJ,MAAQ,EAAI,WAAa,IACtD7B,SAEa,IAAfiC,EAAKJ,MACJ,KAAOnC,EAAQ,GACE,IAAfuC,EAAKJ,OACPjC,EAAAA,EAAAA,KAACyC,EAAAA,EAAa,CAACjD,KAAM6C,EAAKP,QAASxB,gBAAgB,IAClC,IAAf+B,EAAKJ,OACPjC,EAAAA,EAAAA,KAACyC,EAAAA,EAAa,CAACjD,KAAM6C,EAAKf,OAAQhB,gBAAgB,IAElD,MAzBCR,WAkCnB,C","sources":["components/MathComponent.js","components/QuizBoard.js"],"sourcesContent":["import { InlineMath } from \"react-katex\";\r\n\r\nfunction parseAndRenderMath(text) {\r\n  // Split the text based on $$ delimiters\r\n  const segments = text.split(\"$$\");\r\n  const elements = [];\r\n\r\n  segments.forEach((segment, index) => {\r\n    if (index % 2 === 1) {\r\n      // Odd-indexed segments are LaTeX (since they are enclosed between $$ delimiters)\r\n      elements.push(<InlineMath key={`MCIM${index}`} math={segment} />);\r\n    } else {\r\n      elements.push(<span key={`MCSP${index}`}>{segment}</span>);\r\n    }\r\n  });\r\n\r\n  return elements;\r\n}\r\n\r\nconst renderWithNewLines = (text) => {\r\n  return text.replace(/\\\\n/g, \"\\n\");\r\n};\r\n\r\nfunction MathComponent({ text, renderNewLines = false }) {\r\n  if (renderNewLines) {\r\n    text = renderWithNewLines(text);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        whiteSpace:\r\n          text.includes(\"\\n\") && renderNewLines ? \"pre-wrap\" : \"normal\",\r\n        marginTop: text.includes(\"$$\") ? \"0.5em\" : \"0\",\r\n      }}\r\n    >\r\n      {parseAndRenderMath(text)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MathComponent;\r\n","import React, { useState } from \"react\";\nimport \"./QuizBoard.css\";\nimport MathComponent from \"./MathComponent.js\";\n\nfunction QuizBoard({ text }) {\n  let questions = [];\n\n  if (text) {\n    questions = text.split(\"\\n\").filter((q) => q.trim());\n  }\n\n  const processQuestionText = (qText) => {\n    const isAlignedTopLeft = qText.startsWith(\"*\");\n    const processedQuestion = isAlignedTopLeft ? qText.slice(1) : qText;\n    return { isAlignedTopLeft, content: processedQuestion };\n  };\n\n  const extractQuestionAndAnswer = (qText) => {\n    const regex = /^(.*?)(?:@([^)]+))?$/;\n    const match = regex.exec(qText);\n    return {\n      question: match[1].trim(),\n      answer: match[2] ? match[2].trim() : null,\n    };\n  };\n\n  const [state, setState] = useState(\n    questions.map((q) => {\n      const { question, answer } = extractQuestionAndAnswer(q);\n      const processedText = processQuestionText(question);\n      return {\n        question,\n        answer,\n        isAlignedTopLeft: processedText.isAlignedTopLeft,\n        content: processedText.content,\n        shown: 0,\n      };\n    })\n  );\n\n  const handleClick = (index) => {\n    const newState = [...state];\n    newState[index].shown = (newState[index].shown + 1) % 6;\n    if (newState[index].shown === 2 && newState[index].answer === null) {\n      newState[index].shown += 1;\n    }\n    setState(newState);\n  };\n\n  return (\n    <>\n      <h1 className=\"interactiveTitle\">Quiz Board</h1>\n      <div className=\"quizBoardContainer\">\n        <div className=\"board\">\n          {state.map((item, index) => (\n            <div\n              key={index}\n              className={\n                \"question \" +\n                (item.shown === 3\n                  ? \"blue\"\n                  : item.shown === 4\n                  ? \"red\"\n                  : item.shown === 5\n                  ? \"grey\"\n                  : \"\")\n              }\n              onClick={() => handleClick(index)}\n            >\n              <div\n                className={`qtext ${\n                  item.isAlignedTopLeft && item.shown > 0 ? \"top-left\" : \"\"\n                }`}\n              >\n                {item.shown === 0 ? (\n                  \"Q\" + (index + 1)\n                ) : item.shown === 1 ? (\n                  <MathComponent text={item.content} renderNewLines={true} />\n                ) : item.shown === 2 ? (\n                  <MathComponent text={item.answer} renderNewLines={true} />\n                ) : (\n                  \"\"\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default QuizBoard;\n"],"names":["parseAndRenderMath","text","segments","split","elements","forEach","segment","index","push","_jsx","InlineMath","math","concat","children","_ref","renderNewLines","replace","renderWithNewLines","style","whiteSpace","includes","marginTop","questions","filter","q","trim","state","setState","useState","map","question","answer","qText","match","exec","extractQuestionAndAnswer","processedText","isAlignedTopLeft","startsWith","content","slice","processQuestionText","shown","_jsxs","_Fragment","className","item","onClick","newState","handleClick","MathComponent"],"sourceRoot":""}