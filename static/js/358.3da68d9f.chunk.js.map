{"version":3,"file":"static/js/358.3da68d9f.chunk.js","mappings":"0MAqHA,QA9GA,SAAoBA,GAAY,IAAX,KAAEC,GAAMD,EAC3B,MAAOE,EAAeC,IAAoBC,EAAAA,EAAAA,UAAS,KAC5CC,EAAiBC,IAAsBF,EAAAA,EAAAA,WAAS,IAChDG,EAAUC,IAAeJ,EAAAA,EAAAA,UAAS,IAClCK,EAAKC,IAAUN,EAAAA,EAAAA,UAAS,IACzBO,GAASC,EAAAA,EAAAA,QAAO,OAChB,UAAEC,EAAS,aAAEC,IAAiBC,EAAAA,EAAAA,MAQpCC,EAAAA,EAAAA,YAAU,KAIR,MAAMC,EAAahB,EAAKiB,WAAW,YAAcjB,EAAKkB,MAAM,MAAM,GAAK,KACjEC,EAAgBH,EAClBI,OAAOC,YACLL,EACGM,MAAM,GACNJ,MAAM,KACNK,KAAKC,GAAQA,EAAIN,MAAM,QAE5B,CAAC,EAEDC,EAAcM,UAChBlB,EAAYY,EAAcM,UAI5B,MAAMC,EAAQ1B,EAAKkB,MAAM,MACzBT,EAAOiB,EAAMA,EAAMC,OAAS,GAAG,GAC9B,CAAC3B,KAEJe,EAAAA,EAAAA,YAAU,KACR,MAAMa,EAAQC,YAAW,KACvBxB,GAAmB,EAAM,GACxB,KACH,MAAO,IAAMyB,aAAaF,EAAM,GAC/B,IAEH,MAAMG,EAAmBC,IACvBnB,EAAamB,EAAK,EAGpB,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACrCF,EAAAA,EAAAA,MAAA,OACEG,MAAO,CACLC,SAAU,WACVC,QAAS,gBACTH,SAAA,GAEC3B,EAAI+B,SAASC,EAAAA,KAAiB5B,KAC/B6B,EAAAA,EAAAA,KAAA,OACEC,IAAKhC,EACLiC,IAAKnC,IAAQA,EAAI+B,SAASC,EAAAA,IAAgBhC,EAAMI,EAChDsB,UAAU,qBACVU,IAAI,WAIPpC,EAAI+B,SAASC,EAAAA,MAAkB5B,IAC9BqB,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CAAK,+CAEHM,EAAAA,EAAAA,KAAA,SAAO,KACPA,EAAAA,EAAAA,KAAA,SACEI,KAAK,OACLX,UAAU,aACVY,OAAO,UACPC,SAAWC,IACTC,EAAAA,EAAAA,GAAsBD,EAAME,OAAOC,MAAM,GAAIpB,QAMpD,IAAIqB,MAAM9C,GAAY,IAAIiB,KAAI,CAAC8B,EAAGC,KACjCb,EAAAA,EAAAA,KAAA,OAEEP,UAAS,aAAAqB,OACPtD,EAAcsC,SAASe,GAAS,mBAAqB,aAEvDlB,MAAO,CACLoB,MAAM,GAADD,OAAK,IAAMjD,EAAW,GAAG,KAC9BmD,OAAO,GAADF,OAAK,IAAMjD,EAAW,GAAG,KAC/BoD,IAAI,GAADH,OAAKI,KAAKC,MAAMN,EAAQhD,IAAa,IAAMA,GAAS,KACvDuD,KAAK,GAADN,OAAMD,EAAQhD,GAAa,IAAMA,GAAS,MAEhDwD,QACE7D,EAAcsC,SAASe,GAAS,KAAO,IArFhCA,KACZrD,EAAcsC,SAASe,IAC1BpD,GAAkB6D,GAAS,IAAIA,EAAMT,IACvC,EAkFuDU,CAAUV,GACxDnB,SAEAmB,EAAQ,GAdJA,QAkBVlD,IACC6B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2BAA0BC,SAAA,EACvCM,EAAAA,EAAAA,KAAA,MAAAN,SAAI,kBACJM,EAAAA,EAAAA,KAAA,KAAAN,SAAG,+BAKb,C","sources":["components/ImageReveal.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./ImageReveal.css\";\n\nimport { handleImageFileChange } from \"../ImageUploads\";\nimport { useEditContext } from \"../EditContext\";\nimport { LOCAL_MARKER } from \"./TextInput\";\n\nfunction ImageReveal({ text }) {\n  const [revealedBoxes, setRevealedBoxes] = useState([]);\n  const [showInstruction, setShowInstruction] = useState(true);\n  const [gridSize, setGridSize] = useState(5);\n  const [url, setUrl] = useState(\"\");\n  const imgRef = useRef(null);\n  const { imageData, setImageData } = useEditContext();\n\n  const toggleBox = (index) => {\n    if (!revealedBoxes.includes(index)) {\n      setRevealedBoxes((prev) => [...prev, index]);\n    }\n  };\n\n  useEffect(() => {\n    // check if first line starts with OPTIONS:\n    // if so parse the gridsize name=val option if present\n    // and set the number of boxes to the gridsize\n    const optionsSet = text.startsWith(\"OPTIONS:\") ? text.split(\"\\n\")[0] : null;\n    const parsedOptions = optionsSet\n      ? Object.fromEntries(\n          optionsSet\n            .slice(8)\n            .split(\",\")\n            .map((opt) => opt.split(\"=\"))\n        )\n      : {};\n\n    if (parsedOptions.gridsize) {\n      setGridSize(parsedOptions.gridsize);\n    }\n\n    // extract the last line as the url\n    const lines = text.split(\"\\n\");\n    setUrl(lines[lines.length - 1]);\n  }, [text]);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setShowInstruction(false);\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const updateImageData = (data) => {\n    setImageData(data);\n  };\n\n  return (\n    <div className=\"image-reveal-container\">\n      <div\n        style={{\n          position: \"relative\",\n          display: \"inline-block\",\n        }}\n      >\n        {(!url.includes(LOCAL_MARKER) || imageData) && (\n          <img\n            ref={imgRef}\n            src={url && !url.includes(LOCAL_MARKER) ? url : imageData}\n            className=\"image-reveal-image\"\n            alt=\"Reveal\"\n          />\n        )}\n\n        {url.includes(LOCAL_MARKER) && !imageData && (\n          <div>\n            The local image will need to be provided...\n            <br />{\" \"}\n            <input\n              type=\"file\"\n              className=\"fileUpload\"\n              accept=\"image/*\"\n              onChange={(event) =>\n                handleImageFileChange(event.target.files[0], updateImageData)\n              }\n            />\n          </div>\n        )}\n\n        {[...Array(gridSize ** 2)].map((_, index) => (\n          <div\n            key={index}\n            className={`image-box ${\n              revealedBoxes.includes(index) ? \"image-box-reveal\" : \"image-box\"\n            }`}\n            style={{\n              width: `${100 / gridSize + 0.1}%`,\n              height: `${100 / gridSize + 0.1}%`,\n              top: `${Math.floor(index / gridSize) * (100 / gridSize)}%`,\n              left: `${(index % gridSize) * (100 / gridSize)}%`,\n            }}\n            onClick={\n              revealedBoxes.includes(index) ? null : () => toggleBox(index)\n            }\n          >\n            {index + 1}\n          </div>\n        ))}\n      </div>\n      {showInstruction && (\n        <div className=\"image-reveal-instruction\">\n          <h1>Image Reveal</h1>\n          <p>click boxes to reveal</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ImageReveal;\n"],"names":["_ref","text","revealedBoxes","setRevealedBoxes","useState","showInstruction","setShowInstruction","gridSize","setGridSize","url","setUrl","imgRef","useRef","imageData","setImageData","useEditContext","useEffect","optionsSet","startsWith","split","parsedOptions","Object","fromEntries","slice","map","opt","gridsize","lines","length","timer","setTimeout","clearTimeout","updateImageData","data","_jsxs","className","children","style","position","display","includes","LOCAL_MARKER","_jsx","ref","src","alt","type","accept","onChange","event","handleImageFileChange","target","files","Array","_","index","concat","width","height","top","Math","floor","left","onClick","prev","toggleBox"],"sourceRoot":""}