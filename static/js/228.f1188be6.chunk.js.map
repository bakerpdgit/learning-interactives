{"version":3,"file":"static/js/228.f1188be6.chunk.js","mappings":"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","sources":["webpack://my-react-app/./src/components/WordMatch.module.css?c4a6","components/WordMatch.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wordMatchContainer\":\"WordMatch_wordMatchContainer__tw+Nz\",\"inputRow\":\"WordMatch_inputRow__fd3A-\",\"inputBox\":\"WordMatch_inputBox__HdtAq\",\"wordBox\":\"WordMatch_wordBox__QrQbp\",\"wordsContainer\":\"WordMatch_wordsContainer__pEMaR\",\"wordRow\":\"WordMatch_wordRow__gr50W\",\"correctChar\":\"WordMatch_correctChar__+OnUc\",\"inWordChar\":\"WordMatch_inWordChar__SR1Zh\",\"wrongChar\":\"WordMatch_wrongChar__JwavM\",\"correctBox\":\"WordMatch_correctBox__-3vgO\",\"unusedBox\":\"WordMatch_unusedBox__QO67Y\",\"score\":\"WordMatch_score__ZPz+G\",\"celebration\":\"WordMatch_celebration__7EMPC\",\"slideOut\":\"WordMatch_slideOut__qidJd\"};","import React, { useState, useEffect } from \"react\";\r\nimport styles from \"./WordMatch.module.css\";\r\n\r\nconst WordMatch = ({ text }) => {\r\n  const [input, setInput] = useState(\"\");\r\n  const [solvedWords, setSolvedWords] = useState([]);\r\n  const [topic, setTopic] = useState(\"\");\r\n  const [words, setWords] = useState([]);\r\n  const [longestWordLength, setLongestWordLength] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (text.includes(\"\\n\\n\")) {\r\n      const [newTopic, wordList] = text.split(\"\\n\\n\", 2);\r\n      setTopic(newTopic);\r\n      const wrds = wordList.split(\"\\n\");\r\n      setWords(wrds);\r\n      setLongestWordLength(Math.max(...wrds.map((word) => word.length)));\r\n    } else {\r\n      const wrds = text.split(\"\\n\");\r\n      setWords(wrds);\r\n      setLongestWordLength(Math.max(...wrds.map((word) => word.length)));\r\n    }\r\n  }, [text]);\r\n\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      if (e.key === \"Backspace\") {\r\n        setInput((prev) => prev.slice(0, -1));\r\n      } else if (/^[a-zA-Z]$/.test(e.key)) {\r\n        setInput((prev) =>\r\n          (prev + e.key.toLowerCase()).slice(0, longestWordLength)\r\n        );\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"keydown\", handleKeyDown);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", handleKeyDown);\r\n    };\r\n  }, [longestWordLength]);\r\n\r\n  useEffect(() => {\r\n    const checkWords = (currentInput) => {\r\n      const newSolvedWords = words.filter(\r\n        (word) => word === currentInput && !solvedWords.includes(word)\r\n      );\r\n      if (newSolvedWords.length > 0) {\r\n        setSolvedWords([...solvedWords, ...newSolvedWords]);\r\n        setScore((prevScore) => prevScore + 1); // Increase score\r\n        setInput(\"\");\r\n      }\r\n    };\r\n\r\n    checkWords(input);\r\n  }, [input, solvedWords, words]);\r\n\r\n  const renderInputBoxes = () => {\r\n    return Array.from({ length: longestWordLength }, (_, i) => (\r\n      <div key={i} className={styles.inputBox}>\r\n        {input[i] || \"\"}\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  const renderWordTiles = () => {\r\n    return words.map((word, wordIndex) => (\r\n      <div key={wordIndex} className={styles.wordRow}>\r\n        {Array.from({ length: longestWordLength }, (_, charIndex) => {\r\n          const char = input[charIndex] || \"\";\r\n          const isCorrect =\r\n            char !== \"\" &&\r\n            word[charIndex] &&\r\n            char.toUpperCase() === word[charIndex].toUpperCase();\r\n          const isInWord = char !== \"\" && word.includes(char);\r\n\r\n          // Determine the color of the box\r\n          const boxColor =\r\n            charIndex >= word.length // Extra boxes beyond the word's length\r\n              ? styles.unusedBox\r\n              : solvedWords.includes(word)\r\n              ? styles.correctBox // Entire word is solved\r\n              : isCorrect\r\n              ? styles.correctChar\r\n              : isInWord\r\n              ? styles.inWordChar\r\n              : char !== \"\"\r\n              ? styles.wrongChar\r\n              : \"\";\r\n\r\n          return (\r\n            <div key={charIndex} className={`${styles.wordBox} ${boxColor}`}>\r\n              {solvedWords.includes(word)\r\n                ? word[charIndex] || \"\"\r\n                : charIndex < word.length\r\n                ? char\r\n                : \"\"}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <div className={styles.wordMatchContainer}>\r\n      <h1>{topic}</h1>\r\n      <div className={styles.score}>Score: {score}</div>\r\n      <div className={styles.inputRow}>{renderInputBoxes()}</div>\r\n      <div className={styles.wordsContainer}>{renderWordTiles()}</div>\r\n      {solvedWords.length === words.length && (\r\n        <div className={styles.celebration}>ðŸŽ‰</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WordMatch;\r\n"],"names":["_ref","text","input","setInput","useState","solvedWords","setSolvedWords","topic","setTopic","words","setWords","longestWordLength","setLongestWordLength","score","setScore","useEffect","includes","newTopic","wordList","split","wrds","Math","max","map","word","length","handleKeyDown","e","key","prev","slice","test","toLowerCase","window","addEventListener","removeEventListener","currentInput","newSolvedWords","filter","prevScore","checkWords","_jsxs","className","styles","children","_jsx","Array","from","_","i","wordIndex","charIndex","char","isCorrect","toUpperCase","isInWord","boxColor","concat"],"sourceRoot":""}