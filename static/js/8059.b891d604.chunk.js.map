{"version":3,"file":"static/js/8059.b891d604.chunk.js","mappings":"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","sources":["webpack://class-interactives/./src/components/WordFind.module.css?88b4","components/WordFind.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"GameAreaGrid\":\"WordFind_GameAreaGrid__QkxoS\",\"score\":\"WordFind_score__+-k8t\",\"wordFindButton\":\"WordFind_wordFindButton__Dr5KK\",\"wordTile\":\"WordFind_wordTile__CYgQI\",\"correct\":\"WordFind_correct__Q+bCz\",\"wrongGuess\":\"WordFind_wrongGuess__wNLHR\",\"celebration\":\"WordFind_celebration__vAu4G\",\"slideOut\":\"WordFind_slideOut__EmIeH\"};","import React, { useState, useEffect } from \"react\";\r\nimport styles from \"./WordFind.module.css\"; // Ensure you have corresponding CSS\r\nimport InputModal from \"./InputModal\";\r\n\r\nconst WordTile = ({ word, onRevealNextLetter, onGuess }) => {\r\n  const [revealedLetters, setRevealedLetters] = useState(1);\r\n  const [isCorrect, setIsCorrect] = useState(false);\r\n\r\n  const handleRevealNextLetter = () => {\r\n    if (revealedLetters < word.length) {\r\n      onRevealNextLetter(1, revealedLetters + 1 === word.length);\r\n      setRevealedLetters((prev) => prev + 1);\r\n    }\r\n  };\r\n\r\n  const markCorrect = () => {\r\n    setIsCorrect(true); // Mark this tile as correct\r\n    setRevealedLetters(word.length); // Reveal the full word\r\n  };\r\n\r\n  const handleGuess = () => {\r\n    onGuess(markCorrect); // Trigger the modal and pass the markCorrect function\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`${styles.wordTile} ${\r\n        isCorrect || revealedLetters === word.length ? styles.correct : \"\"\r\n      }`}\r\n    >\r\n      {word.slice(0, revealedLetters) +\r\n        \"_\".repeat(word.length - revealedLetters)}\r\n      {!isCorrect && revealedLetters < word.length && (\r\n        <div className={styles.icons}>\r\n          <button\r\n            className={styles.wordFindButton}\r\n            onClick={handleRevealNextLetter}\r\n          >\r\n            üîç\r\n          </button>\r\n          <button className={styles.wordFindButton} onClick={handleGuess}>\r\n            ‚úèÔ∏è\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst WordFind = ({ text }) => {\r\n  const [wordsEnded, setWordsEnded] = useState(0); // Count of correctly guessed words\r\n  const [topic, setTopic] = useState(\"\");\r\n  const [wordList, setWordList] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n  const [inputMessage, setInputMessage] = useState({});\r\n\r\n  const handleTileGuess = (word, wordIndex, markTileCorrect) => {\r\n    setInputMessage({\r\n      prompt: \"Enter the full word:\",\r\n      value: \"\",\r\n      word: word,\r\n      wordIndex: wordIndex,\r\n      markTileCorrect: markTileCorrect, // Pass the function to mark the tile correct\r\n    });\r\n  };\r\n\r\n  const handleInputSubmit = (guess) => {\r\n    if (guess && guess.toLowerCase() === inputMessage.word.toLowerCase()) {\r\n      inputMessage.markTileCorrect(); // Call the function to mark the tile as correct\r\n      handleCorrectGuess(); // Increment the correct guesses count in WordFind\r\n    }\r\n    setInputMessage({}); // Clear the inputMessage to close the modal\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (text.includes(\"\\n\\n\")) {\r\n      const [newTopic, words] = text.split(\"\\n\\n\", 2);\r\n      setTopic(newTopic);\r\n      setWordList(words.split(\"\\n\"));\r\n    } else {\r\n      setWordList(text.split(\"\\n\"));\r\n    }\r\n  }, [text]);\r\n\r\n  useEffect(() => {\r\n    if (wordList.length > 0) {\r\n      setScore(wordList.reduce((acc, word) => acc + word.length - 1, 0));\r\n    }\r\n  }, [wordList]);\r\n\r\n  const handleRevealNextLetter = (decrement, isFinished) => {\r\n    setScore((prevScore) => prevScore - decrement);\r\n    if (isFinished) {\r\n      setWordsEnded((prev) => prev + 1);\r\n    }\r\n  };\r\n\r\n  const handleCorrectGuess = () => {\r\n    setWordsEnded((prev) => prev + 1);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {inputMessage.prompt && (\r\n        <InputModal\r\n          title={inputMessage.prompt}\r\n          placeholder=\"Type your guess here...\"\r\n          value={inputMessage.value}\r\n          onSubmit={handleInputSubmit}\r\n          onClose={() => setInputMessage({})}\r\n        />\r\n      )}\r\n\r\n      <h1>{topic}</h1>\r\n      <div className={styles.score}>\r\n        {wordsEnded !== wordList.length && <>Possible</>} Score: {score}\r\n      </div>\r\n      <div className={styles.GameAreaGrid}>\r\n        {wordsEnded === wordList.length && (\r\n          <div className={styles.celebration}>üéÇ</div>\r\n        )}\r\n\r\n        {wordList.map((word, index) => (\r\n          <WordTile\r\n            key={index}\r\n            word={word}\r\n            wordIndex={index}\r\n            onRevealNextLetter={handleRevealNextLetter}\r\n            onGuess={(markTileCorrect) =>\r\n              handleTileGuess(word, index, markTileCorrect)\r\n            } // Pass markTileCorrect to handleTileGuess\r\n          />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WordFind;\r\n"],"names":["WordTile","_ref","word","onRevealNextLetter","onGuess","revealedLetters","setRevealedLetters","useState","isCorrect","setIsCorrect","markCorrect","length","_jsxs","className","concat","styles","wordTile","correct","children","slice","repeat","icons","_jsx","wordFindButton","onClick","handleRevealNextLetter","prev","handleGuess","_ref2","text","wordsEnded","setWordsEnded","topic","setTopic","wordList","setWordList","score","setScore","inputMessage","setInputMessage","useEffect","includes","newTopic","words","split","reduce","acc","decrement","isFinished","prevScore","handleCorrectGuess","_Fragment","prompt","InputModal","title","placeholder","value","onSubmit","guess","toLowerCase","markTileCorrect","onClose","GameAreaGrid","celebration","map","index","wordIndex","handleTileGuess"],"sourceRoot":""}