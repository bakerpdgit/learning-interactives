{"version":3,"file":"static/js/59.6cbbfb68.chunk.js","mappings":"sJACA,SAAgB,aAAe,+BAA+B,MAAQ,wBAAwB,eAAiB,iCAAiC,SAAW,2BAA2B,QAAU,0BAA0B,WAAa,6BAA6B,YAAc,8BAA8B,SAAW,4B,aCE3T,MAAMA,EAAWC,IAAmD,IAAlD,KAAEC,EAAI,mBAAEC,EAAkB,eAAEC,GAAgBH,EAC5D,MAAOI,EAAiBC,IAAsBC,EAAAA,EAAAA,UAAS,IAChDC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,GAkB3C,OACEG,EAAAA,EAAAA,MAAA,OACEC,UAAS,GAAAC,OAAKC,EAAOC,SAAQ,KAAAF,OAC3BJ,GAAaH,IAAoBH,EAAKa,OAASF,EAAOG,QAAU,IAC/DC,SAAA,CAEFf,EAAKgB,MAAM,EAAGb,GACb,IAAIc,OAAOjB,EAAKa,OAASV,IACzBG,GAAaH,EAAkBH,EAAKa,SACpCL,EAAAA,EAAAA,MAAA,OAAKC,UAAWE,EAAOO,MAAMH,SAAA,EAC3BI,EAAAA,EAAAA,KAAA,UACEV,UAAWE,EAAOS,eAClBC,QA5BqBC,KACzBnB,EAAkBH,EAAKa,SACzBZ,EAAmB,EAAGE,EAAkB,IAAMH,EAAKa,QACnDT,GAAoBmB,GAASA,EAAO,IACtC,EAwBwCR,SACjC,kBAGDI,EAAAA,EAAAA,KAAA,UAAQV,UAAWE,EAAOS,eAAgBC,QAzB9BG,KAClB,MAAMC,EAAQC,OAAOC,OAAO,yBACxBF,GAASA,EAAMG,gBAAkB5B,EAAK4B,gBACxCrB,GAAa,GACbH,EAAmBJ,EAAKa,QACxBX,IACF,EAmBqEa,SAAC,sBAKhE,EA8DV,EA1DiBc,IAAe,IAAd,KAAEC,GAAMD,EACxB,MAAOE,EAAYC,IAAiB3B,EAAAA,EAAAA,UAAS,IACtC4B,EAAOC,IAAY7B,EAAAA,EAAAA,UAAS,KAC5B8B,EAAUC,IAAe/B,EAAAA,EAAAA,UAAS,KAClCgC,EAAOC,IAAYjC,EAAAA,EAAAA,UAAS,IAEnCkC,EAAAA,EAAAA,YAAU,KACR,GAAIT,EAAKU,SAAS,QAAS,CACzB,MAAOC,EAAUC,GAASZ,EAAKa,MAAM,OAAQ,GAC7CT,EAASO,GACTL,EAAYM,EAAMC,MAAM,MAC1B,MACEP,EAAYN,EAAKa,MAAM,MACzB,GACC,CAACb,KAEJS,EAAAA,EAAAA,YAAU,KACJJ,EAAStB,OAAS,GACpByB,EAASH,EAASS,QAAO,CAACC,EAAK7C,IAAS6C,EAAM7C,EAAKa,OAAS,GAAG,GACjE,GACC,CAACsB,IAEJ,MAAMb,EAAyBA,CAACwB,EAAWC,KACzCT,GAAUU,GAAcA,EAAYF,IAChCC,GACFf,GAAeT,GAASA,EAAO,GACjC,EAGI0B,EAAqBA,KACzBjB,GAAeT,GAASA,EAAO,GAAE,EAGnC,OACEf,EAAAA,EAAAA,MAAA0C,EAAAA,SAAA,CAAAnC,SAAA,EACEI,EAAAA,EAAAA,KAAA,MAAAJ,SAAKkB,KACLzB,EAAAA,EAAAA,MAAA,OAAKC,UAAWE,EAAO0B,MAAMtB,SAAA,CAC1BgB,IAAeI,EAAStB,SAAUM,EAAAA,EAAAA,KAAA+B,EAAAA,SAAA,CAAAnC,SAAE,aAAY,WAASsB,MAE5D7B,EAAAA,EAAAA,MAAA,OAAKC,UAAWE,EAAOwC,aAAapC,SAAA,CACjCgB,IAAeI,EAAStB,SACvBM,EAAAA,EAAAA,KAAA,OAAKV,UAAWE,EAAOyC,YAAYrC,SAAC,iBAGrCoB,EAASkB,KAAI,CAACrD,EAAMsD,KACnBnC,EAAAA,EAAAA,KAACrB,EAAQ,CAEPE,KAAMA,EACNuD,UAAWD,EACXrD,mBAAoBqB,EACpBpB,eAAgB+C,GAJXK,UAQV,C","sources":["webpack://my-react-app/./src/components/WordFind.module.css?88b4","components/WordFind.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"GameAreaGrid\":\"WordFind_GameAreaGrid__QkxoS\",\"score\":\"WordFind_score__+-k8t\",\"wordFindButton\":\"WordFind_wordFindButton__Dr5KK\",\"wordTile\":\"WordFind_wordTile__CYgQI\",\"correct\":\"WordFind_correct__Q+bCz\",\"wrongGuess\":\"WordFind_wrongGuess__wNLHR\",\"celebration\":\"WordFind_celebration__vAu4G\",\"slideOut\":\"WordFind_slideOut__EmIeH\"};","import React, { useState, useEffect } from \"react\";\r\nimport styles from \"./WordFind.module.css\"; // Ensure you have corresponding CSS\r\n\r\nconst WordTile = ({ word, onRevealNextLetter, onCorrectGuess }) => {\r\n  const [revealedLetters, setRevealedLetters] = useState(1);\r\n  const [isCorrect, setIsCorrect] = useState(false); // Track if the guess was correct\r\n\r\n  const handleRevealNextLetter = () => {\r\n    if (revealedLetters < word.length) {\r\n      onRevealNextLetter(1, revealedLetters + 1 === word.length);\r\n      setRevealedLetters((prev) => prev + 1);\r\n    }\r\n  };\r\n\r\n  const handleGuess = () => {\r\n    const guess = window.prompt(\"Enter the full word: \");\r\n    if (guess && guess.toLowerCase() === word.toLowerCase()) {\r\n      setIsCorrect(true);\r\n      setRevealedLetters(word.length);\r\n      onCorrectGuess();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`${styles.wordTile} ${\r\n        isCorrect || revealedLetters === word.length ? styles.correct : \"\"\r\n      }`}\r\n    >\r\n      {word.slice(0, revealedLetters) +\r\n        \"_\".repeat(word.length - revealedLetters)}\r\n      {!isCorrect && revealedLetters < word.length && (\r\n        <div className={styles.icons}>\r\n          <button\r\n            className={styles.wordFindButton}\r\n            onClick={handleRevealNextLetter}\r\n          >\r\n            üîç\r\n          </button>\r\n          <button className={styles.wordFindButton} onClick={handleGuess}>\r\n            ‚úèÔ∏è\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst WordFind = ({ text }) => {\r\n  const [wordsEnded, setWordsEnded] = useState(0); // Count of correctly guessed words\r\n  const [topic, setTopic] = useState(\"\");\r\n  const [wordList, setWordList] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (text.includes(\"\\n\\n\")) {\r\n      const [newTopic, words] = text.split(\"\\n\\n\", 2);\r\n      setTopic(newTopic);\r\n      setWordList(words.split(\"\\n\"));\r\n    } else {\r\n      setWordList(text.split(\"\\n\"));\r\n    }\r\n  }, [text]);\r\n\r\n  useEffect(() => {\r\n    if (wordList.length > 0) {\r\n      setScore(wordList.reduce((acc, word) => acc + word.length - 1, 0));\r\n    }\r\n  }, [wordList]);\r\n\r\n  const handleRevealNextLetter = (decrement, isFinished) => {\r\n    setScore((prevScore) => prevScore - decrement);\r\n    if (isFinished) {\r\n      setWordsEnded((prev) => prev + 1);\r\n    }\r\n  };\r\n\r\n  const handleCorrectGuess = () => {\r\n    setWordsEnded((prev) => prev + 1);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>{topic}</h1>\r\n      <div className={styles.score}>\r\n        {wordsEnded !== wordList.length && <>Possible</>} Score: {score}\r\n      </div>\r\n      <div className={styles.GameAreaGrid}>\r\n        {wordsEnded === wordList.length && (\r\n          <div className={styles.celebration}>üéÇ</div>\r\n        )}\r\n\r\n        {wordList.map((word, index) => (\r\n          <WordTile\r\n            key={index}\r\n            word={word}\r\n            wordIndex={index}\r\n            onRevealNextLetter={handleRevealNextLetter}\r\n            onCorrectGuess={handleCorrectGuess}\r\n          />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WordFind;\r\n"],"names":["WordTile","_ref","word","onRevealNextLetter","onCorrectGuess","revealedLetters","setRevealedLetters","useState","isCorrect","setIsCorrect","_jsxs","className","concat","styles","wordTile","length","correct","children","slice","repeat","icons","_jsx","wordFindButton","onClick","handleRevealNextLetter","prev","handleGuess","guess","window","prompt","toLowerCase","_ref2","text","wordsEnded","setWordsEnded","topic","setTopic","wordList","setWordList","score","setScore","useEffect","includes","newTopic","words","split","reduce","acc","decrement","isFinished","prevScore","handleCorrectGuess","_Fragment","GameAreaGrid","celebration","map","index","wordIndex"],"sourceRoot":""}