{"version":3,"file":"static/js/553.14e0e7eb.chunk.js","mappings":"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","sources":["components/OrderedLine.js"],"sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport \"./OrderedLine.css\";\n\nfunction OrderedLineCanvas({ text }) {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    let setup = () => {\n      window.addEventListener(\"resize\", () => setup());\n      const items = text.split(\"\\n\").filter((item) => item);\n      const labels = items[0].split(\"-\");\n      items.shift();\n      // sort items randomly\n      items.sort(() => Math.random() - 0.5);\n\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext(\"2d\");\n      const textBoxHeight = 60;\n      const padding = 10;\n      const markerSize = 10;\n\n      const dpr = window.devicePixelRatio || 1;\n      canvas.width = canvas.offsetWidth * dpr;\n      canvas.height = canvas.offsetHeight * dpr;\n      const lineY = (canvas.height * 0.85) / dpr;\n      ctx.scale(dpr, dpr);\n\n      let boxCoordinates = items.map(\n        (_, i) => ((i + 1) * canvas.width) / (items.length + 1) / dpr\n      );\n\n      let isDragging = false;\n      let draggedBoxIndex = null;\n\n      // Function to check if a point is inside a rectangle\n      function isPointInRect(x, y, rect) {\n        return (\n          x >= rect.x &&\n          x <= rect.x + rect.width &&\n          y >= rect.y &&\n          y <= rect.y + rect.height\n        );\n      }\n\n      function draw() {\n        // Clear the canvas\n        ctx.clearRect(0, 0, canvas.width / dpr, canvas.height / dpr);\n\n        // Draw ordered line\n        ctx.strokeStyle = \"#000\";\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.moveTo(10, lineY);\n        ctx.lineTo(canvas.width / dpr - 10, lineY);\n        ctx.stroke();\n\n        // Draw line labels\n        ctx.font = \"16px Arial\";\n        ctx.textAlign = \"left\";\n        ctx.fillText(labels[0], 10, lineY + 20);\n        ctx.textAlign = \"right\";\n        ctx.fillText(labels[1], canvas.width / dpr - 10, lineY + 20);\n\n        // Draw textboxes and vertical lines\n        const boxVerticalSpacing =\n          (lineY - textBoxHeight - markerSize) / (items.length + 1);\n        for (let i = 0; i < items.length; i++) {\n          ctx.font = \"16px Arial\";\n          const textWidth = ctx.measureText(items[i]).width;\n          const boxWidth = textWidth + 2 * padding;\n\n          const x = boxCoordinates[i];\n          const y = (i + 1) * boxVerticalSpacing;\n\n          // Draw the draggable box\n          ctx.fillStyle = \"#f0f0f0\";\n          ctx.fillRect(\n            x - boxWidth / 2,\n            y - textBoxHeight / 2,\n            boxWidth,\n            textBoxHeight\n          );\n          ctx.strokeRect(\n            x - boxWidth / 2,\n            y - textBoxHeight / 2,\n            boxWidth,\n            textBoxHeight\n          );\n          ctx.textAlign = \"center\";\n          ctx.textBaseline = \"middle\";\n          ctx.fillStyle = \"#000\";\n          ctx.fillText(items[i], x, y);\n\n          // Draw the vertical line\n          ctx.beginPath();\n          ctx.moveTo(x, y + textBoxHeight / 2);\n          ctx.lineTo(x, lineY - markerSize);\n          ctx.stroke();\n\n          // Draw the marker at the end of the vertical line\n          ctx.fillStyle = \"#000\";\n          ctx.fillRect(\n            x - markerSize / 2,\n            lineY - markerSize,\n            markerSize,\n            markerSize\n          );\n\n          // Draw the marker at the end of the vertical line\n          ctx.fillStyle = \"#000\";\n          ctx.fillRect(\n            x - markerSize / 2,\n            lineY - markerSize,\n            markerSize,\n            markerSize\n          );\n        }\n      }\n\n      function handleMouseDown(e) {\n        const mouseX = e.clientX - canvas.getBoundingClientRect().left;\n        const mouseY = e.clientY - canvas.getBoundingClientRect().top;\n\n        const boxVerticalSpacing =\n          (lineY - textBoxHeight - markerSize) / (items.length + 1);\n        for (let i = 0; i < items.length; i++) {\n          ctx.font = \"16px Arial\";\n          const textWidth = ctx.measureText(items[i]).width;\n          const boxWidth = textWidth + 2 * padding;\n\n          const x = boxCoordinates[i];\n          const y = (i + 1) * boxVerticalSpacing;\n          const rect = {\n            x: x - boxWidth / 2,\n            y: y - textBoxHeight / 2,\n            width: boxWidth,\n            height: textBoxHeight,\n          };\n\n          if (isPointInRect(mouseX, mouseY, rect)) {\n            isDragging = true;\n            draggedBoxIndex = i;\n            break;\n          }\n        }\n      }\n\n      function handleMouseMove(e) {\n        if (!isDragging || draggedBoxIndex === null) return;\n\n        const mouseX = e.clientX - canvas.getBoundingClientRect().left;\n        boxCoordinates[draggedBoxIndex] = mouseX;\n\n        draw();\n      }\n\n      function handleMouseUp() {\n        isDragging = false;\n        draggedBoxIndex = null;\n      }\n\n      draw();\n\n      canvas.addEventListener(\"mousedown\", handleMouseDown);\n      canvas.addEventListener(\"mousemove\", handleMouseMove);\n      canvas.addEventListener(\"mouseup\", handleMouseUp);\n\n      return () => {\n        canvas.removeEventListener(\"mousedown\", handleMouseDown);\n        canvas.removeEventListener(\"mousemove\", handleMouseMove);\n        canvas.removeEventListener(\"mouseup\", handleMouseUp);\n      };\n    };\n\n    return setup();\n  }, [text]);\n\n  return (\n    <div className=\"orderedLineCanvasContainer\">\n      <canvas ref={canvasRef} id=\"orderedLineCanvas\"></canvas>\n    </div>\n  );\n}\n\nexport default OrderedLineCanvas;\n"],"names":["_ref","text","canvasRef","useRef","useEffect","setup","window","addEventListener","items","split","filter","item","labels","shift","sort","Math","random","canvas","current","ctx","getContext","textBoxHeight","padding","markerSize","dpr","devicePixelRatio","width","offsetWidth","height","offsetHeight","lineY","scale","boxCoordinates","map","_","i","length","isDragging","draggedBoxIndex","isPointInRect","x","y","rect","draw","clearRect","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","font","textAlign","fillText","boxVerticalSpacing","boxWidth","measureText","fillStyle","fillRect","strokeRect","textBaseline","handleMouseDown","e","mouseX","clientX","getBoundingClientRect","left","mouseY","clientY","top","handleMouseMove","handleMouseUp","removeEventListener","_jsx","className","children","ref","id"],"sourceRoot":""}