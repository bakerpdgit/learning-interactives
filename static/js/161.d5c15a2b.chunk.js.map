{"version":3,"file":"static/js/161.d5c15a2b.chunk.js","mappings":"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","sources":["webpack://my-react-app/./src/components/RaffleBalls.module.css?7aa1","components/RaffleBalls.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"gameArea\":\"RaffleBalls_gameArea__KsO9i\",\"ball\":\"RaffleBalls_ball__jV5Yq\",\"expanded\":\"RaffleBalls_expanded__bzFWp\",\"ballText\":\"RaffleBalls_ballText__ixfhY\",\"selectButton\":\"RaffleBalls_selectButton__31YEj\"};","import React, { useState, useEffect, useRef } from \"react\";\nimport Matter from \"matter-js\";\nimport styles from \"./RaffleBalls.module.css\";\n\nfunction RaffleBalls({ text }) {\n  const gameAreaRef = useRef(null);\n  const engineRef = useRef(null);\n  const ballsRef = useRef([]);\n  const [expandedBallIndex, setExpandedBallIndex] = useState(null);\n  const [ballPositions, setBallPositions] = useState([]);\n  const [showBalls, setShowBalls] = useState(true);\n  const [partitionLeft, setPartitionLeft] = useState(null);\n  const [partitionRight, setPartitionRight] = useState(null);\n  const [winnerFound, setWinnerFound] = useState(false);\n  const [winningBallIndex, setWinningBallIndex] = useState(null);\n  const [playerColours, setPlayerColours] = useState({});\n  const [gameText, setGameText] = useState(text); // initialText is the initial value passed to RaffleBalls\n\n  useEffect(() => {\n    // Function to reload the page on window resize\n    const handleResize = () => {\n      window.location.reload(); // Reloads the entire page\n    };\n\n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n\n    // Cleanup event listener on component unmount\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    // Initialize Matter.js engine and world\n    const engine = Matter.Engine.create();\n    engine.gravity.y = 0;\n    engine.gravity.x = 0;\n    engineRef.current = engine;\n    ballsRef.current = [];\n\n    // Create a renderer\n    const render = Matter.Render.create({\n      element: gameAreaRef.current,\n      engine: engine,\n      options: {\n        width: gameAreaRef.current.offsetWidth,\n        height: gameAreaRef.current.offsetHeight,\n        wireframes: false,\n        background: \"#f0f0f0\", // light gray background\n      },\n    });\n\n    // Create the walls and partition\n    const bounds = {\n      width: gameAreaRef.current.offsetWidth,\n      height: gameAreaRef.current.offsetHeight,\n    };\n\n    const walls = [\n      Matter.Bodies.rectangle(bounds.width / 2, 0, bounds.width, 10, {\n        isStatic: true,\n        render: { fillStyle: \"red\" },\n      }), // Top wall\n      Matter.Bodies.rectangle(\n        bounds.width / 2,\n        bounds.height,\n        bounds.width,\n        10,\n        {\n          isStatic: true,\n          render: { fillStyle: \"red\" },\n        }\n      ), // Bottom wall\n      Matter.Bodies.rectangle(0, bounds.height / 2, 10, bounds.height, {\n        isStatic: true,\n        render: { fillStyle: \"red\" },\n      }), // Left wall\n      Matter.Bodies.rectangle(\n        bounds.width,\n        bounds.height / 2,\n        10,\n        bounds.height,\n        {\n          isStatic: true,\n          render: { fillStyle: \"red\" },\n        }\n      ), // Right wall\n    ];\n\n    // Create the partition rectangles\n    const partitionHeight = 8;\n    const partitionY = bounds.height - 150;\n    const partLeft = Matter.Bodies.rectangle(\n      bounds.width / 4,\n      partitionY,\n      bounds.width / 2,\n      partitionHeight,\n      {\n        isStatic: true,\n        render: { fillStyle: \"blue\" },\n      }\n    );\n\n    setPartitionLeft(partLeft);\n\n    const partRight = Matter.Bodies.rectangle(\n      (3 * bounds.width) / 4,\n      partitionY,\n      bounds.width / 2,\n      partitionHeight,\n      {\n        isStatic: true,\n        render: { fillStyle: \"blue\" },\n      }\n    );\n\n    setPartitionRight(partRight);\n\n    Matter.World.add(engine.world, [...walls, partLeft, partRight]);\n\n    // Create the funnel rectangles\n    const funnelWidth = 8; // Width of the funnel walls\n    const funnelGap = 45; // Gap between the two funnel walls at the bottom\n    const funnelHeight =\n      ((bounds.width / 2 - funnelGap / 2) ** 2 + 110 ** 2) ** 0.5; // Height of the funnel walls\n\n    const funnelLeft = Matter.Bodies.rectangle(\n      bounds.width / 2 - funnelGap / 2 - funnelHeight / 2,\n      bounds.height -\n        (funnelHeight * 110) / (bounds.width / 2 - funnelGap / 2) / 2 -\n        40,\n      funnelHeight,\n      funnelWidth,\n      {\n        isStatic: true,\n        angle: Math.atan(110 / (bounds.width / 2 - funnelGap / 2)),\n        render: { fillStyle: \"blue\" }, // Color for visibility\n      }\n    );\n\n    const funnelRight = Matter.Bodies.rectangle(\n      bounds.width / 2 + funnelGap / 2 + funnelHeight / 2,\n      bounds.height -\n        (funnelHeight * 110) / (bounds.width / 2 - funnelGap / 2) / 2 -\n        40,\n      funnelHeight,\n      funnelWidth,\n      {\n        isStatic: true,\n        angle: Math.PI - Math.atan(110 / (bounds.width / 2 - funnelGap / 2)),\n        render: { fillStyle: \"blue\" }, // Color for visibility\n      }\n    );\n\n    const funnelBaseLeft = Matter.Bodies.rectangle(\n      bounds.width / 2 - funnelGap / 2 - funnelWidth,\n      bounds.height - 20,\n      funnelWidth,\n      40,\n      {\n        isStatic: true,\n        render: { fillStyle: \"blue\" }, // Color for visibility\n      }\n    );\n\n    const funnelBaseRight = Matter.Bodies.rectangle(\n      bounds.width / 2 + funnelGap / 2 + funnelWidth,\n      bounds.height - 20,\n      funnelWidth,\n      40,\n      {\n        isStatic: true,\n        render: { fillStyle: \"blue\" }, // Color for visibility\n      }\n    );\n\n    // Add the funnel rectangles to the world\n    Matter.World.add(engine.world, [\n      funnelLeft,\n      funnelRight,\n      funnelBaseLeft,\n      funnelBaseRight,\n    ]);\n\n    // Parse participants and create ball bodies\n    const participants = gameText.split(\"\\n\").map((line) => {\n      const [name, score] = line.split(\",\");\n      return { name, score: parseInt(score, 10) };\n    });\n\n    const initialPositions = [];\n    const currPlayerColors = playerColours;\n\n    // Assign colors to each player, spreading them across the color spectrum\n    participants.forEach((participant, participantIndex) => {\n      // Calculate a distinct hue for each player\n      if (!currPlayerColors[participant.name]) {\n        const hue = (participantIndex * 360) / participants.length;\n        currPlayerColors[participant.name] = `hsl(${hue}, 100%, 50%)`;\n      }\n\n      Array.from({ length: participant.score }).forEach((_, i) => {\n        const x = 20 + Math.random() * (bounds.width - 40);\n        const y = 20 + Math.random() * (bounds.height - 190); // Avoid placing balls too close to the partition\n        const color = currPlayerColors[participant.name];\n        const ball = Matter.Bodies.circle(x, y, 20, {\n          restitution: 1,\n          friction: 0,\n          frictionAir: 0,\n          frictionStatic: 0,\n          inertia: Infinity,\n          render: {\n            fillStyle: color,\n          },\n          label: participant.name, // Store the label\n          customColor: color, // Store the color\n        });\n        ballsRef.current.push(ball);\n        initialPositions.push({ x, y, color, label: participant.name });\n      });\n    });\n\n    setBallPositions(initialPositions);\n    setPlayerColours(currPlayerColors);\n\n    // Run the renderer and engine's runner\n    Matter.Render.run(render);\n    const runner = Matter.Runner.create();\n    Matter.Runner.run(runner, engine);\n\n    // Cleanup on unmount\n    return () => {\n      Matter.Render.stop(render);\n      Matter.Runner.stop(runner);\n      Matter.World.clear(engine.world);\n      Matter.Engine.clear(engine);\n      render.canvas.remove();\n      render.canvas = null;\n      render.context = null;\n      render.textures = {};\n    };\n  }, [gameText, playerColours]);\n\n  // Function to start bouncing\n  const startBouncing = () => {\n    setShowBalls(false); // Hide the static balls\n\n    ballsRef.current.forEach((ball) => {\n      Matter.World.add(engineRef.current.world, ball);\n      const forceX = (Math.random() - 0.5) * 0.1; // Random force between -0.05 and 0.05\n      const forceY = (Math.random() - 0.5) * 0.1;\n      Matter.Body.applyForce(\n        ball,\n        { x: ball.position.x, y: ball.position.y },\n        { x: forceX, y: forceY }\n      );\n    });\n\n    // Move the partition after 5 seconds\n    // Move the partition after 5 seconds\n    setTimeout(() => {\n      // Enable gravity on the y-axis\n      engineRef.current.world.gravity.y = 1;\n\n      // Reduce restitution to make the balls lose energy\n      ballsRef.current.forEach((ball) => {\n        Matter.Body.set(ball, {\n          restitution: 0.5,\n        });\n      });\n\n      // Set another timeout to open the partition after another 5 seconds\n      setTimeout(() => {\n        // Reduce the width of the partitions to allow some balls to fall through\n        Matter.World.remove(engineRef.current.world, [\n          partitionLeft,\n          partitionRight,\n        ]);\n\n        // After another 5 seconds, update the positions of all balls and find the winner\n        setTimeout(() => {\n          let winningBall = ballsRef.current[0];\n          let winningIndex = 0;\n\n          ballsRef.current.forEach((ball, index) => {\n            if (ball.position.y > winningBall.position.y) {\n              winningBall = ball;\n              winningIndex = index;\n            }\n          });\n\n          // Rebuild ballPositions from ballsRef\n          const newBallPositions = ballsRef.current.map((ball) => ({\n            color: ball.customColor, // Retrieve the color stored in the ball object\n            label: ball.label, // Retrieve the label stored in the ball object\n            x: ball.position.x,\n            y: ball.position.y,\n            visible: true, // Make all balls visible\n          }));\n\n          setBallPositions(newBallPositions);\n\n          // Expand only the winning ball\n          setExpandedBallIndex(winningIndex);\n          Matter.World.remove(engineRef.current.world, ballsRef.current);\n          setWinningBallIndex(winningIndex);\n          setShowBalls(true);\n          setWinnerFound(true);\n        }, 5000);\n      }, 5000);\n    }, 5000);\n  };\n\n  // Function to handle ball click\n  const handleBallClick = (index) => {\n    setExpandedBallIndex(index);\n  };\n\n  // Function to reset the game to the initial state\n  const resetGame = () => {\n    setWinnerFound(false);\n    setExpandedBallIndex(null);\n    setGameText(gameText + \" \"); // Trigger re-render with the same text\n  };\n\n  const resetWithoutWinningBall = () => {\n    const winningLabel = ballPositions[winningBallIndex].label;\n\n    const updatedParticipants = gameText\n      .split(\"\\n\")\n      .map((line) => {\n        const [name, score] = line.split(\",\");\n        if (name === winningLabel) {\n          const newScore = parseInt(score, 10) - 1;\n          return `${name},${newScore}`;\n        }\n        return line;\n      })\n      .filter((line) => !line.includes(\",0\")) // Optionally filter out any participant with a score of 0\n      .join(\"\\n\");\n\n    setWinnerFound(false);\n    setExpandedBallIndex(null);\n    setGameText(updatedParticipants); // Trigger re-render with updated text\n  };\n\n  // Function to reset the game without the winning player's balls\n  const resetWithoutWinner = () => {\n    const winningLabel = ballPositions[winningBallIndex].label;\n    const updatedParticipants = gameText\n      .split(\"\\n\")\n      .filter((line) => !line.startsWith(winningLabel))\n      .join(\"\\n\");\n\n    setWinnerFound(false);\n    setExpandedBallIndex(null);\n    setGameText(updatedParticipants); // Trigger re-render with updated text\n  };\n\n  return (\n    <div>\n      <button onClick={startBouncing} className={styles.selectButton}>\n        SELECT\n      </button>\n      {winnerFound && (\n        <>\n          <button onClick={resetGame}>RESET</button>\n          <button onClick={resetWithoutWinningBall}>\n            RESET WITHOUT WINNING BALL\n          </button>\n          <button onClick={resetWithoutWinner}>RESET WITHOUT WINNER</button>\n        </>\n      )}\n      <div ref={gameAreaRef} className={styles.gameArea}>\n        {showBalls &&\n          ballPositions.map((ball, index) => (\n            <div\n              key={index}\n              id={`ball-${index}`}\n              className={`${styles.ball} ${\n                expandedBallIndex === index ? styles.expanded : \"\"\n              }`}\n              onClick={() => handleBallClick(index)}\n              style={{\n                backgroundColor: ball.color,\n                top: `${ball.y - 20}px`,\n                left: `${ball.x - 20}px`,\n              }}\n            >\n              {expandedBallIndex === index ? (\n                <span className={styles.ballText}>{ball.label}</span>\n              ) : null}\n            </div>\n          ))}\n      </div>\n    </div>\n  );\n}\n\nexport default RaffleBalls;\n"],"names":["_ref","text","gameAreaRef","useRef","engineRef","ballsRef","expandedBallIndex","setExpandedBallIndex","useState","ballPositions","setBallPositions","showBalls","setShowBalls","partitionLeft","setPartitionLeft","partitionRight","setPartitionRight","winnerFound","setWinnerFound","winningBallIndex","setWinningBallIndex","playerColours","setPlayerColours","gameText","setGameText","useEffect","handleResize","window","location","reload","addEventListener","removeEventListener","engine","Matter","create","gravity","y","x","current","render","element","options","width","offsetWidth","height","offsetHeight","wireframes","background","bounds","walls","rectangle","isStatic","fillStyle","partitionY","partLeft","partRight","add","world","funnelHeight","funnelGap","funnelLeft","angle","Math","atan","funnelRight","PI","funnelBaseLeft","funnelBaseRight","participants","split","map","line","name","score","parseInt","initialPositions","currPlayerColors","forEach","participant","participantIndex","hue","length","concat","Array","from","_","i","random","color","ball","circle","restitution","friction","frictionAir","frictionStatic","inertia","Infinity","label","customColor","push","run","runner","stop","clear","canvas","remove","context","textures","_jsxs","children","_jsx","onClick","startBouncing","forceX","forceY","applyForce","position","setTimeout","set","winningBall","winningIndex","index","newBallPositions","visible","className","styles","_Fragment","resetGame","resetWithoutWinningBall","winningLabel","updatedParticipants","newScore","filter","includes","join","resetWithoutWinner","startsWith","ref","id","handleBallClick","style","backgroundColor","top","left"],"sourceRoot":""}