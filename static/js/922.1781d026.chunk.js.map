{"version":3,"file":"static/js/922.1781d026.chunk.js","mappings":"mJAEA,SAASA,EAAmBC,GAE1B,MAAMC,EAAWD,EAAKE,MAAM,MACtBC,EAAW,GAWjB,OATAF,EAASG,SAAQ,CAACC,EAASC,KACrBA,EAAQ,IAAM,EAEhBH,EAASI,MAAKC,EAAAA,EAAAA,KAACC,EAAAA,WAAU,CAAsBC,KAAML,GAAQ,OAAAM,OAAvBL,KAEtCH,EAASI,MAAKC,EAAAA,EAAAA,KAAA,QAAAI,SAA4BP,GAAO,OAAAM,OAAjBL,IAClC,IAGKH,CACT,CAwBA,QAlBA,SAAsBU,GAAoC,IAAnC,KAAEb,EAAI,eAAEc,GAAiB,GAAOD,EAKrD,OAJIC,IACFd,EANwBA,IACnBA,EAAKe,QAAQ,OAAQ,MAKnBC,CAAmBhB,KAI1BQ,EAAAA,EAAAA,KAAA,OACES,MAAO,CACLC,WACElB,EAAKmB,SAAS,OAASL,EAAiB,WAAa,SACvDM,UAAWpB,EAAKmB,SAAS,MAAQ,QAAU,KAC3CP,SAEDb,EAAmBC,IAG1B,C,gFCmMA,QAtOA,SAAoBa,GAAY,IAAX,KAAEb,GAAMa,EAE3B,MAAOQ,KAAgBC,GAAQtB,EAAKE,MAAM,QACpCqB,EAAaF,EAAYG,WAAW,YAAcH,EAAc,KAChEI,EAAgBF,EAAaD,EAAKI,KAAK,QAAU1B,EAWjD2B,EAAe,CADIC,KAAM,YAAaC,OAAQ,MAAOC,UAAW,QARpEP,GAAcA,EAAWC,WAAW,YAChCO,OAAOC,YACLT,EACGU,MAAM,GACN/B,MAAM,KACNgC,KAAKC,GAAQA,EAAIjC,MAAM,QAE5B,CAAC,GAKP,SAASkC,EAAQC,GACf,IACEC,EADEC,EAAeF,EAAMG,OAEzB,KAAwB,IAAjBD,GACLD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GACzCA,KACCF,EAAME,GAAeF,EAAMC,IAAgB,CAC1CD,EAAMC,GACND,EAAME,IAGV,OAAOF,CACT,CAIA,MAAOO,IAAaC,EAAAA,EAAAA,WAAS,IACpBpB,EAAcvB,MAAM,QAAQgC,KAAKY,IACtC,MAAOC,KAAaC,GAAWF,EAAM5C,MAAM,MAK3C,MAAO,CAAE6C,WAAUE,QAASb,EAJZY,EAAQd,KAAKC,IAAG,CAC9BnC,KAAMmC,EAAIpB,QAAQ,IAAK,IACvBmC,QAASf,EAAIX,WAAW,UAEoB,OAK3C2B,EAAUC,IAAeP,EAAAA,EAAAA,UAC9BlB,EAAaC,OAASyB,MAAM1B,EAAaC,MACrC0B,SAAS3B,EAAaC,MACtB,OAEC2B,EAAaC,IAAkBX,EAAAA,EAAAA,UACpCY,MAAMb,EAAUJ,QAAQkB,KAAK,QAExBC,EAAOC,IAAYf,EAAAA,EAAAA,UAAS,OAC5BgB,EAAsBC,IAA2BjB,EAAAA,EAAAA,UAAS,GAE3DkB,GAAeC,EAAAA,EAAAA,cAAY,KAC/B,MAAMC,EAAeV,EAAYW,QAAO,CAACC,EAAKC,EAAQC,IAElDzB,EAAUyB,GAAKpB,QAAQmB,IACvBxB,EAAUyB,GAAKpB,QAAQmB,GAAQlB,QAExBiB,EAAM,EAERA,GACN,GACGG,EAAwB1B,EAAU2B,QAAQC,GAC9CA,EAAEvB,QAAQwB,MAAMC,GAAMA,EAAExB,YACxBV,OACFoB,EAAS,CAAEV,QAASe,EAAcU,MAAOL,IACzClB,EAAY,KAAK,GAChB,CAACG,EAAaX,KAGjBgC,EAAAA,EAAAA,YAAU,KACR,GAAc,OAAVjB,EAAJ,CAEA,GAAiB,OAAbR,GAAqBA,EAAW,EAAG,CACrC,MAAM0B,EAAQC,YAAW,IAAM1B,EAAYD,EAAW,IAAI,KAC1D,MAAO,IAAM4B,aAAaF,EAC5B,CAAwB,IAAb1B,GACTY,GANwB,CAO1B,GACC,CAACZ,EAAUY,EAAcJ,IAG5B,MAAMqB,EAAwBA,CAACC,EAAaC,KAC1C,GAAc,OAAVvB,EAAgB,OACpB,GAA+B,QAA3BhC,EAAaG,WAAoD,OAA7ByB,EAAY0B,GAElD,OAEF,MAAME,EAAiB,IAAI5B,GAC3B4B,EAAeF,GAAeC,EAC9B1B,EAAe2B,EAAe,EAYhC,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAzE,SAAA,EACEwE,EAAAA,EAAAA,MAAA,OAAKE,UAAU,iBAAgB1E,SAAA,CACnB,MAAT+C,IACCyB,EAAAA,EAAAA,MAAA,UAAQG,QAASxB,EAAcyB,SAAoB,OAAV7B,EAAe/C,SAAA,CAAC,iBAC3B,OAAbuC,EAAiB,KAAAxC,OAAQwC,EAAQ,MAAO,MAGhD,OAAVQ,IACCyB,EAAAA,EAAAA,MAAA,OAAKE,UAAU,QAAO1E,SAAA,CAAC,UACb+C,EAAMT,QAAQ,IAAES,EAAMgB,aAIpCnE,EAAAA,EAAAA,KAAA,OAAK8E,UAAU,uBAAsB1E,UACnCJ,EAAAA,EAAAA,KAAA,OAAK8E,UAAU,WAAU1E,SACE,QAAxBe,EAAaE,OACZe,EAAUV,KAAI,CAACsC,EAAGiB,KAChBL,EAAAA,EAAAA,MAAA,OAAgBE,UAAU,cAAa1E,SAAA,EACrCwE,EAAAA,EAAAA,MAAA,OAAKE,UAAU,eAAc1E,SAAA,CAC1B6E,EAAO,EAAE,IAAE,KACZjF,EAAAA,EAAAA,KAACkF,EAAAA,EAAa,CAAC1F,KAAMwE,EAAEzB,SAAUjC,gBAAgB,OAElD0D,EAAEvB,QAAQf,KAAI,CAACwC,EAAGiB,KACjBnF,EAAAA,EAAAA,KAAA,UAEE8E,UAAS,gBAAA3E,OACP4C,EAAYkC,KAAUE,EACR,OAAVhC,IACGe,EAAExB,SACHsB,EAAEvB,QAAQwB,MAAML,GAAWA,EAAOlB,UAChC,kBAEF,WACF,GAAE,KAAAvC,OAEK,OAAVgD,GAA6C,QAA3BhC,EAAaG,YAChC4C,EAAExB,SACoB,OAAtBK,EAAYkC,GAER,GADA,iBAGNF,QAASA,IAAMP,EAAsBS,EAAME,GAAM/E,UAEjDJ,EAAAA,EAAAA,KAACkF,EAAAA,EAAa,CAAC1F,KAAM0E,EAAE1E,KAAMc,gBAAgB,KAnBxC6E,OAPDF,MAiCZL,EAAAA,EAAAA,MAAA,OAAKE,UAAU,cAAa1E,SAAA,EAC1BwE,EAAAA,EAAAA,MAAA,OAAKE,UAAU,eAAc1E,SAAA,CAC1BiD,EAAuB,EAAE,IAAE,KAC5BrD,EAAAA,EAAAA,KAACkF,EAAAA,EAAa,CACZ1F,KAAM4C,EAAUiB,GAAsBd,SACtCjC,gBAAgB,OAInB8B,EAAUiB,GAAsBZ,QAAQf,KAAI,CAACwC,EAAGiB,KAC/CnF,EAAAA,EAAAA,KAAA,UAEE8E,UAAS,gBAAA3E,OACP4C,EAAYM,KAA0B8B,EACxB,OAAVhC,IACGe,EAAExB,SACHN,EAAUiB,GAAsBZ,QAAQwB,MACrCL,GAAWA,EAAOlB,UAEnB,kBAEF,WACF,GAAE,KAAAvC,OAEK,OAAVgD,GAA6C,QAA3BhC,EAAaG,YAChC4C,EAAExB,SACoC,OAAtCK,EAAYM,GAER,GADA,iBAGN0B,QAASA,IACPP,EAAsBnB,EAAsB8B,GAC7C/E,UAEDJ,EAAAA,EAAAA,KAACkF,EAAAA,EAAa,CAAC1F,KAAM0E,EAAE1E,KAAMc,gBAAgB,KAvBxC6E,MA2BTP,EAAAA,EAAAA,MAAA,OAAKE,UAAU,oBAAmB1E,SAAA,EAChCJ,EAAAA,EAAAA,KAAA,UACE+E,QAnGUK,IAAM9B,EAAwB,GAoGxC0B,SAAmC,IAAzB3B,EAA2BjD,SAEpC,cAEHJ,EAAAA,EAAAA,KAAA,UACE+E,QAxGaM,IAC3B/B,EAAwBD,EAAuB,GAwGjC2B,SAAmC,IAAzB3B,EAA2BjD,SAEpC,gBAEHJ,EAAAA,EAAAA,KAAA,UACE+E,QA5GSO,IACvBhC,EAAwBD,EAAuB,GA4GjC2B,SAAU3B,IAAyBjB,EAAUJ,OAAS,EAAE5B,SAEvD,YAEHJ,EAAAA,EAAAA,KAAA,UACE+E,QAhHSQ,IAAMjC,EAAwBlB,EAAUJ,OAAS,GAiH1DgD,SAAU3B,IAAyBjB,EAAUJ,OAAS,EAAE5B,SAEvD,wBASnB,C","sources":["components/MathComponent.js","components/MultiChoice.js"],"sourcesContent":["import { InlineMath } from \"react-katex\";\r\n\r\nfunction parseAndRenderMath(text) {\r\n  // Split the text based on $$ delimiters\r\n  const segments = text.split(\"$$\");\r\n  const elements = [];\r\n\r\n  segments.forEach((segment, index) => {\r\n    if (index % 2 === 1) {\r\n      // Odd-indexed segments are LaTeX (since they are enclosed between $$ delimiters)\r\n      elements.push(<InlineMath key={`MCIM${index}`} math={segment} />);\r\n    } else {\r\n      elements.push(<span key={`MCSP${index}`}>{segment}</span>);\r\n    }\r\n  });\r\n\r\n  return elements;\r\n}\r\n\r\nconst renderWithNewLines = (text) => {\r\n  return text.replace(/\\\\n/g, \"\\n\");\r\n};\r\n\r\nfunction MathComponent({ text, renderNewLines = false }) {\r\n  if (renderNewLines) {\r\n    text = renderWithNewLines(text);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        whiteSpace:\r\n          text.includes(\"\\n\") && renderNewLines ? \"pre-wrap\" : \"normal\",\r\n        marginTop: text.includes(\"$$\") ? \"0.5em\" : \"0\",\r\n      }}\r\n    >\r\n      {parseAndRenderMath(text)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MathComponent;\r\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport \"./MultiChoice.css\";\nimport MathComponent from \"./MathComponent.js\";\n\nfunction MultiChoice({ text }) {\n  // Parsing the options\n  const [optionsLine, ...rest] = text.split(\"\\n\\n\");\n  const optionsSet = optionsLine.startsWith(\"OPTIONS:\") ? optionsLine : null;\n  const questionTexts = optionsSet ? rest.join(\"\\n\\n\") : text;\n  const parsedOptions =\n    optionsSet && optionsSet.startsWith(\"OPTIONS:\")\n      ? Object.fromEntries(\n          optionsSet\n            .slice(8)\n            .split(\",\")\n            .map((opt) => opt.split(\"=\"))\n        )\n      : {};\n  const defaultOptions = { time: \"unlimited\", scroll: \"yes\", immediate: \"no\" };\n  const finalOptions = { ...defaultOptions, ...parsedOptions };\n\n  // Helper function to shuffle an array\n  function shuffle(array) {\n    let currentIndex = array.length,\n      randomIndex;\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex],\n        array[currentIndex],\n      ];\n    }\n    return array;\n  }\n\n  // Parsing the questions and answers\n\n  const [questions] = useState(() => {\n    return questionTexts.split(\"\\n\\n\").map((qText) => {\n      const [question, ...options] = qText.split(\"\\n\");\n      const answers = options.map((opt) => ({\n        text: opt.replace(\"*\", \"\"),\n        correct: opt.startsWith(\"*\"),\n      }));\n      return { question, answers: shuffle(answers) };\n    });\n  });\n\n  // State variables\n  const [timeLeft, setTimeLeft] = useState(\n    finalOptions.time && !isNaN(finalOptions.time)\n      ? parseInt(finalOptions.time)\n      : null\n  );\n  const [userAnswers, setUserAnswers] = useState(\n    Array(questions.length).fill(null)\n  );\n  const [score, setScore] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n\n  const handleSubmit = useCallback(() => {\n    const correctCount = userAnswers.reduce((acc, answer, idx) => {\n      if (\n        questions[idx].answers[answer] &&\n        questions[idx].answers[answer].correct\n      ) {\n        return acc + 1;\n      }\n      return acc;\n    }, 0);\n    const totalCorrectQuestions = questions.filter((q) =>\n      q.answers.some((a) => a.correct)\n    ).length;\n    setScore({ correct: correctCount, total: totalCorrectQuestions });\n    setTimeLeft(null);\n  }, [userAnswers, questions]);\n\n  // Handle time countdown\n  useEffect(() => {\n    if (score !== null) return; // <-- Add this line to stop the timer after submission\n\n    if (timeLeft !== null && timeLeft > 0) {\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearTimeout(timer);\n    } else if (timeLeft === 0) {\n      handleSubmit();\n    }\n  }, [timeLeft, handleSubmit, score]); // <-- Add score to the dependency array\n\n  // Function to handle answer selection\n  const handleAnswerSelection = (questionIdx, answerIdx) => {\n    if (score !== null) return; // If the quiz has been marked, return early\n    if (finalOptions.immediate === \"yes\" && userAnswers[questionIdx] !== null) {\n      // Prevent further changes if immediate mode is on and an answer was already selected\n      return;\n    }\n    const updatedAnswers = [...userAnswers];\n    updatedAnswers[questionIdx] = answerIdx;\n    setUserAnswers(updatedAnswers);\n  };\n\n  // Navigation functions for single-question view\n  const goToFirstQuestion = () => setCurrentQuestionIndex(0);\n  const goToPreviousQuestion = () =>\n    setCurrentQuestionIndex(currentQuestionIndex - 1);\n  const goToNextQuestion = () =>\n    setCurrentQuestionIndex(currentQuestionIndex + 1);\n  const goToLastQuestion = () => setCurrentQuestionIndex(questions.length - 1);\n\n  // JSX rendering\n  return (\n    <>\n      <div className=\"submissionInfo\">\n        {score == null && (\n          <button onClick={handleSubmit} disabled={score !== null}>\n            Submit Answers{timeLeft !== null ? ` (${timeLeft}s)` : \"\"}\n          </button>\n        )}\n        {score !== null && (\n          <div className=\"score\">\n            Score: {score.correct}/{score.total}\n          </div>\n        )}\n      </div>\n      <div className=\"multiChoiceContainer\">\n        <div className=\"gameArea\">\n          {finalOptions.scroll === \"yes\" ? (\n            questions.map((q, qIdx) => (\n              <div key={qIdx} className=\"questionBox\">\n                <div className=\"questionText\">\n                  {qIdx + 1}.{\" \"}\n                  <MathComponent text={q.question} renderNewLines={true} />\n                </div>\n                {q.answers.map((a, aIdx) => (\n                  <button\n                    key={aIdx}\n                    className={`answerOption ${\n                      userAnswers[qIdx] === aIdx\n                        ? score !== null\n                          ? !a.correct &&\n                            q.answers.some((answer) => answer.correct)\n                            ? \"incorrectAnswer\"\n                            : \"selected\"\n                          : \"selected\"\n                        : \"\"\n                    } ${\n                      (score !== null || finalOptions.immediate === \"yes\") &&\n                      a.correct &&\n                      userAnswers[qIdx] !== null\n                        ? \"correctAnswer\"\n                        : \"\"\n                    }`}\n                    onClick={() => handleAnswerSelection(qIdx, aIdx)}\n                  >\n                    <MathComponent text={a.text} renderNewLines={true} />\n                  </button>\n                ))}\n              </div>\n            ))\n          ) : (\n            // Adjusted logic for single question view also\n            <div className=\"questionBox\">\n              <div className=\"questionText\">\n                {currentQuestionIndex + 1}.{\" \"}\n                <MathComponent\n                  text={questions[currentQuestionIndex].question}\n                  renderNewLines={true}\n                />\n              </div>\n\n              {questions[currentQuestionIndex].answers.map((a, aIdx) => (\n                <button\n                  key={aIdx}\n                  className={`answerOption ${\n                    userAnswers[currentQuestionIndex] === aIdx\n                      ? score !== null\n                        ? !a.correct &&\n                          questions[currentQuestionIndex].answers.some(\n                            (answer) => answer.correct\n                          )\n                          ? \"incorrectAnswer\"\n                          : \"selected\"\n                        : \"selected\"\n                      : \"\"\n                  } ${\n                    (score !== null || finalOptions.immediate === \"yes\") &&\n                    a.correct &&\n                    userAnswers[currentQuestionIndex] !== null\n                      ? \"correctAnswer\"\n                      : \"\"\n                  }`}\n                  onClick={() =>\n                    handleAnswerSelection(currentQuestionIndex, aIdx)\n                  }\n                >\n                  <MathComponent text={a.text} renderNewLines={true} />\n                </button>\n              ))}\n\n              <div className=\"navigationButtons\">\n                <button\n                  onClick={goToFirstQuestion}\n                  disabled={currentQuestionIndex === 0}\n                >\n                  {\"<< First\"}\n                </button>\n                <button\n                  onClick={goToPreviousQuestion}\n                  disabled={currentQuestionIndex === 0}\n                >\n                  {\"< Previous\"}\n                </button>\n                <button\n                  onClick={goToNextQuestion}\n                  disabled={currentQuestionIndex === questions.length - 1}\n                >\n                  {\"> Next\"}\n                </button>\n                <button\n                  onClick={goToLastQuestion}\n                  disabled={currentQuestionIndex === questions.length - 1}\n                >\n                  {\">> Last\"}\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default MultiChoice;\n"],"names":["parseAndRenderMath","text","segments","split","elements","forEach","segment","index","push","_jsx","InlineMath","math","concat","children","_ref","renderNewLines","replace","renderWithNewLines","style","whiteSpace","includes","marginTop","optionsLine","rest","optionsSet","startsWith","questionTexts","join","finalOptions","time","scroll","immediate","Object","fromEntries","slice","map","opt","shuffle","array","randomIndex","currentIndex","length","Math","floor","random","questions","useState","qText","question","options","answers","correct","timeLeft","setTimeLeft","isNaN","parseInt","userAnswers","setUserAnswers","Array","fill","score","setScore","currentQuestionIndex","setCurrentQuestionIndex","handleSubmit","useCallback","correctCount","reduce","acc","answer","idx","totalCorrectQuestions","filter","q","some","a","total","useEffect","timer","setTimeout","clearTimeout","handleAnswerSelection","questionIdx","answerIdx","updatedAnswers","_jsxs","_Fragment","className","onClick","disabled","qIdx","MathComponent","aIdx","goToFirstQuestion","goToPreviousQuestion","goToNextQuestion","goToLastQuestion"],"sourceRoot":""}