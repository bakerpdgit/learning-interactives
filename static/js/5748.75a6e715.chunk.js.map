{"version":3,"file":"static/js/5748.75a6e715.chunk.js","mappings":"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","sources":["webpack://class-interactives/./src/components/PrizePot.module.css?4033","components/PrizePot.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"GameArea\":\"PrizePot_GameArea__+JVoK\",\"prizeFund\":\"PrizePot_prizeFund__y+M23\",\"coinBagAllocation\":\"PrizePot_coinBagAllocation__88lJl\",\"question\":\"PrizePot_question__LV5BQ\",\"prizePot\":\"PrizePot_prizePot__S0wyB\",\"prizePotChange\":\"PrizePot_prizePotChange__pPsvI\",\"answers\":\"PrizePot_answers__pdBvp\",\"buttonWrapper\":\"PrizePot_buttonWrapper__obm-4\",\"answerOption\":\"PrizePot_answerOption__StOUQ\",\"dragOver\":\"PrizePot_dragOver__ZOyVc\",\"moneyBag\":\"PrizePot_moneyBag__By8Lq\",\"celebration\":\"PrizePot_celebration__c7jhq\",\"scale\":\"PrizePot_scale__x-ay9\",\"hide\":\"PrizePot_hide__3+RpL\"};","import React, { useState, useEffect } from \"react\";\nimport styles from \"./PrizePot.module.css\";\nimport { useDrag } from \"react-dnd\";\nimport { useDrop } from \"react-dnd\";\n\nconst ItemTypes = {\n  COIN_BAG: \"coinBag\",\n};\n\nconst INITIAL_PRIZE_POT = 128;\n\nconst DraggableCoinBag = ({ id }) => {\n  const [{ isDragging }, drag] = useDrag(() => ({\n    type: ItemTypes.COIN_BAG,\n    item: { id },\n    collect: (monitor) => ({\n      isDragging: !!monitor.isDragging(),\n    }),\n  }));\n\n  return (\n    <div\n      ref={drag}\n      style={{\n        opacity: isDragging ? 0.5 : 1,\n        fontSize: \"3em\",\n        cursor: \"move\",\n      }}\n    >\n      ðŸ’°\n    </div>\n  );\n};\n\nconst DroppableAnswerOption = ({\n  index,\n  onDropCoinBag,\n  children,\n  allocations,\n}) => {\n  const [{ isOver }, drop] = useDrop(() => ({\n    accept: ItemTypes.COIN_BAG,\n    drop: (item, monitor) => onDropCoinBag(index, item.id),\n    collect: (monitor) => ({\n      isOver: !!monitor.isOver(),\n    }),\n  }));\n\n  return (\n    <div\n      ref={drop}\n      style={{\n        border: isOver ? \"2px solid green\" : \"1px solid gray\",\n        borderRadius: \"20px\",\n        padding: \"10px\",\n        margin: \"5px\",\n        textAlign: \"center\",\n        fontSize: \"1em\",\n      }}\n    >\n      {children}\n      <div className={styles.coinBagAllocation}>\n        {allocations.map(\n          (allocation, id) =>\n            allocation === index && <DraggableCoinBag key={id} id={id} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst DroppablePrizeFund = ({ onReturnCoinBag, children, allocations }) => {\n  const [{ isOver }, drop] = useDrop(() => ({\n    accept: ItemTypes.COIN_BAG,\n    drop: (item, monitor) => onReturnCoinBag(item.id),\n    collect: (monitor) => ({\n      isOver: !!monitor.isOver(),\n    }),\n  }));\n\n  return (\n    <div\n      ref={drop}\n      style={{\n        // Apply your styles here\n        border: isOver ? \"2px dashed green\" : \"1px dashed grey\",\n        padding: \"10px\",\n        borderRadius: \"10px\",\n        textAlign: \"center\",\n        minHeight: \"100px\", // Ensure there's enough space to drop\n      }}\n    >\n      {children}\n      {/* Render unallocated coin bags */}\n      <div className={styles.prizeFund}>\n        {allocations.map(\n          (allocation, id) =>\n            allocation === -1 && <DraggableCoinBag key={id} id={id} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction PrizePot({ text }) {\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [prizePot, setPrizePot] = useState(INITIAL_PRIZE_POT);\n  const currentQuestion = questions[currentQuestionIndex];\n  const [celebrate, setCelebrate] = useState(false);\n  const [coinBagsAllocation, setCoinBagsAllocation] = useState({\n    bags: [-1, -1, -1, -1], // Assuming -1 indicates not allocated\n  });\n\n  // Handle returning a coin bag to the prize fund\n  const handleReturnCoinBag = (coinBagId) => {\n    setCoinBagsAllocation((prev) => {\n      const newAllocations = { ...prev };\n      newAllocations.bags[coinBagId] = -1; // Reset allocation for this coin bag\n      return newAllocations;\n    });\n  };\n\n  useEffect(() => {\n    const parsedQuestions = text.split(\"\\n\\n\").map((q) => {\n      const lines = q.split(\"\\n\");\n      return {\n        question: lines[0],\n        answers: lines.slice(1).map((answer) => ({\n          text: answer.replace(\"*\", \"\"),\n          isCorrect: answer.includes(\"*\"),\n        })),\n      };\n    });\n    setQuestions(parsedQuestions);\n  }, [text]);\n\n  const restartGame = () => {\n    // Reset the game state as needed\n    setPrizePot(INITIAL_PRIZE_POT); // Assuming 128 is the starting amount\n    setCurrentQuestionIndex(0);\n    setCoinBagsAllocation({ bags: [-1, -1, -1, -1] });\n    setCelebrate(false);\n    // Also, ensure to reset any other relevant state to initial conditions\n  };\n\n  const handleSelectOption = (index) => {\n    // Update all bag allocations to the selected answer index\n    setCoinBagsAllocation((prev) => ({\n      ...prev,\n      bags: prev.bags.map(() => index),\n    }));\n  };\n\n  const handleSubmit = () => {\n    // Identify the index of the correct answer\n    const correctAnswerIndex = currentQuestion.answers.findIndex(\n      (answer) => answer.isCorrect\n    );\n\n    // Calculate the prize pot update based on the bets\n    const betPerBag = prizePot / 4; // Each bag represents a quarter of the current prize pot\n    const bagsOnCorrectAnswer = coinBagsAllocation.bags.filter(\n      (allocation) => allocation === correctAnswerIndex\n    ).length;\n    const winnings = bagsOnCorrectAnswer * betPerBag * 4; // Winnings from bets placed on the correct answer\n    // Calculate the total amount lost from bets on incorrect answers\n    const totalLostFromIncorrectBets =\n      coinBagsAllocation.bags.filter(\n        (allocation) => allocation !== correctAnswerIndex && allocation !== -1\n      ).length * betPerBag;\n    // Update the prize pot: add winnings and subtract the stake from incorrect bets\n    // After calculating the new prize pot value\n    const newPrizePot = Math.ceil(\n      prizePot - totalLostFromIncorrectBets + winnings\n    );\n\n    setPrizePot(newPrizePot);\n\n    // Prepare for the next question or end the quiz\n    if (currentQuestionIndex + 1 < questions.length && newPrizePot > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n      setCoinBagsAllocation({ bags: [-1, -1, -1, -1] }); // Reset coin bag allocations for the next question\n    } else {\n      setCelebrate(true);\n    }\n  };\n\n  // Handle dropping a coin bag onto an answer option\n  const handleDropCoinBag = (answerIndex, coinBagId) => {\n    // Update allocation state\n    setCoinBagsAllocation((prev) => {\n      const newAllocations = { ...prev };\n      newAllocations.bags[coinBagId] = answerIndex;\n      return newAllocations;\n    });\n  };\n\n  // also removed this style ${selectedOption === index ? styles.selected : \"\"} from the options because not selecting\n  return (\n    <>\n      <div className={styles.prizePot}>Current Fund: ${prizePot}</div>\n      {!celebrate ? (\n        currentQuestion && (\n          <>\n            <DroppablePrizeFund\n              onReturnCoinBag={handleReturnCoinBag}\n              allocations={coinBagsAllocation.bags}\n            >\n              <div className={styles.prizeFundTitle}>Prize Fund</div>\n            </DroppablePrizeFund>\n            <div className={styles.buttonWrapper}>\n              <button\n                className={styles.submitButton}\n                disabled={coinBagsAllocation.bags.every(\n                  (allocation) => allocation === -1\n                )} // Disable if no bets have been placed\n                onClick={handleSubmit}\n              >\n                Submit Final Answer\n              </button>\n            </div>\n            <p className={styles.question}>{currentQuestion.question}</p>\n            <div className={styles.gameArea}>\n              {currentQuestion && (\n                <>\n                  <div className={styles.answers}>\n                    {currentQuestion.answers.map((answer, index) => (\n                      <DroppableAnswerOption\n                        key={index}\n                        index={index}\n                        onDropCoinBag={handleDropCoinBag}\n                        allocations={coinBagsAllocation.bags}\n                      >\n                        <div\n                          className={`${styles.answerOption}`}\n                          onClick={() => handleSelectOption(index)}\n                        >\n                          {answer.text}\n                        </div>\n                      </DroppableAnswerOption>\n                    ))}\n                  </div>\n                </>\n              )}\n            </div>\n          </>\n        )\n      ) : (\n        <>\n          <div className={styles.celebration}>\n            {prizePot > 0 ? (\n              <>\n                <span>ðŸŽ‰</span>\n              </>\n            ) : (\n              <>\n                <span>ðŸ˜¢</span>\n              </>\n            )}\n          </div>\n          <div className={styles.buttonWrapper}>\n            <button style={styles.restartButton} onClick={restartGame}>\n              Try Again?\n            </button>\n          </div>\n        </>\n      )}\n    </>\n  );\n}\n\nexport default PrizePot;\n"],"names":["ItemTypes","DraggableCoinBag","_ref","id","isDragging","drag","useDrag","type","item","collect","monitor","_jsx","ref","style","opacity","fontSize","cursor","children","DroppableAnswerOption","_ref2","index","onDropCoinBag","allocations","isOver","drop","useDrop","accept","_jsxs","border","borderRadius","padding","margin","textAlign","className","styles","coinBagAllocation","map","allocation","DroppablePrizeFund","_ref3","onReturnCoinBag","minHeight","prizeFund","_ref4","text","questions","setQuestions","useState","currentQuestionIndex","setCurrentQuestionIndex","prizePot","setPrizePot","currentQuestion","celebrate","setCelebrate","coinBagsAllocation","setCoinBagsAllocation","bags","useEffect","parsedQuestions","split","q","lines","question","answers","slice","answer","replace","isCorrect","includes","handleDropCoinBag","answerIndex","coinBagId","prev","newAllocations","_Fragment","celebration","buttonWrapper","restartButton","onClick","restartGame","prizeFundTitle","submitButton","disabled","every","handleSubmit","correctAnswerIndex","findIndex","betPerBag","winnings","filter","length","totalLostFromIncorrectBets","newPrizePot","Math","ceil","gameArea","concat","answerOption","handleSelectOption"],"sourceRoot":""}