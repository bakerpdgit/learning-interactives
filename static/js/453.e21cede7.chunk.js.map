{"version":3,"file":"static/js/453.e21cede7.chunk.js","mappings":"qLACA,QAAkC,kCAAlC,EAAuF,mCAAvF,EAAqI,2B,aCiIrI,QA5HA,WACE,MAAOA,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,OAC1BC,EAAUC,IAAeF,EAAAA,EAAAA,UAAS,OACnC,YAAEG,IAAgBC,EAAAA,EAAAA,MACjBC,EAASC,IAAcN,EAAAA,EAAAA,UAAS,OAChCO,EAAcC,IAAmBR,EAAAA,EAAAA,WAAS,GAE3CS,GAAUC,EAAAA,EAAAA,MACVC,GAAWC,EAAAA,EAAAA,MA6DXC,EAAeC,IACnB,MAAMC,EAAQD,EAAYE,MAAM,MAE1BC,EAAeF,EAAMG,MAAMC,GAASA,EAAKC,SAAS,mBAEpDH,GACFd,GAAYkB,EAAAA,EAAAA,IAAeJ,EAAaK,QAAQ,gBAAiB,MAGnE,MAAMC,EAAeR,EAAMG,MACxBC,IACEA,EAAKC,SAAS,cACbD,EAAKC,SAAS,6BAChBD,EAAKC,SAAS,UAGdG,GACFjB,EAAWiB,GACXf,GAAgB,IAEhBN,EAAY,uBACd,EAGF,OACEsB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,mBAAkBF,SAAC,4BACjCC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,eAAcF,SAAC,kDAG5BF,EAAAA,EAAAA,MAAA,OAAKI,UAAS,wBAAAC,OAA0BC,GAAyBJ,SAAA,EAC/DC,EAAAA,EAAAA,KAAA,SACEI,KAAK,OACLC,SA5FwBC,IAC9BzB,GAAgB,GAChBT,EAAQkC,EAAMC,OAAOC,MAAM,IAC3BjC,EAAY,KAAK,EA0FXkC,MAAO,CAAEC,QAAS,QAClBC,GAAG,gBAELX,EAAAA,EAAAA,KAAA,SAAOY,QAAQ,aAAaX,UAAWE,EAAwBJ,SAAC,gBAG/D5B,IACC6B,EAAAA,EAAAA,KAAA,OAAKC,UAAWE,EAAgBJ,SAC7BzB,GAAsBH,EAAK0C,OAG/B1C,IAAQ6B,EAAAA,EAAAA,KAAA,UAAQc,QAxDEC,KACvB,GAAI5C,EAAM,CACR,MAAM6C,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAAUZ,GACxB,MAAMnB,EAAcmB,EAAMC,OAAOY,OACjCjC,EAAYC,EACd,EACA6B,EAAOI,WAAWjD,EACpB,GAgD+C4B,SAAC,eAC5CF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CACGnB,IAAgBoB,EAAAA,EAAAA,KAAA,UAAQc,QA/EXO,KACpB,MACMC,EADM,IAAIC,IAAI7C,GACD8C,aAEbC,EAAWH,EAAOI,IAAI,OACtBC,EAAUL,EAAOI,IAAI,MAE3B,GAAID,EAAU,CACZ,MAAMH,EAAS,IAAIM,gBAAgB,CACjCjB,GAAIgB,EACJE,IAAKJ,IAEP3C,EAAQa,QAAQ,CACdmC,SAAU9C,EAAS8C,SACnBC,OAAQT,EAAOU,YAEnB,MACEzD,EAAY,uBACd,EA6DsDwB,SAAC,QAChDnB,IAAgBoB,EAAAA,EAAAA,KAAA,UAAQc,QArGVmB,KACrB,MACMX,EADM,IAAIC,IAAI7C,GACD8C,aAEbC,EAAWH,EAAOI,IAAI,OACtBC,EAAUL,EAAOI,IAAI,MAE3B,GAAID,EAAU,CACZ,MAAMH,EAAS,IAAIM,gBAAgB,CACjCjB,GAAIgB,EACJO,QAAST,IAEX3C,EAAQa,QAAQ,CACdmC,SAAU9C,EAAS8C,SACnBC,OAAQT,EAAOU,YAEnB,MACEzD,EAAY,uBACd,EAmFuDwB,SAAC,iBAK5D,C","sources":["webpack://my-react-app/./src/components/Uploader.module.css?1701","components/Uploader.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"uploadContainer\":\"Uploader_uploadContainer__QFnmo\",\"customFileUpload\":\"Uploader_customFileUpload__LKWMb\",\"fileName\":\"Uploader_fileName__vNWWI\"};","import React, { useState } from \"react\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport { useEditContext } from \"../EditContext\";\nimport { decompressText } from \"./TextInput\";\nimport styles from \"./Uploader.module.css\";\n\nfunction Uploader() {\n  const [file, setFile] = useState(null);\n  const [errorMsg, setErrorMsg] = useState(null);\n  const { setTextData } = useEditContext();\n  const [urlLine, setUrlLine] = useState(null);\n  const [fileUploaded, setFileUploaded] = useState(false);\n\n  const history = useHistory();\n  const location = useLocation();\n\n  const handleUploadFileChange = (event) => {\n    setFileUploaded(false);\n    setFile(event.target.files[0]);\n    setErrorMsg(null);\n  };\n\n  const handleFileEdit = () => {\n    const url = new URL(urlLine);\n    const params = url.searchParams;\n    // Retrieve the value of 'txt' parameter\n    const txtValue = params.get(\"txt\");\n    const idValue = params.get(\"id\");\n\n    if (txtValue) {\n      const params = new URLSearchParams({\n        id: idValue,\n        txtedit: txtValue,\n      });\n      history.replace({\n        pathname: location.pathname,\n        search: params.toString(),\n      });\n    } else {\n      setErrorMsg(\"Invalid file content\");\n    }\n  };\n\n  const handleFileRun = () => {\n    const url = new URL(urlLine);\n    const params = url.searchParams;\n    // Retrieve the value of 'txt' parameter\n    const txtValue = params.get(\"txt\");\n    const idValue = params.get(\"id\");\n\n    if (txtValue) {\n      const params = new URLSearchParams({\n        id: idValue,\n        txt: txtValue,\n      });\n      history.replace({\n        pathname: location.pathname,\n        search: params.toString(),\n      });\n    } else {\n      setErrorMsg(\"Invalid file content\");\n    }\n  };\n\n  const handleFileUpload = () => {\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = function (event) {\n        const fileContent = event.target.result;\n        extractInfo(fileContent);\n      };\n      reader.readAsText(file);\n    }\n  };\n\n  const extractInfo = (fileContent) => {\n    const lines = fileContent.split(\"\\n\");\n\n    const textDataLine = lines.find((line) => line.includes(\"ActivityData:\"));\n\n    if (textDataLine) {\n      setTextData(decompressText(textDataLine.replace(\"ActivityData:\", \"\")));\n    }\n\n    const urlLineFound = lines.find(\n      (line) =>\n        (line.includes(\"localhost\") ||\n          line.includes(\"classinteractives.co.uk\")) &&\n        line.includes(\"?id=\")\n    );\n\n    if (urlLineFound) {\n      setUrlLine(urlLineFound);\n      setFileUploaded(true);\n    } else {\n      setErrorMsg(\"Invalid file content\");\n    }\n  };\n\n  return (\n    <>\n      <h1 className=\"interactiveTitle\">Load Saved Interactive</h1>\n      <p className=\"instructions\">\n        Browse to the saved interactive .txt file...\n      </p>\n      <div className={`interactiveContainer ${styles.uploadContainer}`}>\n        <input\n          type=\"file\"\n          onChange={handleUploadFileChange}\n          style={{ display: \"none\" }} // Hide the input\n          id=\"fileUpload\" // Add an id for referencing\n        />\n        <label htmlFor=\"fileUpload\" className={styles.customFileUpload}>\n          Choose File\n        </label>\n        {file && (\n          <div className={styles.fileName}>\n            {errorMsg ? errorMsg : file.name}\n          </div>\n        )}\n        {file && <button onClick={handleFileUpload}>Load File</button>}\n        <div>\n          {fileUploaded && <button onClick={handleFileRun}>Run</button>}\n          {fileUploaded && <button onClick={handleFileEdit}>Edit</button>}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Uploader;\n"],"names":["file","setFile","useState","errorMsg","setErrorMsg","setTextData","useEditContext","urlLine","setUrlLine","fileUploaded","setFileUploaded","history","useHistory","location","useLocation","extractInfo","fileContent","lines","split","textDataLine","find","line","includes","decompressText","replace","urlLineFound","_jsxs","_Fragment","children","_jsx","className","concat","styles","type","onChange","event","target","files","style","display","id","htmlFor","name","onClick","handleFileUpload","reader","FileReader","onload","result","readAsText","handleFileRun","params","URL","searchParams","txtValue","get","idValue","URLSearchParams","txt","pathname","search","toString","handleFileEdit","txtedit"],"sourceRoot":""}