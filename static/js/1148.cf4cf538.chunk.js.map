{"version":3,"file":"static/js/1148.cf4cf538.chunk.js","mappings":"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","sources":["components/BuildingBlocks.js","components/MathComponent.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./BuildingBlocks.css\";\nimport MathComponent from \"./MathComponent.js\";\nimport Draggable from \"react-draggable\";\nimport InputModal from \"./InputModal\";\n\nfunction InteractiveTemplate({ text }) {\n  const [lines, setLines] = useState(text.split(\"\\n\")); // Convert lines to state\n  const [highestZIndex, setHighestZIndex] = useState(0);\n  const [configured, setConfigured] = useState(false);\n  const [inputMessage, setInputMessage] = useState({});\n\n  const handleDoubleClick = () => {\n    setHighestZIndex(highestZIndex + 1);\n    return highestZIndex + 1;\n  };\n\n  // Function to make a box resizable\n  const makeBoxResizable = (boxId) => {\n    const box = document.getElementById(boxId);\n    const resizers = box.querySelectorAll(\".resize-icon\");\n    let currentResizer;\n\n    // Handle resizing\n    resizers.forEach((resizer) => {\n      resizer.addEventListener(\"mousedown\", (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        currentResizer = e.target;\n        document.addEventListener(\"mousemove\", handleMouseMove);\n        document.addEventListener(\"mouseup\", () => {\n          document.removeEventListener(\"mousemove\", handleMouseMove);\n        });\n      });\n    });\n\n    const handleMouseMove = (e) => {\n      const rect = box.getBoundingClientRect();\n      let newWidth = e.clientX - rect.x;\n      let newHeight = e.clientY - rect.y;\n      if (currentResizer.classList.contains(\"resize-bottom\")) {\n        box.style.height = newHeight + \"px\";\n      } else if (currentResizer.classList.contains(\"resize-right\")) {\n        box.style.width = newWidth + \"px\";\n      }\n    };\n  };\n\n  // Function to place boxes randomly with no overlap\n  const placeBoxesRandomly = useRef((gameArea, boxes) => {\n    const gameAreaRect = gameArea.getBoundingClientRect();\n    boxes.forEach((box) => {\n      makeBoxResizable(box.id);\n      let overlap = true;\n      while (overlap) {\n        const randomX = Math.random() * (gameAreaRect.width - box.offsetWidth);\n        const randomY =\n          Math.random() * (gameAreaRect.height - box.offsetHeight);\n        box.style.left = randomX + \"px\";\n        box.style.top = randomY + \"px\";\n        overlap = checkOverlap(box, boxes);\n      }\n    });\n  });\n\n  // Function to check if a box overlaps with any other boxes\n  const checkOverlap = (box, boxes) => {\n    const rect1 = box.getBoundingClientRect();\n    for (const otherBox of boxes) {\n      if (box === otherBox) continue;\n      const rect2 = otherBox.getBoundingClientRect();\n      if (\n        rect1.x < rect2.x + rect2.width &&\n        rect1.x + rect1.width > rect2.x &&\n        rect1.y < rect2.y + rect2.height &&\n        rect1.y + rect1.height > rect2.y\n      ) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  const handleAddItem = () => {\n    setInputMessage({\n      prompt: \"Please enter text for the new item:\",\n      value: \"\",\n    });\n  };\n\n  const handleInputSubmit = (userInput) => {\n    if (userInput) {\n      setLines((prevLines) => [...prevLines, userInput]);\n    }\n    setInputMessage({}); // Clear inputMessage to close the modal\n  };\n\n  const handleRightClick = (index, e) => {\n    e.preventDefault(); // Prevent the default context menu from showing\n    setLines((prevLines) =>\n      prevLines.map((line, i) => (i === index ? \"\" : line))\n    );\n  };\n\n  useEffect(() => {\n    // Add event listener for window resize\n    const handleResize = () => {\n      const gameArea = document.querySelector(\".interactiveContainer\");\n      const boxes = document.querySelectorAll(\".draggableBox\");\n\n      if (!gameArea || !boxes.length) return; // Ensure elements exist\n\n      // Re-randomize the position of all blocks on resize\n      placeBoxesRandomly.current(gameArea, boxes);\n    };\n\n    const gameArea = document.querySelector(\".interactiveContainer\");\n    const boxes = document.querySelectorAll(\".draggableBox\");\n\n    if (configured) {\n      if (boxes.length) {\n        placeBoxesRandomly.current(gameArea, [boxes[boxes.length - 1]]);\n      }\n    } else {\n      placeBoxesRandomly.current(gameArea, boxes);\n      setConfigured(true);\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, [configured]); // Make sure the dependencies are correctly set\n\n  return (\n    <>\n      {inputMessage.prompt && (\n        <InputModal\n          title={inputMessage.prompt}\n          placeholder=\"Type here...\"\n          value={inputMessage.value}\n          onSubmit={handleInputSubmit}\n          onClose={() => setInputMessage({})}\n        />\n      )}\n\n      <div className=\"interactiveContainer\">\n        <button onClick={handleAddItem} className=\"addItem\">\n          Add item\n        </button>\n        {lines.map(\n          (line, index) =>\n            line !== \"\" && (\n              <Draggable key={index}>\n                <div\n                  className=\"draggableBox\"\n                  id={`box-${index}`}\n                  onContextMenu={(e) => handleRightClick(index, e)}\n                  onDoubleClick={() => {\n                    const newZIndex = handleDoubleClick();\n                    document.getElementById(`box-${index}`).style.zIndex =\n                      newZIndex;\n                  }}\n                >\n                  <div className=\"resize-icon resize-bottom\"></div>\n                  <div className=\"resize-icon resize-right\"></div>\n                  <MathComponent text={line} renderNewLines={true} />\n                </div>\n              </Draggable>\n            )\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default InteractiveTemplate;\n","import { InlineMath } from \"react-katex\";\n\nfunction parseAndRenderMath(text) {\n  const prefix = Math.random().toString(36).substring(2, 10); // Generate an 8-character random string\n\n  // Split the text based on $$ delimiters\n  const segments = text.split(\"$$\");\n  const elements = [];\n\n  segments.forEach((segment, index) => {\n    if (index % 2 === 1) {\n      // Odd-indexed segments are LaTeX (since they are enclosed between $$ delimiters)\n      elements.push(\n        <InlineMath key={`MCIM-${prefix}-${index}`} math={segment} />\n      );\n    } else {\n      elements.push(<span key={`MCSP-${prefix}-${index}`}>{segment}</span>);\n    }\n  });\n\n  return elements;\n}\n\nconst renderWithNewLines = (text) => {\n  return text.replace(/\\\\n/g, \"\\n\");\n};\n\nfunction MathComponent({ text, renderNewLines = false }) {\n  if (renderNewLines) {\n    text = renderWithNewLines(text);\n  }\n\n  return (\n    <div\n      style={{\n        whiteSpace:\n          text.includes(\"\\n\") && renderNewLines ? \"pre-wrap\" : \"normal\",\n        marginTop: text.includes(\"$$\") ? \"0.5em\" : \"0\",\n      }}\n    >\n      {parseAndRenderMath(text)}\n    </div>\n  );\n}\n\nexport default MathComponent;\n"],"names":["_ref","text","lines","setLines","useState","split","highestZIndex","setHighestZIndex","configured","setConfigured","inputMessage","setInputMessage","placeBoxesRandomly","useRef","gameArea","boxes","gameAreaRect","getBoundingClientRect","forEach","box","boxId","document","getElementById","currentResizer","querySelectorAll","resizer","addEventListener","e","stopPropagation","preventDefault","target","handleMouseMove","removeEventListener","rect","newWidth","clientX","x","newHeight","clientY","y","classList","contains","style","height","width","makeBoxResizable","id","overlap","randomX","Math","random","offsetWidth","randomY","offsetHeight","left","top","checkOverlap","rect1","otherBox","rect2","useEffect","handleResize","querySelector","length","current","window","_jsxs","_Fragment","children","prompt","_jsx","InputModal","title","placeholder","value","onSubmit","userInput","prevLines","onClose","className","onClick","handleAddItem","map","line","index","Draggable","concat","onContextMenu","handleRightClick","i","onDoubleClick","newZIndex","zIndex","MathComponent","renderNewLines","parseAndRenderMath","prefix","toString","substring","segments","elements","segment","push","InlineMath","math","replace","renderWithNewLines","whiteSpace","includes","marginTop"],"sourceRoot":""}