{"version":3,"file":"static/js/1832.a5a2acc9.chunk.js","mappings":"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","sources":["webpack://class-interactives/./src/components/DiamondNine.module.css?90be","components/DiamondNine.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"interactiveSubTitle\":\"DiamondNine_interactiveSubTitle__ZB2XD\",\"GameArea\":\"DiamondNine_GameArea__BFP+u\",\"diamondFormation\":\"DiamondNine_diamondFormation__V3l0v\",\"diamondRow\":\"DiamondNine_diamondRow__Dsana\",\"sideCollection\":\"DiamondNine_sideCollection__lFuK+\",\"tile\":\"DiamondNine_tile__Xvr-v\",\"diamondTile\":\"DiamondNine_diamondTile__8um6O\",\"selected\":\"DiamondNine_selected__USwYF\",\"editIcon\":\"DiamondNine_editIcon__racAn\"};","import React, { useState, useEffect } from \"react\";\nimport styles from \"./DiamondNine.module.css\";\nimport InputModal from \"./InputModal\";\n\nconst DiamondNine = ({ text }) => {\n  const [title, setTitle] = useState(\"\");\n  const [tiles, setTiles] = useState([]);\n  const [selectedTile, setSelectedTile] = useState(null);\n  const [editingEnabled, setEditingEnabled] = useState(false);\n  const [inputMessage, setInputMessage] = useState({});\n\n  useEffect(() => {\n    const [optionsLine, titleLine, ...contentLines] = text\n      .split(\"\\n\")\n      .filter(Boolean);\n    const options = {};\n\n    if (optionsLine.startsWith(\"OPTIONS:\")) {\n      optionsLine\n        .replace(\"OPTIONS:\", \"\")\n        .split(\",\")\n        .forEach((option) => {\n          const [key, value] = option.split(\"=\");\n          options[key] = value;\n        });\n    }\n\n    const initialTiles = contentLines.map((line, index) => ({\n      id: index,\n      content: line,\n      row: -1,\n      column: -1,\n      isPlaceholder: false,\n    }));\n\n    const placeholderTiles = [\n      {\n        id: initialTiles.length,\n        content: \"\",\n        row: 0,\n        column: 0,\n        isPlaceholder: true,\n      },\n      {\n        id: initialTiles.length + 1,\n        content: \"\",\n        row: 1,\n        column: 0,\n        isPlaceholder: true,\n      },\n      {\n        id: initialTiles.length + 2,\n        content: \"\",\n        row: 1,\n        column: 1,\n        isPlaceholder: true,\n      },\n      {\n        id: initialTiles.length + 3,\n        content: \"\",\n        row: 2,\n        column: 0,\n        isPlaceholder: true,\n      },\n      {\n        id: initialTiles.length + 4,\n        content: \"\",\n        row: 2,\n        column: 1,\n        isPlaceholder: true,\n      },\n      {\n        id: initialTiles.length + 5,\n        content: \"\",\n        row: 2,\n        column: 2,\n        isPlaceholder: true,\n      },\n      {\n        id: initialTiles.length + 6,\n        content: \"\",\n        row: 3,\n        column: 0,\n        isPlaceholder: true,\n      },\n      {\n        id: initialTiles.length + 7,\n        content: \"\",\n        row: 3,\n        column: 1,\n        isPlaceholder: true,\n      },\n      {\n        id: initialTiles.length + 8,\n        content: \"\",\n        row: 4,\n        column: 0,\n        isPlaceholder: true,\n      },\n    ];\n\n    setTitle(titleLine);\n    setTiles([...initialTiles, ...placeholderTiles]);\n    setEditingEnabled(options.editing.toLowerCase() === \"yes\");\n  }, [text]);\n\n  const handleSelectTile = (id) => {\n    setSelectedTile(selectedTile === id ? null : id);\n  };\n\n  const handleEditClick = (e, tile) => {\n    e.stopPropagation();\n    setInputMessage({\n      prompt: \"Enter new text:\",\n      value: tile.content,\n      tileId: tile.id,\n    });\n  };\n\n  const handleInputSubmit = (newContent) => {\n    setTiles((prevTiles) =>\n      prevTiles.map((t) =>\n        t.id === inputMessage.tileId ? { ...t, content: newContent } : t\n      )\n    );\n    setInputMessage({}); // Clear the inputMessage to close the modal\n  };\n\n  const handleTileClick = (id) => {\n    if (selectedTile === null) {\n      handleSelectTile(id);\n      return;\n    }\n\n    setTiles((prevTiles) => {\n      // Clone the previous tiles array for immutability\n      const newTiles = prevTiles.map((tile) => ({ ...tile }));\n\n      // Find the indexes\n      const selectedIndex = newTiles.findIndex(\n        (tile) => tile.id === selectedTile\n      );\n      const targetIndex = newTiles.findIndex((tile) => tile.id === id);\n\n      // Ensure both tiles were found\n      if (selectedIndex === -1 || targetIndex === -1) return prevTiles; // Return original state if something went wrong\n\n      const selectedTileObj = newTiles[selectedIndex];\n      const targetTileObj = newTiles[targetIndex];\n\n      const tempRow = selectedTileObj.row;\n      const tempColumn = selectedTileObj.column;\n      selectedTileObj.row = targetTileObj.row;\n      selectedTileObj.column = targetTileObj.column;\n      targetTileObj.row = tempRow;\n      targetTileObj.column = tempColumn;\n\n      return newTiles;\n    });\n\n    setSelectedTile(null); // Deselect the tile after placing it\n  };\n\n  const renderTile = (tile) => {\n    if (!tile) {\n      return null;\n    }\n\n    const isInSidebar = tile.row === -1 && tile.column === -1;\n\n    return (\n      <div\n        key={tile.id}\n        className={`${isInSidebar ? styles.tile : styles.diamondTile} ${\n          selectedTile === tile.id ? styles.selected : \"\"\n        }`}\n        onClick={() => handleTileClick(tile.id)}\n      >\n        {tile.content}\n        {editingEnabled && (\n          <span\n            className={styles.editIcon}\n            onClick={(e) => handleEditClick(e, tile)}\n          >\n            &#9998;\n          </span>\n        )}\n      </div>\n    );\n  };\n\n  const renderDiamondRows = () => {\n    const rows = [1, 2, 3, 2, 1];\n    return rows.map((rowCount, rowIndex) => (\n      <div key={rowIndex} className={styles.diamondRow}>\n        {Array.from({ length: rowCount }).map((_, columnIndex) => {\n          const tile = tiles.find(\n            (tile) => tile.row === rowIndex && tile.column === columnIndex\n          );\n          return renderTile(tile);\n        })}\n      </div>\n    ));\n  };\n\n  return (\n    <>\n      {inputMessage.prompt && (\n        <InputModal\n          title={inputMessage.prompt}\n          placeholder=\"Type here...\"\n          value={inputMessage.value}\n          onSubmit={handleInputSubmit}\n          onClose={() => setInputMessage({})}\n        />\n      )}\n      <h1 className={styles.interactiveSubTitle}>{title}</h1>\n      <div className={styles.GameArea}>\n        <div className={styles.diamondFormation}>{renderDiamondRows()}</div>\n        <div className={styles.sideCollection}>\n          {tiles\n            .filter((tile) => tile.row === -1 && tile.column === -1)\n            .map(renderTile)}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default DiamondNine;\n"],"names":["_ref","text","title","setTitle","useState","tiles","setTiles","selectedTile","setSelectedTile","editingEnabled","setEditingEnabled","inputMessage","setInputMessage","useEffect","optionsLine","titleLine","contentLines","split","filter","Boolean","options","startsWith","replace","forEach","option","key","value","initialTiles","map","line","index","id","content","row","column","isPlaceholder","placeholderTiles","length","editing","toLowerCase","handleTileClick","prevTiles","newTiles","tile","selectedIndex","findIndex","targetIndex","selectedTileObj","targetTileObj","tempRow","tempColumn","handleSelectTile","renderTile","isInSidebar","_jsxs","className","concat","styles","onClick","children","_jsx","e","handleEditClick","stopPropagation","prompt","tileId","_Fragment","InputModal","placeholder","onSubmit","newContent","t","onClose","rowCount","rowIndex","Array","from","_","columnIndex","find"],"sourceRoot":""}