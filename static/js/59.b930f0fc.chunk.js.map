{"version":3,"file":"static/js/59.b930f0fc.chunk.js","mappings":"sJACA,SAAgB,aAAe,+BAA+B,aAAe,+BAA+B,MAAQ,wBAAwB,eAAiB,iCAAiC,SAAW,2BAA2B,QAAU,0BAA0B,WAAa,6BAA6B,YAAc,8BAA8B,SAAW,4B,aCEzW,MAAMA,EAAWC,IAAmD,IAAlD,KAAEC,EAAI,mBAAEC,EAAkB,eAAEC,GAAgBH,EAC5D,MAAOI,EAAiBC,IAAsBC,EAAAA,EAAAA,UAAS,IAChDC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,IACpCG,EAAgBC,IAAqBJ,EAAAA,EAAAA,WAAS,GAwBrD,OACEK,EAAAA,EAAAA,MAAA,OACEC,UAAS,GAAAC,OAAKC,EAAOC,SAAQ,KAAAF,OAC3BJ,EAAiBK,EAAOE,WAAa,GAAE,KAAAH,OACrCN,EAAYO,EAAOG,QAAU,IAAKC,SAAA,CAErCX,EACGN,EACAA,EAAKkB,MAAM,EAAGf,GACd,IAAIgB,OAAOnB,EAAKoB,OAASjB,IAC7BkB,EAAAA,EAAAA,KAAA,OAAKV,UAAWE,EAAOS,MAAML,UACzBX,IACAI,EAAAA,EAAAA,MAAAa,EAAAA,SAAA,CAAAN,SAAA,EACEI,EAAAA,EAAAA,KAAA,UACEV,UAAWE,EAAOW,eAClBC,QArCmBC,KACzBvB,EAAkBH,EAAKoB,SACzBnB,EAAmB,EAAGE,EAAkB,IAAMH,EAAKoB,QACnDhB,GAAoBuB,GAASA,EAAO,IACtC,EAiC0CV,SACjC,kBAGDI,EAAAA,EAAAA,KAAA,UAAQV,UAAWE,EAAOW,eAAgBC,QAlChCG,KAClB,MAAMC,EAAQC,OAAOC,OAAO,yBACxBF,GAASA,EAAMG,gBAAkBhC,EAAKgC,eACxCzB,GAAa,GACbH,EAAmBJ,EAAKoB,QACxBlB,MAGAO,GAAkB,GAClBwB,YAAW,KACTxB,GAAkB,EAAM,GACvB,KACL,EAsBuEQ,SAAC,wBAMlE,EAqDV,EAjDiBiB,IAAe,IAAd,KAAEC,GAAMD,EACxB,MAAOE,EAAYC,IAAiBhC,EAAAA,EAAAA,UAAS,IACtCiC,EAAOC,GAASJ,EAAKK,MAAM,OAAQ,GACpCC,EAAWF,EAAMC,MAAM,OAEtBE,EAAOC,IAAYtC,EAAAA,EAAAA,UACxBoC,EAASG,QAAO,CAACC,EAAK7C,IAAS6C,EAAM7C,EAAKoB,OAAS,GAAG,IAGlDM,EAAyBA,CAACoB,EAAWC,KACzCJ,GAAUK,GAAcA,EAAYF,IAChCC,GACFV,GAAeV,GAASA,EAAO,GACjC,EAGIsB,EAAqBA,KACzBZ,GAAeV,GAASA,EAAO,GAAE,EAGnC,OACEjB,EAAAA,EAAAA,MAAAa,EAAAA,SAAA,CAAAN,SAAA,EACEI,EAAAA,EAAAA,KAAA,MAAAJ,SAAKqB,KACLjB,EAAAA,EAAAA,KAAA,KAAGV,UAAWE,EAAOqC,aAAajC,SAAC,mHAInCP,EAAAA,EAAAA,MAAA,OAAKC,UAAWE,EAAO6B,MAAMzB,SAAA,CAC1BmB,IAAeK,EAASrB,SAAUC,EAAAA,EAAAA,KAAAE,EAAAA,SAAA,CAAAN,SAAE,aAAY,WAASyB,MAE5DhC,EAAAA,EAAAA,MAAA,OAAKC,UAAWE,EAAOsC,aAAalC,SAAA,CACjCmB,IAAeK,EAASrB,SACvBC,EAAAA,EAAAA,KAAA,OAAKV,UAAWE,EAAOuC,YAAYnC,SAAC,iBAGrCwB,EAASY,KAAI,CAACrD,EAAMsD,KACnBjC,EAAAA,EAAAA,KAACvB,EAAQ,CAEPE,KAAMA,EACNuD,UAAWD,EACXrD,mBAAoByB,EACpBxB,eAAgB+C,GAJXK,UAQV,C","sources":["webpack://my-react-app/./src/components/WordFind.module.css?88b4","components/WordFind.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"GameAreaGrid\":\"WordFind_GameAreaGrid__QkxoS\",\"instructions\":\"WordFind_instructions__TPHDC\",\"score\":\"WordFind_score__+-k8t\",\"wordFindButton\":\"WordFind_wordFindButton__Dr5KK\",\"wordTile\":\"WordFind_wordTile__CYgQI\",\"correct\":\"WordFind_correct__Q+bCz\",\"wrongGuess\":\"WordFind_wrongGuess__wNLHR\",\"celebration\":\"WordFind_celebration__vAu4G\",\"slideOut\":\"WordFind_slideOut__EmIeH\"};","import React, { useState } from \"react\";\r\nimport styles from \"./WordFind.module.css\"; // Ensure you have corresponding CSS\r\n\r\nconst WordTile = ({ word, onRevealNextLetter, onCorrectGuess }) => {\r\n  const [revealedLetters, setRevealedLetters] = useState(1);\r\n  const [isCorrect, setIsCorrect] = useState(false); // Track if the guess was correct\r\n  const [showWrongGuess, setShowWrongGuess] = useState(false); // New state for wrong guess feedback\r\n\r\n  const handleRevealNextLetter = () => {\r\n    if (revealedLetters < word.length) {\r\n      onRevealNextLetter(1, revealedLetters + 1 === word.length); // Assuming this reduces the potential score by 1\r\n      setRevealedLetters((prev) => prev + 1);\r\n    }\r\n  };\r\n\r\n  const handleGuess = () => {\r\n    const guess = window.prompt(\"Enter the full word: \");\r\n    if (guess && guess.toLowerCase() === word.toLowerCase()) {\r\n      setIsCorrect(true); // This word tile now knows it's correctly guessed\r\n      setRevealedLetters(word.length); // Reveal the whole word\r\n      onCorrectGuess();\r\n    } else {\r\n      // If guess is incorrect, show red border\r\n      setShowWrongGuess(true);\r\n      setTimeout(() => {\r\n        setShowWrongGuess(false); // Remove red border after 0.25 seconds\r\n      }, 500);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`${styles.wordTile} ${\r\n        showWrongGuess ? styles.wrongGuess : \"\"\r\n      } ${isCorrect ? styles.correct : \"\"}`}\r\n    >\r\n      {isCorrect\r\n        ? word\r\n        : word.slice(0, revealedLetters) +\r\n          \"_\".repeat(word.length - revealedLetters)}\r\n      <div className={styles.icons}>\r\n        {!isCorrect && (\r\n          <>\r\n            <button\r\n              className={styles.wordFindButton}\r\n              onClick={handleRevealNextLetter}\r\n            >\r\n              üîç\r\n            </button>\r\n            <button className={styles.wordFindButton} onClick={handleGuess}>\r\n              ‚úèÔ∏è\r\n            </button>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst WordFind = ({ text }) => {\r\n  const [wordsEnded, setWordsEnded] = useState(0); // Count of correctly guessed words\r\n  const [topic, words] = text.split(\"\\n\\n\", 2);\r\n  const wordList = words.split(\"\\n\");\r\n\r\n  const [score, setScore] = useState(\r\n    wordList.reduce((acc, word) => acc + word.length - 1, 0)\r\n  );\r\n\r\n  const handleRevealNextLetter = (decrement, isFinished) => {\r\n    setScore((prevScore) => prevScore - decrement);\r\n    if (isFinished) {\r\n      setWordsEnded((prev) => prev + 1);\r\n    }\r\n  };\r\n\r\n  const handleCorrectGuess = () => {\r\n    setWordsEnded((prev) => prev + 1);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>{topic}</h1>\r\n      <p className={styles.instructions}>\r\n        Guess all the words related to the above topic with as few letters\r\n        needed as possible to get your best score.\r\n      </p>\r\n      <div className={styles.score}>\r\n        {wordsEnded !== wordList.length && <>Possible</>} Score: {score}\r\n      </div>\r\n      <div className={styles.GameAreaGrid}>\r\n        {wordsEnded === wordList.length && (\r\n          <div className={styles.celebration}>üéÇ</div>\r\n        )}\r\n\r\n        {wordList.map((word, index) => (\r\n          <WordTile\r\n            key={index}\r\n            word={word}\r\n            wordIndex={index}\r\n            onRevealNextLetter={handleRevealNextLetter}\r\n            onCorrectGuess={handleCorrectGuess}\r\n          />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WordFind;\r\n"],"names":["WordTile","_ref","word","onRevealNextLetter","onCorrectGuess","revealedLetters","setRevealedLetters","useState","isCorrect","setIsCorrect","showWrongGuess","setShowWrongGuess","_jsxs","className","concat","styles","wordTile","wrongGuess","correct","children","slice","repeat","length","_jsx","icons","_Fragment","wordFindButton","onClick","handleRevealNextLetter","prev","handleGuess","guess","window","prompt","toLowerCase","setTimeout","_ref2","text","wordsEnded","setWordsEnded","topic","words","split","wordList","score","setScore","reduce","acc","decrement","isFinished","prevScore","handleCorrectGuess","instructions","GameAreaGrid","celebration","map","index","wordIndex"],"sourceRoot":""}