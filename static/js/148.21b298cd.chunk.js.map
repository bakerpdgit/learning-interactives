{"version":3,"file":"static/js/148.21b298cd.chunk.js","mappings":"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","sources":["components/BuildingBlocks.js","components/MathComponent.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./BuildingBlocks.css\";\nimport MathComponent from \"./MathComponent.js\";\nimport Draggable from \"react-draggable\";\n\nfunction InteractiveTemplate({ text }) {\n  const [lines, setLines] = useState(text.split(\"\\n\")); // Convert lines to state\n  const [highestZIndex, setHighestZIndex] = useState(0);\n  const [configured, setConfigured] = useState(false);\n\n  const handleDoubleClick = () => {\n    setHighestZIndex(highestZIndex + 1);\n    return highestZIndex + 1;\n  };\n\n  // Function to make a box resizable\n  const makeBoxResizable = (boxId) => {\n    const box = document.getElementById(boxId);\n    const resizers = box.querySelectorAll(\".resize-icon\");\n    let currentResizer;\n\n    // Handle resizing\n    resizers.forEach((resizer) => {\n      resizer.addEventListener(\"mousedown\", (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        currentResizer = e.target;\n        document.addEventListener(\"mousemove\", handleMouseMove);\n        document.addEventListener(\"mouseup\", () => {\n          document.removeEventListener(\"mousemove\", handleMouseMove);\n        });\n      });\n    });\n\n    const handleMouseMove = (e) => {\n      const rect = box.getBoundingClientRect();\n      let newWidth = e.clientX - rect.x;\n      let newHeight = e.clientY - rect.y;\n      if (currentResizer.classList.contains(\"resize-bottom\")) {\n        box.style.height = newHeight + \"px\";\n      } else if (currentResizer.classList.contains(\"resize-right\")) {\n        box.style.width = newWidth + \"px\";\n      }\n    };\n  };\n\n  // Function to place boxes randomly with no overlap\n  const placeBoxesRandomly = (gameArea, boxes) => {\n    const gameAreaRect = gameArea.getBoundingClientRect();\n    boxes.forEach((box) => {\n      makeBoxResizable(box.id);\n      let overlap = true;\n      while (overlap) {\n        const randomX = Math.random() * (gameAreaRect.width - box.offsetWidth);\n        const randomY =\n          Math.random() * (gameAreaRect.height - box.offsetHeight);\n        box.style.left = randomX + \"px\";\n        box.style.top = randomY + \"px\";\n        overlap = checkOverlap(box, boxes);\n      }\n    });\n  };\n\n  // Function to check if a box overlaps with any other boxes\n  const checkOverlap = (box, boxes) => {\n    const rect1 = box.getBoundingClientRect();\n    for (const otherBox of boxes) {\n      if (box === otherBox) continue;\n      const rect2 = otherBox.getBoundingClientRect();\n      if (\n        rect1.x < rect2.x + rect2.width &&\n        rect1.x + rect1.width > rect2.x &&\n        rect1.y < rect2.y + rect2.height &&\n        rect1.y + rect1.height > rect2.y\n      ) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  const handleAddItem = () => {\n    const userInput = window.prompt(\"Please enter text for the new item:\");\n    // Check if user provided a value and didn't cancel the prompt\n    if (userInput) {\n      setLines((prevLines) => [...prevLines, userInput]); // Add new line to lines state\n    }\n  };\n\n  useEffect(() => {\n    const gameArea = document.querySelector(\".interactiveContainer\");\n    const boxes = document.querySelectorAll(\".draggableBox\");\n    if (configured) {\n      placeBoxesRandomly(gameArea, [boxes[boxes.length - 1]]);\n    } else {\n      placeBoxesRandomly(gameArea, boxes);\n      setConfigured(true);\n    }\n\n    // Add event listener for window resize\n    const handleResize = () => {\n      // Re-randomize the position of all blocks on resize\n      placeBoxesRandomly(gameArea, boxes);\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n\n    // Cleanup to remove event listener on component unmount\n    return () => window.removeEventListener(\"resize\", handleResize);\n\n    // eslint-disable-next-line\n  }, [lines, configured]);\n\n  return (\n    <>\n      <h1 className=\"interactiveTitle\">Building Blocks</h1>\n      <p className=\"instructions\">\n        Double-click a block to bring-it in front of any other blocks.\n      </p>\n\n      <div className=\"interactiveContainer\">\n        <button onClick={handleAddItem} className=\"addItem\">\n          Add item\n        </button>\n        {lines.map((line, index) => (\n          <Draggable key={index}>\n            <div\n              className=\"draggableBox\"\n              id={`box-${index}`}\n              onDoubleClick={() => {\n                const newZIndex = handleDoubleClick();\n                document.getElementById(`box-${index}`).style.zIndex =\n                  newZIndex;\n              }}\n            >\n              <div className=\"resize-icon resize-bottom\"></div>\n              <div className=\"resize-icon resize-right\"></div>\n              <MathComponent text={line} renderNewLines={true} />\n            </div>\n          </Draggable>\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport default InteractiveTemplate;\n","import { InlineMath } from \"react-katex\";\r\n\r\nfunction parseAndRenderMath(text) {\r\n  // Split the text based on $$ delimiters\r\n  const segments = text.split(\"$$\");\r\n  const elements = [];\r\n\r\n  segments.forEach((segment, index) => {\r\n    if (index % 2 === 1) {\r\n      // Odd-indexed segments are LaTeX (since they are enclosed between $$ delimiters)\r\n      elements.push(<InlineMath key={`MCIM${index}`} math={segment} />);\r\n    } else {\r\n      elements.push(<span key={`MCSP${index}`}>{segment}</span>);\r\n    }\r\n  });\r\n\r\n  return elements;\r\n}\r\n\r\nconst renderWithNewLines = (text) => {\r\n  return text.replace(/\\\\n/g, \"\\n\");\r\n};\r\n\r\nfunction MathComponent({ text, renderNewLines = false }) {\r\n  if (renderNewLines) {\r\n    text = renderWithNewLines(text);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        whiteSpace:\r\n          text.includes(\"\\n\") && renderNewLines ? \"pre-wrap\" : \"normal\",\r\n        marginTop: text.includes(\"$$\") ? \"0.5em\" : \"0\",\r\n      }}\r\n    >\r\n      {parseAndRenderMath(text)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MathComponent;\r\n"],"names":["_ref","text","lines","setLines","useState","split","highestZIndex","setHighestZIndex","configured","setConfigured","placeBoxesRandomly","gameArea","boxes","gameAreaRect","getBoundingClientRect","forEach","box","boxId","document","getElementById","currentResizer","querySelectorAll","resizer","addEventListener","e","stopPropagation","preventDefault","target","handleMouseMove","removeEventListener","rect","newWidth","clientX","x","newHeight","clientY","y","classList","contains","style","height","width","makeBoxResizable","id","overlap","randomX","Math","random","offsetWidth","randomY","offsetHeight","left","top","checkOverlap","rect1","otherBox","rect2","useEffect","querySelector","length","handleResize","window","_jsxs","_Fragment","children","_jsx","className","onClick","handleAddItem","userInput","prompt","prevLines","map","line","index","Draggable","concat","onDoubleClick","newZIndex","zIndex","MathComponent","renderNewLines","parseAndRenderMath","segments","elements","segment","push","InlineMath","math","replace","renderWithNewLines","whiteSpace","includes","marginTop"],"sourceRoot":""}