{"version":3,"file":"static/js/2893.caf1cde8.chunk.js","mappings":"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","sources":["webpack://class-interactives/./src/components/WordComplete.module.css?cf35","components/WordComplete.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wordCompleteContainer\":\"WordComplete_wordCompleteContainer__u+Avz\",\"progress\":\"WordComplete_progress__b4PP4\",\"textArea\":\"WordComplete_textArea__f1b5V\",\"missingInput\":\"WordComplete_missingInput__7-9rq\",\"missing\":\"WordComplete_missing__uEkvg\",\"wrong\":\"WordComplete_wrong__umdpK\",\"score\":\"WordComplete_score__fv7CU\",\"star\":\"WordComplete_star__CMzUW\",\"todo\":\"WordComplete_todo__QEmCF\",\"correctWordContainer\":\"WordComplete_correctWordContainer__aER0J\",\"mistakes\":\"WordComplete_mistakes__PBtRR\",\"celebration\":\"WordComplete_celebration__49W2H\",\"scale\":\"WordComplete_scale__GHkp6\",\"hide\":\"WordComplete_hide__BBDEa\",\"moveUpDown\":\"WordComplete_moveUpDown__9NHpI\"};","import React, { useState, useEffect } from \"react\";\nimport styles from \"./WordComplete.module.css\";\n\nfunction WordComplete({ text }) {\n  const initialWords = (text.match(/\\*([a-zA-Z0-9]+)(?=[ ,.?!]|$)/g) || []).map(\n    (w) => w.substring(1)\n  );\n  const [originalText, setOriginalText] = useState(text);\n  const [score, setScore] = useState(0);\n  const [originalTextIndex, setOriginalTextIndex] = useState(0);\n  const [displayedText, setDisplayedText] = useState(originalText);\n  const [asteriskedWords, setAsteriskedWords] = useState(initialWords);\n  const [missingWordIndex, setMissingWordIndex] = useState(-1);\n  const [mistakes, setMistakes] = useState(0);\n  const [showCorrectWord, setShowCorrectWord] = useState(false);\n  const [celebrate, setCelebrate] = useState(false);\n\n  useEffect(() => {\n    let tempText = originalText;\n\n    if (asteriskedWords.length === 0) return;\n\n    const randomWordIndex = Math.floor(Math.random() * asteriskedWords.length);\n    const randomWord = asteriskedWords[randomWordIndex];\n\n    let matches = [];\n    let match;\n    const regex = new RegExp(`\\\\*${randomWord}\\\\b`, \"g\");\n\n    while ((match = regex.exec(tempText))) {\n      matches.push(match.index);\n    }\n\n    if (matches.length === 0) return;\n\n    let randomIndex = matches[Math.floor(Math.random() * matches.length)] + 1;\n\n    const hasDigits = /\\d/.test(randomWord);\n    const firstCharShown =\n      !hasDigits && randomWord.length > 2 ? randomWord.charAt(0) : \"\";\n    const lastCharShown =\n      !hasDigits && randomWord.length > 2\n        ? randomWord.charAt(randomWord.length - 1)\n        : \"\";\n\n    tempText =\n      tempText.substring(0, randomIndex) +\n      `<span class=\"${\n        styles.missing\n      }\">${firstCharShown}<input type=\"text\" class=\"${\n        styles.missingInput\n      }\" data-word=\"${randomWord}\" value=\"\" size=\"${Math.min(\n        randomWord.length - (hasDigits ? 0 : 2, 1)\n      )}\">${lastCharShown}</span>` +\n      tempText.substring(randomIndex + randomWord.length);\n\n    // Remove all asterisks from the tempText\n    tempText = tempText.replace(/\\*/g, \"\");\n    setDisplayedText(tempText);\n    setMissingWordIndex(randomWordIndex);\n    setOriginalTextIndex(randomIndex);\n  }, [originalText, asteriskedWords]);\n\n  useEffect(() => {\n    if (celebrate) {\n      setDisplayedText(originalText);\n    }\n  }, [celebrate, displayedText, originalText]);\n\n  useEffect(() => {\n    const inputBox = document.querySelector(`.${styles.missingInput}`);\n    if (inputBox) {\n      inputBox.focus();\n    }\n  }, [displayedText]);\n\n  const handleInput = (e) => {\n    if (e.key === \"Enter\") {\n      const missingWord = asteriskedWords[missingWordIndex];\n      const inputBox = e.target;\n\n      let isCorrect;\n      if (/^\\d+$/.test(missingWord)) {\n        isCorrect = inputBox.value === missingWord;\n      } else {\n        const userAnswer =\n          missingWord.charAt(0) +\n          inputBox.value +\n          missingWord.charAt(missingWord.length - 1);\n        isCorrect = userAnswer\n          .toUpperCase()\n          .includes(missingWord.toUpperCase());\n      }\n\n      if (isCorrect) {\n        setScore((prevScore) => prevScore + 1);\n        setMistakes(0);\n\n        const tempText =\n          originalText.substring(0, originalTextIndex - 1) +\n          originalText.substring(originalTextIndex);\n        setOriginalText(tempText);\n\n        const wordsLeft = asteriskedWords.filter(\n          (word, index) => index !== missingWordIndex\n        );\n        if (wordsLeft.length === 0) {\n          setCelebrate(true);\n        }\n        setAsteriskedWords(wordsLeft);\n      } else {\n        setMistakes((prevMistakes) => {\n          if (prevMistakes === 2) {\n            // On the third mistake\n            setScore(0); // Reset score on any mistake\n            setShowCorrectWord(true); // Show the correct word\n            setTimeout(() => {\n              setShowCorrectWord(false);\n              setMistakes(0); // Reset mistakes count after showing the correct word\n            }, 1000); // Hide after 1 second\n            return prevMistakes + 1; // Keep the mistake count until the timeout is done\n          }\n          return prevMistakes + 1; // Increment mistakes count\n        });\n        inputBox.classList.add(styles.wrong);\n      }\n    }\n  };\n\n  return (\n    <>\n      {celebrate ? (\n        <div className={styles.celebration}>\n          <span className={styles.emoji} role=\"img\" aria-label=\"celebrate\">\n            üéâ\n          </span>\n        </div>\n      ) : null}\n      {showCorrectWord && (\n        <div className={styles.correctWordContainer}>\n          {asteriskedWords[missingWordIndex]}\n        </div>\n      )}\n      <div className={styles.wordCompleteContainer}>\n        {\n          <>\n            <div\n              className={styles.textArea}\n              onKeyUp={handleInput}\n              dangerouslySetInnerHTML={{ __html: displayedText }}\n            ></div>\n            <div className={styles.mistakes}>{\"‚úñ\".repeat(mistakes)}</div>\n            <div className={styles.score}>\n              <span className={styles.star}>‚òÖ</span> {score}&nbsp;&nbsp;&nbsp;\n              <span className={styles.todo}>üìù </span>\n              {asteriskedWords.length}\n            </div>\n          </>\n        }\n      </div>\n    </>\n  );\n}\n\nexport default WordComplete;\n"],"names":["_ref","text","initialWords","match","map","w","substring","originalText","setOriginalText","useState","score","setScore","originalTextIndex","setOriginalTextIndex","displayedText","setDisplayedText","asteriskedWords","setAsteriskedWords","missingWordIndex","setMissingWordIndex","mistakes","setMistakes","showCorrectWord","setShowCorrectWord","celebrate","setCelebrate","useEffect","tempText","length","randomWordIndex","Math","floor","random","randomWord","matches","regex","RegExp","concat","exec","push","index","randomIndex","hasDigits","test","firstCharShown","charAt","lastCharShown","styles","missing","missingInput","min","replace","inputBox","document","querySelector","focus","_jsxs","_Fragment","children","_jsx","className","celebration","emoji","role","correctWordContainer","wordCompleteContainer","textArea","onKeyUp","e","key","missingWord","target","isCorrect","value","toUpperCase","includes","prevScore","wordsLeft","filter","word","prevMistakes","setTimeout","classList","add","wrong","dangerouslySetInnerHTML","__html","repeat","star","todo"],"sourceRoot":""}