{"version":3,"file":"static/js/358.b32e80bc.chunk.js","mappings":"oLA0FA,QApFA,SAAoBA,GAAY,IAAX,KAAEC,GAAMD,EAC3B,MAAOE,EAAeC,IAAoBC,EAAAA,EAAAA,UAAS,KAC5CC,EAAiBC,IAAsBF,EAAAA,EAAAA,WAAS,GACjDG,GAASC,EAAAA,EAAAA,QAAO,OAChB,UAAEC,EAAS,aAAEC,IAAiBC,EAAAA,EAAAA,MAQpCC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAQC,YAAW,KACvBR,GAAmB,EAAM,GACxB,KACH,MAAO,IAAMS,aAAaF,EAAM,GAC/B,IAEH,MAAMG,EAAmBC,IACvBP,EAAaO,EAAK,EAGpB,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACrCF,EAAAA,EAAAA,MAAA,OAAKG,MAAO,CAAEC,SAAU,WAAYC,QAAS,gBAAiBH,SAAA,EACjD,YAATnB,GAAsBQ,KACtBe,EAAAA,EAAAA,KAAA,OACEC,IAAKlB,EACLmB,IAAKzB,GAAiB,YAATA,EAAqBA,EAAOQ,EACzCU,UAAU,qBACVQ,IAAI,WAIE,YAAT1B,IAAuBQ,IACtBS,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CAAK,+CAEHI,EAAAA,EAAAA,KAAA,SAAO,KACPA,EAAAA,EAAAA,KAAA,SACEI,KAAK,OACLT,UAAU,aACVU,OAAO,UACPC,SAAWC,IACTC,EAAAA,EAAAA,GAAiBD,EAAME,OAAOC,MAAM,GAAIlB,QAM/C,IAAImB,MAAM,KAAKC,KAAI,CAACC,EAAGC,KACtBd,EAAAA,EAAAA,KAAA,OAEEL,UAAS,aAAAoB,OACPrC,EAAcsC,SAASF,GAAS,mBAAqB,aAEvDjB,MAAO,CACLoB,MAAM,GAADF,OACHhC,EAAOmC,QAAuC,GAA7BnC,EAAOmC,QAAQC,YAAoB,OAEtDC,OAAO,GAADL,OACJhC,EAAOmC,QAAwC,GAA9BnC,EAAOmC,QAAQG,aAAqB,OAEvDC,IAAI,GAADP,OAA6B,GAAxBQ,KAAKC,MAAMV,EAAQ,GAAO,KAClCW,KAAK,GAADV,OAAMD,EAAQ,EAAK,GAAE,MAE3BY,QACEhD,EAAcsC,SAASF,GAAS,KAAO,IA7DhCA,KACZpC,EAAcsC,SAASF,IAC1BnC,GAAkBgD,GAAS,IAAIA,EAAMb,IACvC,EA0DuDc,CAAUd,GACxDlB,SAEA,4BAA4BkB,IAlBxBA,QAsBVjC,IACCa,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2BAA0BC,SAAA,EACvCI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,kBACJI,EAAAA,EAAAA,KAAA,KAAAJ,SAAG,+BAKb,C","sources":["components/ImageReveal.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./ImageReveal.css\";\n\nimport { handleFileChange } from \"../ImageUploads\";\nimport { useEditContext } from \"../EditContext\";\n\nfunction ImageReveal({ text }) {\n  const [revealedBoxes, setRevealedBoxes] = useState([]);\n  const [showInstruction, setShowInstruction] = useState(true);\n  const imgRef = useRef(null);\n  const { imageData, setImageData } = useEditContext();\n\n  const toggleBox = (index) => {\n    if (!revealedBoxes.includes(index)) {\n      setRevealedBoxes((prev) => [...prev, index]);\n    }\n  };\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setShowInstruction(false);\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const updateImageData = (data) => {\n    setImageData(data);\n  };\n\n  return (\n    <div className=\"image-reveal-container\">\n      <div style={{ position: \"relative\", display: \"inline-block\" }}>\n        {(text !== \"[local]\" || imageData) && (\n          <img\n            ref={imgRef}\n            src={text && text !== \"[local]\" ? text : imageData}\n            className=\"image-reveal-image\"\n            alt=\"Reveal\"\n          />\n        )}\n\n        {text === \"[local]\" && !imageData && (\n          <div>\n            The local image will need to be provided...\n            <br />{\" \"}\n            <input\n              type=\"file\"\n              className=\"fileUpload\"\n              accept=\"image/*\"\n              onChange={(event) =>\n                handleFileChange(event.target.files[0], updateImageData)\n              }\n            />\n          </div>\n        )}\n\n        {[...Array(25)].map((_, index) => (\n          <div\n            key={index}\n            className={`image-box ${\n              revealedBoxes.includes(index) ? \"image-box-reveal\" : \"image-box\"\n            }`}\n            style={{\n              width: `${\n                imgRef.current ? imgRef.current.clientWidth * 0.2 : \"20%\"\n              }`,\n              height: `${\n                imgRef.current ? imgRef.current.clientHeight * 0.2 : \"20%\"\n              }`,\n              top: `${Math.floor(index / 5) * 20}%`,\n              left: `${(index % 5) * 20}%`,\n            }}\n            onClick={\n              revealedBoxes.includes(index) ? null : () => toggleBox(index)\n            }\n          >\n            {\"ABCDEFGHIJKLMNOPQRSTUVWXY\"[index]}\n          </div>\n        ))}\n      </div>\n      {showInstruction && (\n        <div className=\"image-reveal-instruction\">\n          <h1>Image Reveal</h1>\n          <p>click boxes to reveal</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ImageReveal;\n"],"names":["_ref","text","revealedBoxes","setRevealedBoxes","useState","showInstruction","setShowInstruction","imgRef","useRef","imageData","setImageData","useEditContext","useEffect","timer","setTimeout","clearTimeout","updateImageData","data","_jsxs","className","children","style","position","display","_jsx","ref","src","alt","type","accept","onChange","event","handleFileChange","target","files","Array","map","_","index","concat","includes","width","current","clientWidth","height","clientHeight","top","Math","floor","left","onClick","prev","toggleBox"],"sourceRoot":""}