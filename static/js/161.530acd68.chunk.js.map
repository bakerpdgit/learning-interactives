{"version":3,"file":"static/js/161.530acd68.chunk.js","mappings":"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","sources":["webpack://class-interactives/./src/components/RaffleBalls.module.css?7aa1","components/RaffleBalls.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"gameArea\":\"RaffleBalls_gameArea__KsO9i\",\"ball\":\"RaffleBalls_ball__jV5Yq\",\"expanded\":\"RaffleBalls_expanded__bzFWp\",\"ballText\":\"RaffleBalls_ballText__ixfhY\",\"selectButton\":\"RaffleBalls_selectButton__31YEj\",\"raffleContainer\":\"RaffleBalls_raffleContainer__404Sj\",\"gameAreaContainer\":\"RaffleBalls_gameAreaContainer__rQvBL\",\"winnersPanel\":\"RaffleBalls_winnersPanel__10yU3\",\"winnersList\":\"RaffleBalls_winnersList__SkC5Y\",\"winner\":\"RaffleBalls_winner__6CYB1\"};","import React, { useState, useEffect, useRef } from \"react\";\nimport Matter from \"matter-js\";\nimport styles from \"./RaffleBalls.module.css\";\n\nfunction RaffleBalls({ text }) {\n  const gameAreaRef = useRef(null);\n  const engineRef = useRef(null);\n  const ballsRef = useRef([]);\n  const [expandedBallIndex, setExpandedBallIndex] = useState(null);\n  const [ballPositions, setBallPositions] = useState([]);\n  const [showBalls, setShowBalls] = useState(true);\n  const [partitionLeft, setPartitionLeft] = useState(null);\n  const [partitionRight, setPartitionRight] = useState(null);\n  const [winnerFound, setWinnerFound] = useState(false);\n  const [winningBallIndex, setWinningBallIndex] = useState(null);\n  const [playerColours, setPlayerColours] = useState({});\n  const [gameText, setGameText] = useState(\n    text.startsWith(\"OPTIONS:\") ? text.split(\"\\n\").slice(1).join(\"\\n\") : text\n  );\n  const [winners, setWinners] = useState([]);\n  const [dropAll, setDropAll] = useState(false);\n  const [groupSize, setGroupSize] = useState(0);\n\n  useEffect(() => {\n    const optionsLine = text.split(\"\\n\")[0];\n    if (optionsLine.startsWith(\"OPTIONS:\")) {\n      const options = optionsLine.split(\":\")[1].split(\",\");\n      options.forEach((option) => {\n        const [key, value] = option.split(\"=\");\n        if (key === \"drop_all\" && value === \"yes\") {\n          setDropAll(true);\n        } else if (key === \"group_size\") {\n          setGroupSize(parseInt(value, 10));\n        }\n      });\n    }\n  }, [text]);\n\n  useEffect(() => {\n    const handleResize = () => {\n      window.location.reload();\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    const engine = Matter.Engine.create();\n    engine.gravity.y = 0;\n    engine.gravity.x = 0;\n    engineRef.current = engine;\n    ballsRef.current = [];\n\n    // Create a renderer\n    const render = Matter.Render.create({\n      element: gameAreaRef.current,\n      engine: engine,\n      options: {\n        width: gameAreaRef.current.offsetWidth,\n        height: gameAreaRef.current.offsetHeight,\n        wireframes: false,\n        background: \"#f0f0f0\", // light gray background\n      },\n    });\n\n    // Create the walls and partition\n    const bounds = {\n      width: gameAreaRef.current.offsetWidth,\n      height: gameAreaRef.current.offsetHeight,\n    };\n\n    const walls = [\n      Matter.Bodies.rectangle(bounds.width / 2, 0, bounds.width, 10, {\n        isStatic: true,\n        render: { fillStyle: \"red\" },\n      }), // Top wall\n      !dropAll &&\n        Matter.Bodies.rectangle(\n          bounds.width / 2,\n          bounds.height,\n          bounds.width,\n          10,\n          {\n            isStatic: true,\n            render: { fillStyle: \"red\" },\n          }\n        ), // Bottom wall\n      Matter.Bodies.rectangle(0, bounds.height / 2, 10, bounds.height, {\n        isStatic: true,\n        render: { fillStyle: \"red\" },\n      }), // Left wall\n      Matter.Bodies.rectangle(\n        bounds.width,\n        bounds.height / 2,\n        10,\n        bounds.height,\n        {\n          isStatic: true,\n          render: { fillStyle: \"red\" },\n        }\n      ), // Right wall\n    ];\n\n    // Create the partition rectangles\n    const partitionHeight = 8;\n    const partitionY = bounds.height - 150;\n    const partLeft =\n      !dropAll &&\n      Matter.Bodies.rectangle(\n        bounds.width / 4,\n        partitionY,\n        bounds.width / 2,\n        partitionHeight,\n        {\n          isStatic: true,\n          render: { fillStyle: \"blue\" },\n        }\n      );\n\n    setPartitionLeft(partLeft);\n\n    const partRight =\n      !dropAll &&\n      Matter.Bodies.rectangle(\n        (3 * bounds.width) / 4,\n        partitionY,\n        bounds.width / 2,\n        partitionHeight,\n        {\n          isStatic: true,\n          render: { fillStyle: \"blue\" },\n        }\n      );\n\n    setPartitionRight(partRight);\n\n    Matter.World.add(engine.world, [...walls, partLeft, partRight]);\n\n    // Create the funnel rectangles\n    const funnelWidth = 8; // Width of the funnel walls\n    const funnelGap = 45; // Gap between the two funnel walls at the bottom\n    const funnelHeight =\n      ((bounds.width / 2 - funnelGap / 2) ** 2 + 110 ** 2) ** 0.5; // Height of the funnel walls\n\n    const funnelLeft = Matter.Bodies.rectangle(\n      bounds.width / 2 - funnelGap / 2 - funnelHeight / 2,\n      bounds.height -\n        (funnelHeight * 110) / (bounds.width / 2 - funnelGap / 2) / 2 -\n        40,\n      funnelHeight,\n      funnelWidth,\n      {\n        isStatic: true,\n        angle: Math.atan(110 / (bounds.width / 2 - funnelGap / 2)),\n        render: { fillStyle: \"blue\" }, // Color for visibility\n      }\n    );\n\n    const funnelRight = Matter.Bodies.rectangle(\n      bounds.width / 2 + funnelGap / 2 + funnelHeight / 2,\n      bounds.height -\n        (funnelHeight * 110) / (bounds.width / 2 - funnelGap / 2) / 2 -\n        40,\n      funnelHeight,\n      funnelWidth,\n      {\n        isStatic: true,\n        angle: Math.PI - Math.atan(110 / (bounds.width / 2 - funnelGap / 2)),\n        render: { fillStyle: \"blue\" }, // Color for visibility\n      }\n    );\n\n    const funnelBaseLeft = Matter.Bodies.rectangle(\n      bounds.width / 2 - funnelGap / 2 - funnelWidth,\n      bounds.height - 20,\n      funnelWidth,\n      40,\n      {\n        isStatic: true,\n        render: { fillStyle: \"blue\" }, // Color for visibility\n      }\n    );\n\n    const funnelBaseRight = Matter.Bodies.rectangle(\n      bounds.width / 2 + funnelGap / 2 + funnelWidth,\n      bounds.height - 20,\n      funnelWidth,\n      40,\n      {\n        isStatic: true,\n        render: { fillStyle: \"blue\" }, // Color for visibility\n      }\n    );\n\n    // Add the funnel rectangles to the world\n    Matter.World.add(engine.world, [\n      funnelLeft,\n      funnelRight,\n      funnelBaseLeft,\n      funnelBaseRight,\n    ]);\n\n    const participants = gameText.split(\"\\n\").map((line) => {\n      const [name, score] = line.split(\",\");\n      return { name, score: parseInt(score, 10) ? parseInt(score, 10) : 1 };\n    });\n\n    const initialPositions = [];\n    const currPlayerColors = playerColours;\n\n    // Assign colors to each player, spreading them across the color spectrum\n    participants.forEach((participant, participantIndex) => {\n      if (!currPlayerColors[participant.name]) {\n        const hue = (participantIndex * 360) / participants.length;\n        currPlayerColors[participant.name] = `hsl(${hue}, 100%, 50%)`;\n      }\n\n      Array.from({ length: participant.score }).forEach((_, i) => {\n        const x = 20 + Math.random() * (bounds.width - 40);\n        const y = 20 + Math.random() * (bounds.height - 190);\n        const color = currPlayerColors[participant.name];\n        const ball = Matter.Bodies.circle(x, y, 20, {\n          restitution: 1,\n          friction: 0,\n          frictionAir: 0,\n          frictionStatic: 0,\n          inertia: Infinity,\n          render: {\n            fillStyle: color,\n          },\n          label: participant.name, // Store the label\n          customColor: color, // Store the color\n        });\n        ballsRef.current.push(ball);\n        initialPositions.push({ x, y, color, label: participant.name });\n      });\n    });\n\n    setBallPositions(initialPositions);\n    setPlayerColours(currPlayerColors);\n\n    // Run the renderer and engine's runner\n    Matter.Render.run(render);\n    const runner = Matter.Runner.create();\n    Matter.Runner.run(runner, engine);\n\n    // Cleanup on unmount\n    return () => {\n      Matter.Render.stop(render);\n      Matter.Runner.stop(runner);\n      Matter.World.clear(engine.world);\n      Matter.Engine.clear(engine);\n      render.canvas.remove();\n      render.canvas = null;\n      render.context = null;\n      render.textures = {};\n    };\n  }, [gameText, playerColours, dropAll]);\n\n  const startBouncingAll = () => {\n    setShowBalls(false);\n    setExpandedBallIndex(null);\n\n    ballsRef.current.forEach((ball) => {\n      Matter.World.add(engineRef.current.world, ball);\n      const forceX = (Math.random() - 0.5) * 0.1;\n      const forceY = (Math.random() - 0.5) * 0.1;\n      Matter.Body.applyForce(\n        ball,\n        { x: ball.position.x, y: ball.position.y },\n        { x: forceX, y: forceY }\n      );\n    });\n\n    engineRef.current.world.gravity.y = 1;\n\n    ballsRef.current.forEach((ball) => {\n      Matter.Body.set(ball, {\n        restitution: 0.5,\n      });\n    });\n\n    Matter.Events.on(engineRef.current, \"afterUpdate\", () => {\n      setWinnerFound(true);\n      ballsRef.current.forEach((ball, index) => {\n        if (ball.position.y > gameAreaRef.current.offsetHeight) {\n          setWinners((prev) => [...prev, ball.label]);\n          Matter.World.remove(engineRef.current.world, ball);\n          ballsRef.current.splice(index, 1);\n        }\n      });\n    });\n  };\n\n  // Function to start bouncing\n  const startBouncing = () => {\n    if (dropAll) {\n      startBouncingAll();\n      return;\n    }\n\n    setShowBalls(false); // Hide the static balls\n\n    ballsRef.current.forEach((ball) => {\n      Matter.World.add(engineRef.current.world, ball);\n      const forceX = (Math.random() - 0.5) * 0.1; // Random force between -0.05 and 0.05\n      const forceY = (Math.random() - 0.5) * 0.1;\n      Matter.Body.applyForce(\n        ball,\n        { x: ball.position.x, y: ball.position.y },\n        { x: forceX, y: forceY }\n      );\n    });\n\n    // Move the partition after 5 seconds\n    // Move the partition after 5 seconds\n    setTimeout(() => {\n      // Enable gravity on the y-axis\n      engineRef.current.world.gravity.y = 1;\n\n      // Reduce restitution to make the balls lose energy\n      ballsRef.current.forEach((ball) => {\n        Matter.Body.set(ball, {\n          restitution: 0.5,\n        });\n      });\n\n      // Set another timeout to open the partition after another 5 seconds\n      setTimeout(() => {\n        // Reduce the width of the partitions to allow some balls to fall through\n        Matter.World.remove(engineRef.current.world, [\n          partitionLeft,\n          partitionRight,\n        ]);\n\n        // After another 5 seconds, update the positions of all balls and find the winner\n        setTimeout(() => {\n          let winningBall = ballsRef.current[0];\n          let winningIndex = 0;\n\n          ballsRef.current.forEach((ball, index) => {\n            if (ball.position.y > winningBall.position.y) {\n              winningBall = ball;\n              winningIndex = index;\n            }\n          });\n\n          // Rebuild ballPositions from ballsRef\n          const newBallPositions = ballsRef.current.map((ball) => ({\n            color: ball.customColor, // Retrieve the color stored in the ball object\n            label: ball.label, // Retrieve the label stored in the ball object\n            x: ball.position.x,\n            y: ball.position.y,\n            visible: true, // Make all balls visible\n          }));\n\n          setBallPositions(newBallPositions);\n\n          // Expand only the winning ball\n          setExpandedBallIndex(winningIndex);\n          Matter.World.remove(engineRef.current.world, ballsRef.current);\n          setWinningBallIndex(winningIndex);\n          setShowBalls(true);\n          setWinnerFound(true);\n          // Add the winner to the winners list\n          setWinners((prev) => [...prev, winningBall.label]);\n        }, 4000);\n      }, 3000);\n    }, 3000);\n  };\n\n  // Function to handle ball click\n  const handleBallClick = (index) => {\n    setExpandedBallIndex(index);\n  };\n\n  // Function to reset the game to the initial state\n  const resetGame = () => {\n    // reload the page\n    window.location.reload();\n  };\n\n  const resetWithoutWinningBall = () => {\n    const winningLabel = ballPositions[winningBallIndex].label;\n\n    const updatedParticipants = gameText\n      .split(\"\\n\")\n      .map((line) => {\n        const [name, score] = line.split(\",\");\n        if (name === winningLabel) {\n          const newScore = parseInt(score, 10) - 1;\n          return `${name},${newScore}`;\n        }\n        return line;\n      })\n      .filter((line) => !line.includes(\",0\")) // Optionally filter out any participant with a score of 0\n      .join(\"\\n\");\n\n    setWinnerFound(false);\n    setExpandedBallIndex(null);\n    setGameText(updatedParticipants); // Trigger re-render with updated text\n  };\n\n  // Function to reset the game without the winning player's balls\n  const resetWithoutWinner = () => {\n    const winningLabel = ballPositions[winningBallIndex].label;\n    const updatedParticipants = gameText\n      .split(\"\\n\")\n      .filter((line) => !line.startsWith(winningLabel))\n      .join(\"\\n\");\n\n    setWinnerFound(false);\n    setExpandedBallIndex(null);\n    setGameText(updatedParticipants); // Trigger re-render with updated text\n  };\n\n  return (\n    <div>\n      <button onClick={startBouncing} className={styles.selectButton}>\n        SELECT\n      </button>\n      {winnerFound && (\n        <>\n          <button onClick={resetGame}>RESET</button>\n          {!dropAll && (\n            <button onClick={resetWithoutWinningBall}>\n              RESET WITHOUT WINNING BALL\n            </button>\n          )}\n          {!dropAll && (\n            <button onClick={resetWithoutWinner}>RESET WITHOUT WINNER</button>\n          )}\n        </>\n      )}\n      <div ref={gameAreaRef} className={styles.gameArea}>\n        {showBalls &&\n          ballPositions.map((ball, index) => (\n            <div\n              key={index}\n              id={`ball-${index}`}\n              className={`${styles.ball} ${\n                expandedBallIndex === index ? styles.expanded : \"\"\n              }`}\n              onClick={() => handleBallClick(index)}\n              style={{\n                backgroundColor: ball.color,\n                top: `${ball.y - 20}px`,\n                left: `${ball.x - 20}px`,\n              }}\n            >\n              {expandedBallIndex === index ? (\n                <span className={styles.ballText}>{ball.label}</span>\n              ) : null}\n            </div>\n          ))}\n      </div>\n      {winnerFound && (\n        <div className={styles.winnersPanel}>\n          <h3>Results</h3>\n          <div className={styles.winnersList}>\n            {winners.map((winner, index) => (\n              <React.Fragment key={index}>\n                <div className={styles.winner}>\n                  {index + 1}. {winner}\n                </div>\n                {groupSize > 1 && (index + 1) % groupSize === 0 && (\n                  <hr className={styles.separator} />\n                )}\n              </React.Fragment>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default RaffleBalls;\n"],"names":["_ref","text","gameAreaRef","useRef","engineRef","ballsRef","expandedBallIndex","setExpandedBallIndex","useState","ballPositions","setBallPositions","showBalls","setShowBalls","partitionLeft","setPartitionLeft","partitionRight","setPartitionRight","winnerFound","setWinnerFound","winningBallIndex","setWinningBallIndex","playerColours","setPlayerColours","gameText","setGameText","startsWith","split","slice","join","winners","setWinners","dropAll","setDropAll","groupSize","setGroupSize","useEffect","optionsLine","forEach","option","key","value","parseInt","handleResize","window","location","reload","addEventListener","removeEventListener","engine","Matter","create","gravity","y","x","current","render","element","options","width","offsetWidth","height","offsetHeight","wireframes","background","bounds","walls","rectangle","isStatic","fillStyle","partitionY","partLeft","partRight","add","world","funnelHeight","funnelGap","funnelLeft","angle","Math","atan","funnelRight","PI","funnelBaseLeft","funnelBaseRight","participants","map","line","name","score","initialPositions","currPlayerColors","participant","participantIndex","hue","length","concat","Array","from","_","i","random","color","ball","circle","restitution","friction","frictionAir","frictionStatic","inertia","Infinity","label","customColor","push","run","runner","stop","clear","canvas","remove","context","textures","_jsxs","children","_jsx","onClick","startBouncing","forceX","forceY","applyForce","position","set","on","index","prev","splice","setTimeout","winningBall","winningIndex","newBallPositions","visible","className","styles","selectButton","_Fragment","resetGame","resetWithoutWinningBall","winningLabel","updatedParticipants","newScore","filter","includes","resetWithoutWinner","ref","gameArea","id","expanded","handleBallClick","style","backgroundColor","top","left","ballText","winnersPanel","winnersList","winner","React","separator"],"sourceRoot":""}