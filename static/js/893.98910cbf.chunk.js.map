{"version":3,"file":"static/js/893.98910cbf.chunk.js","mappings":"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","sources":["webpack://my-react-app/./src/components/WordComplete.module.css?cf35","components/WordComplete.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wordCompleteContainer\":\"WordComplete_wordCompleteContainer__YoNRj\",\"textArea\":\"WordComplete_textArea__TVbpf\",\"missingInput\":\"WordComplete_missingInput__bPvqM\",\"missing\":\"WordComplete_missing__oDgpk\",\"wrong\":\"WordComplete_wrong__f25ur\",\"score\":\"WordComplete_score__FGO0n\",\"star\":\"WordComplete_star__9TwrU\",\"correctWordContainer\":\"WordComplete_correctWordContainer__AlWTt\",\"mistakes\":\"WordComplete_mistakes__fOFdi\",\"celebration\":\"WordComplete_celebration__VStrQ\",\"scale\":\"WordComplete_scale__m7Xsv\",\"hide\":\"WordComplete_hide__qv7rI\",\"moveUpDown\":\"WordComplete_moveUpDown__8-5cy\"};","import React, { useState, useEffect } from \"react\";\r\nimport styles from \"./WordComplete.module.css\";\r\n\r\nfunction WordComplete({ text }) {\r\n  const [originalText, setOriginalText] = useState(text);\r\n  const [score, setScore] = useState(0);\r\n  const [originalTextIndex, setOriginalTextIndex] = useState(0);\r\n  const [displayedText, setDisplayedText] = useState(originalText);\r\n  const [asteriskedWords, setAsteriskedWords] = useState(\r\n    (originalText.match(/\\*([a-zA-Z0-9]+)(?=[ ,.?!]|$)/g) || []).map((w) =>\r\n      w.substring(1)\r\n    )\r\n  );\r\n  const [missingWordIndex, setMissingWordIndex] = useState(-1);\r\n  const [mistakes, setMistakes] = useState(0);\r\n  const [showCorrectWord, setShowCorrectWord] = useState(false);\r\n  const [celebrate, setCelebrate] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let tempText = originalText;\r\n\r\n    if (asteriskedWords.length === 0) return;\r\n\r\n    const randomWordIndex = Math.floor(Math.random() * asteriskedWords.length);\r\n    const randomWord = asteriskedWords[randomWordIndex];\r\n\r\n    let matches = [];\r\n    let match;\r\n    const regex = new RegExp(`\\\\*${randomWord}\\\\b`, \"g\");\r\n\r\n    while ((match = regex.exec(tempText))) {\r\n      matches.push(match.index);\r\n    }\r\n\r\n    if (matches.length === 0) return;\r\n\r\n    let randomIndex = matches[Math.floor(Math.random() * matches.length)] + 1;\r\n\r\n    const hasDigits = /\\d/.test(randomWord);\r\n    const firstCharShown = !hasDigits ? randomWord.charAt(0) : \"\";\r\n    const lastCharShown = !hasDigits\r\n      ? randomWord.charAt(randomWord.length - 1)\r\n      : \"\";\r\n\r\n    tempText =\r\n      tempText.substring(0, randomIndex) +\r\n      `<span class=\"${\r\n        styles.missing\r\n      }\">${firstCharShown}<input type=\"text\" class=\"${\r\n        styles.missingInput\r\n      }\" data-word=\"${randomWord}\" value=\"\" size=\"${\r\n        randomWord.length - 2\r\n      }\">${lastCharShown}</span>` +\r\n      tempText.substring(randomIndex + randomWord.length);\r\n\r\n    // Remove all asterisks from the tempText\r\n    tempText = tempText.replace(/\\*/g, \"\");\r\n    setDisplayedText(tempText);\r\n    setMissingWordIndex(randomWordIndex);\r\n    setOriginalTextIndex(randomIndex);\r\n  }, [originalText, asteriskedWords]);\r\n\r\n  useEffect(() => {\r\n    if (celebrate) {\r\n      setDisplayedText(originalText);\r\n    }\r\n  }, [celebrate, displayedText, originalText]);\r\n\r\n  useEffect(() => {\r\n    const inputBox = document.querySelector(`.${styles.missingInput}`);\r\n    if (inputBox) {\r\n      inputBox.focus();\r\n    }\r\n  }, [displayedText]);\r\n\r\n  const handleInput = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      const missingWord = asteriskedWords[missingWordIndex];\r\n      const inputBox = e.target;\r\n\r\n      let isCorrect;\r\n      if (/^\\d+$/.test(missingWord)) {\r\n        isCorrect = inputBox.value === missingWord;\r\n      } else {\r\n        const userAnswer =\r\n          missingWord.charAt(0) +\r\n          inputBox.value +\r\n          missingWord.charAt(missingWord.length - 1);\r\n        isCorrect = userAnswer\r\n          .toUpperCase()\r\n          .includes(missingWord.toUpperCase());\r\n      }\r\n\r\n      if (isCorrect) {\r\n        setScore((prevScore) => prevScore + 1);\r\n        setMistakes(0);\r\n\r\n        const tempText =\r\n          originalText.substring(0, originalTextIndex - 1) +\r\n          originalText.substring(originalTextIndex);\r\n        setOriginalText(tempText);\r\n\r\n        const wordsLeft = asteriskedWords.filter(\r\n          (word, index) => index !== missingWordIndex\r\n        );\r\n        if (wordsLeft.length === 0) {\r\n          setCelebrate(true);\r\n        }\r\n        setAsteriskedWords(wordsLeft);\r\n      } else {\r\n        setMistakes((prevMistakes) => {\r\n          if (prevMistakes === 2) {\r\n            // On the third mistake\r\n            setScore(0); // Reset score on any mistake\r\n            setShowCorrectWord(true); // Show the correct word\r\n            setTimeout(() => {\r\n              setShowCorrectWord(false);\r\n              setMistakes(0); // Reset mistakes count after showing the correct word\r\n            }, 1000); // Hide after 1 second\r\n            return prevMistakes + 1; // Keep the mistake count until the timeout is done\r\n          }\r\n          return prevMistakes + 1; // Increment mistakes count\r\n        });\r\n        inputBox.classList.add(styles.wrong);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1 className={styles.interactiveTitle}>Word Complete</h1>\r\n      {celebrate ? (\r\n        <div className={styles.celebration}>\r\n          <span className={styles.emoji} role=\"img\" aria-label=\"celebrate\">\r\n            ðŸŽ‰\r\n          </span>\r\n        </div>\r\n      ) : null}\r\n      {showCorrectWord && (\r\n        <div className={styles.correctWordContainer}>\r\n          {asteriskedWords[missingWordIndex]}\r\n        </div>\r\n      )}\r\n      <div className={styles.wordCompleteContainer}>\r\n        {\r\n          <>\r\n            <div\r\n              className={styles.textArea}\r\n              onKeyUp={handleInput}\r\n              dangerouslySetInnerHTML={{ __html: displayedText }}\r\n            ></div>\r\n            <div className={styles.mistakes}>{\"âœ–\".repeat(mistakes)}</div>\r\n            <div className={styles.score}>\r\n              <span className={styles.star}>â˜…</span> {score}\r\n            </div>\r\n          </>\r\n        }\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default WordComplete;\r\n"],"names":["_ref","text","originalText","setOriginalText","useState","score","setScore","originalTextIndex","setOriginalTextIndex","displayedText","setDisplayedText","asteriskedWords","setAsteriskedWords","match","map","w","substring","missingWordIndex","setMissingWordIndex","mistakes","setMistakes","showCorrectWord","setShowCorrectWord","celebrate","setCelebrate","useEffect","tempText","length","randomWordIndex","Math","floor","random","randomWord","matches","regex","RegExp","concat","exec","push","index","randomIndex","hasDigits","test","firstCharShown","charAt","lastCharShown","styles","missing","missingInput","replace","inputBox","document","querySelector","focus","_jsxs","_Fragment","children","_jsx","className","interactiveTitle","celebration","emoji","role","correctWordContainer","wordCompleteContainer","textArea","onKeyUp","e","key","missingWord","target","isCorrect","value","toUpperCase","includes","prevScore","wordsLeft","filter","word","prevMistakes","setTimeout","classList","add","wrong","dangerouslySetInnerHTML","__html","repeat","star"],"sourceRoot":""}