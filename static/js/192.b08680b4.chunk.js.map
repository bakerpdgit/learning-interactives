{"version":3,"file":"static/js/192.b08680b4.chunk.js","mappings":"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","sources":["webpack://my-react-app/./src/components/RandomWheel.module.css?cdf8","components/RandomWheel.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"GameArea\":\"RandomWheel_GameArea__ypUzU\",\"GameWheel\":\"RandomWheel_GameWheel__4M8Ku\",\"ItemsList\":\"RandomWheel_ItemsList__pEfjK\",\"Item\":\"RandomWheel_Item__gSGPd\",\"celebration\":\"RandomWheel_celebration__A1WWm\",\"bounce\":\"RandomWheel_bounce__SMtb4\"};","import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport styles from \"./RandomWheel.module.css\";\n\nfunction RandomWheel({ text }) {\n  const [items, setItems] = useState([]);\n  const [rotationAngle, setRotationAngle] = useState(0);\n  const canvasRef = useRef(null);\n  const gameWheelRef = useRef(null);\n  const animationRef = useRef(null);\n\n  const unifiedEasing = (t) => {\n    return 0.5 * (1 - Math.cos(Math.PI * t));\n  };\n\n  const shuffleItems = (itemList) => {\n    const shuffledItems = [...itemList];\n    for (let i = shuffledItems.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [shuffledItems[i], shuffledItems[j]] = [\n        shuffledItems[j],\n        shuffledItems[i],\n      ];\n    }\n\n    return shuffledItems;\n  };\n\n  const spinWheel = () => {\n    let startTime = null;\n    let duration = 12000; // 12 seconds\n    let speedAdjuster = 0.6 + Math.random() * 0.4;\n\n    const spin = (timestamp) => {\n      if (!startTime) {\n        startTime = timestamp;\n      }\n\n      let elapsed = timestamp - startTime;\n      let speed;\n\n      if (elapsed < duration / 2) {\n        speed = unifiedEasing(elapsed / duration);\n      } else if (elapsed < duration) {\n        speed = 1 - unifiedEasing(elapsed / duration);\n      } else {\n        cancelAnimationFrame(animationRef.current);\n        return;\n      }\n\n      setRotationAngle(\n        (prevAngle) => (prevAngle + speed * speedAdjuster) % (2 * Math.PI)\n      );\n      animationRef.current = requestAnimationFrame(spin);\n    };\n\n    animationRef.current = requestAnimationFrame(spin);\n  };\n\n  useEffect(() => {\n    const expandItems = (line) => {\n      const [item, count] = line.split(\":\");\n      const trimmedItem = item.trim();\n      // Apply the max length check to each item\n      const truncatedItem =\n        trimmedItem.length > 20\n          ? trimmedItem.substring(0, 20) + \"...\"\n          : trimmedItem;\n      return isNaN(count) ? [line] : Array(parseInt(count)).fill(truncatedItem);\n    };\n\n    const parsedItems = text.split(\"\\n\").flatMap((line) => {\n      // Handle the expansion and truncation in expandItems function\n      if (line.includes(\":\") && !isNaN(line.split(\":\")[1])) {\n        return expandItems(line);\n      } else {\n        const trimmedLine = line.trim();\n        return [\n          trimmedLine.length > 20\n            ? trimmedLine.substring(0, 20) + \"...\"\n            : trimmedLine,\n        ];\n      }\n    });\n\n    setItems(shuffleItems(parsedItems));\n  }, [text]);\n\n  // Encapsulated draw logic\n  const drawWheel = useCallback(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const rect = gameWheelRef.current.getBoundingClientRect();\n    canvas.width = rect.width;\n    canvas.height = rect.height;\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n    const radius = Math.min(centerX, centerY) - 10;\n\n    ctx.save();\n    ctx.translate(centerX, centerY);\n    ctx.rotate(rotationAngle);\n\n    ctx.beginPath();\n    ctx.arc(0, 0, radius, 0, 2 * Math.PI);\n    ctx.stroke();\n    ctx.fillStyle = \"lightpink\";\n    ctx.fill();\n    ctx.fillStyle = \"black\";\n    ctx.font = \"1.3em Arial\";\n\n    const numItems = items.length;\n    const angleStep = (2 * Math.PI) / numItems;\n\n    const offsetAngle = angleStep / 2;\n    for (let i = 0; i < numItems; i++) {\n      const angle = i * angleStep + offsetAngle;\n      ctx.beginPath();\n      ctx.moveTo(0, 0);\n      ctx.lineTo(radius * Math.cos(angle), radius * Math.sin(angle));\n      ctx.stroke();\n    }\n\n    ctx.textAlign = \"right\";\n    ctx.textBaseline = \"middle\";\n    for (let i = 0; i < numItems; i++) {\n      const angle = i * angleStep;\n      ctx.save();\n      ctx.rotate(angle);\n      ctx.fillText(items[i], radius - 10, 0);\n      ctx.restore();\n    }\n\n    ctx.restore();\n  }, [items, rotationAngle]);\n\n  useEffect(() => {\n    const handleResize = () => {\n      drawWheel(); // Redraw when window resizes\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n    drawWheel(); // Initial draw\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, [items, rotationAngle, drawWheel]); // Ensuring drawWheel reacts to state changes\n\n  const handleItemClick = (item) => {\n    // Remove the first instance of the item\n    setItems((currentItems) => {\n      const index = currentItems.indexOf(item);\n      if (index > -1) {\n        return [\n          ...currentItems.slice(0, index),\n          ...currentItems.slice(index + 1),\n        ];\n      }\n      return currentItems;\n    });\n  };\n\n  const handleItemRightClick = (event, item) => {\n    event.preventDefault(); // Prevent the default context menu\n    // Remove all instances of the item\n    setItems((currentItems) =>\n      currentItems.filter((currentItem) => currentItem !== item)\n    );\n  };\n\n  // Create a list of unique items for display\n  const uniqueItems = Array.from(new Set(items));\n\n  return (\n    <>\n      <p className=\"instructions\">\n        Click an item in the list to remove it. Right-click to remove all\n        instances of it.\n      </p>\n\n      <div className={styles.GameArea}>\n        <div className={styles.GameWheel} ref={gameWheelRef}>\n          <button\n            onClick={spinWheel}\n            style={{ display: \"block\", margin: \"0 auto\" }}\n          >\n            Spin Wheel\n            <br /> v\n          </button>\n          <canvas ref={canvasRef}></canvas>\n        </div>\n        <div className={styles.ItemsList}>\n          {uniqueItems.map((item, index) => (\n            <div\n              key={index}\n              className={styles.Item}\n              onClick={() => handleItemClick(item)}\n              onContextMenu={(event) => handleItemRightClick(event, item)}\n            >\n              {item}\n            </div>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default RandomWheel;\n"],"names":["_ref","text","items","setItems","useState","rotationAngle","setRotationAngle","canvasRef","useRef","gameWheelRef","animationRef","unifiedEasing","t","Math","cos","PI","useEffect","parsedItems","split","flatMap","line","includes","isNaN","item","count","trimmedItem","trim","truncatedItem","length","substring","Array","parseInt","fill","expandItems","trimmedLine","itemList","shuffledItems","i","j","floor","random","shuffleItems","drawWheel","useCallback","canvas","current","ctx","getContext","rect","getBoundingClientRect","width","height","clearRect","centerX","centerY","radius","min","save","translate","rotate","beginPath","arc","stroke","fillStyle","font","numItems","angleStep","offsetAngle","angle","moveTo","lineTo","sin","textAlign","textBaseline","fillText","restore","handleResize","window","addEventListener","removeEventListener","uniqueItems","from","Set","_jsxs","_Fragment","children","_jsx","className","styles","ref","onClick","spinWheel","startTime","duration","speedAdjuster","spin","timestamp","speed","elapsed","cancelAnimationFrame","prevAngle","requestAnimationFrame","style","display","margin","map","index","currentItems","indexOf","slice","handleItemClick","onContextMenu","event","handleItemRightClick","preventDefault","filter","currentItem"],"sourceRoot":""}