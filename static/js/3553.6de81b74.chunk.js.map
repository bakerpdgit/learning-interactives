{"version":3,"file":"static/js/3553.6de81b74.chunk.js","mappings":"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","sources":["components/OrderedLine.js"],"sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport \"./OrderedLine.css\";\n\nfunction OrderedLineCanvas({ text }) {\n  const canvasRef = useRef(null);\n  const boxCoordinatesRef = useRef([]);\n  const labelYPositionsRef = useRef([]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n\n    let isDraggingLabel = false;\n    let isDraggingMarker = false;\n    let draggedLabelIndex = null;\n    let draggedMarkerIndex = null;\n\n    const setup = () => {\n      const items = text.split(\"\\n\").filter((item) => item);\n      const labels = items[0].split(\"-\");\n      items.shift();\n\n      // Sort items randomly\n      items.sort(() => Math.random() - 0.5);\n\n      // Handle window resize\n      const handleResize = () => {\n        // Update canvas size\n        const dpr = window.devicePixelRatio || 1;\n        canvas.width = canvas.offsetWidth * dpr;\n        canvas.height = canvas.offsetHeight * dpr;\n        ctx.scale(dpr, dpr);\n\n        // Recalculate positions\n        initializePositions();\n        draw();\n      };\n\n      window.addEventListener(\"resize\", handleResize);\n\n      const textBoxHeight = 60;\n      const padding = 5;\n      const markerSize = 10;\n\n      const dpr = window.devicePixelRatio || 1;\n      canvas.width = canvas.offsetWidth * dpr;\n      canvas.height = canvas.offsetHeight * dpr;\n      ctx.scale(dpr, dpr);\n\n      const lineY = (canvas.height * 0.92) / dpr;\n\n      const initializePositions = () => {\n        boxCoordinatesRef.current = items.map(\n          (_, i) => ((i + 1) * canvas.width) / (items.length + 1) / dpr\n        );\n        // Initialize label y-positions\n        labelYPositionsRef.current = items.map((_, i) => {\n          const minY = textBoxHeight / 2 + 10;\n          const maxY = lineY - markerSize - textBoxHeight / 2 - 10;\n          return Math.random() * (maxY - minY) + minY;\n        });\n      };\n\n      initializePositions();\n\n      // Function to check if a point is inside a rectangle\n      function isPointInRect(x, y, rect) {\n        return (\n          x >= rect.x &&\n          x <= rect.x + rect.width &&\n          y >= rect.y &&\n          y <= rect.y + rect.height\n        );\n      }\n\n      function draw() {\n        // Clear the canvas\n        ctx.clearRect(0, 0, canvas.width / dpr, canvas.height / dpr);\n\n        // Draw ordered line\n        ctx.strokeStyle = \"#000\";\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.moveTo(10, lineY);\n        ctx.lineTo(canvas.width / dpr - 10, lineY);\n        ctx.stroke();\n\n        // Draw line labels\n        ctx.font = \"16px Arial\";\n        ctx.textAlign = \"left\";\n        ctx.fillText(labels[0], 10, lineY + 20);\n        ctx.textAlign = \"right\";\n        ctx.fillText(labels[1], canvas.width / dpr - 10, lineY + 20);\n\n        // Draw textboxes and vertical lines\n        for (let i = 0; i < items.length; i++) {\n          ctx.font = \"16px Arial\";\n          const textWidth = ctx.measureText(items[i]).width;\n          const boxWidth = textWidth + 2 * padding;\n\n          const x = boxCoordinatesRef.current[i];\n          const yLabel = labelYPositionsRef.current[i];\n\n          // Draw the draggable box (label)\n          ctx.fillStyle = \"#f0f0f0\";\n          ctx.fillRect(\n            x - boxWidth / 2,\n            yLabel - textBoxHeight / 2,\n            boxWidth,\n            textBoxHeight\n          );\n          ctx.strokeRect(\n            x - boxWidth / 2,\n            yLabel - textBoxHeight / 2,\n            boxWidth,\n            textBoxHeight\n          );\n          ctx.textAlign = \"center\";\n          ctx.textBaseline = \"middle\";\n          ctx.fillStyle = \"#000\";\n          ctx.fillText(items[i], x, yLabel);\n\n          // Draw the vertical line\n          ctx.beginPath();\n          ctx.moveTo(x, yLabel + textBoxHeight / 2);\n          ctx.lineTo(x, lineY - markerSize / 2);\n          ctx.stroke();\n\n          // Draw the marker at the end of the vertical line (marker stays on the ordered line)\n          ctx.fillStyle = \"#000\";\n          ctx.fillRect(\n            x - markerSize / 2,\n            lineY - markerSize / 2,\n            markerSize,\n            markerSize\n          );\n        }\n      }\n\n      function handleMouseDown(e) {\n        const mouseX = e.clientX - canvas.getBoundingClientRect().left;\n        const mouseY = e.clientY - canvas.getBoundingClientRect().top;\n\n        for (let i = 0; i < items.length; i++) {\n          const x = boxCoordinatesRef.current[i];\n          const yLabel = labelYPositionsRef.current[i];\n\n          // Check if mouse is over marker\n          const markerRect = {\n            x: x - markerSize / 2,\n            y: lineY - markerSize / 2,\n            width: markerSize,\n            height: markerSize,\n          };\n\n          if (isPointInRect(mouseX, mouseY, markerRect)) {\n            isDraggingMarker = true;\n            draggedMarkerIndex = i;\n            break;\n          }\n\n          // Check if mouse is over label\n          ctx.font = \"16px Arial\";\n          const textWidth = ctx.measureText(items[i]).width;\n          const boxWidth = textWidth + 2 * padding;\n\n          const rect = {\n            x: x - boxWidth / 2,\n            y: yLabel - textBoxHeight / 2,\n            width: boxWidth,\n            height: textBoxHeight,\n          };\n\n          if (isPointInRect(mouseX, mouseY, rect)) {\n            isDraggingLabel = true;\n            draggedLabelIndex = i;\n            break;\n          }\n        }\n      }\n\n      function handleMouseMove(e) {\n        if (isDraggingLabel && draggedLabelIndex !== null) {\n          const mouseX = e.clientX - canvas.getBoundingClientRect().left;\n          boxCoordinatesRef.current[draggedLabelIndex] = mouseX;\n          draw();\n        } else if (isDraggingMarker && draggedMarkerIndex !== null) {\n          const mouseY = e.clientY - canvas.getBoundingClientRect().top;\n\n          // Constrain the label y-position between minY and maxY\n          const minY = textBoxHeight / 2 + 10;\n          const maxY = lineY - markerSize - textBoxHeight / 2 - 50;\n\n          const newY = Math.min(\n            Math.max(mouseY - textBoxHeight / 2, minY),\n            maxY\n          );\n\n          labelYPositionsRef.current[draggedMarkerIndex] =\n            newY + textBoxHeight / 2;\n\n          draw();\n        }\n      }\n\n      function handleMouseUp() {\n        isDraggingLabel = false;\n        draggedLabelIndex = null;\n        isDraggingMarker = false;\n        draggedMarkerIndex = null;\n      }\n\n      draw();\n\n      canvas.addEventListener(\"mousedown\", handleMouseDown);\n      window.addEventListener(\"mousemove\", handleMouseMove);\n      window.addEventListener(\"mouseup\", handleMouseUp);\n\n      return () => {\n        canvas.removeEventListener(\"mousedown\", handleMouseDown);\n        window.removeEventListener(\"mousemove\", handleMouseMove);\n        window.removeEventListener(\"mouseup\", handleMouseUp);\n        window.removeEventListener(\"resize\", handleResize);\n      };\n    };\n\n    const cleanup = setup();\n\n    return () => {\n      cleanup();\n    };\n  }, [text]);\n\n  return (\n    <div className=\"orderedLineCanvasContainer\">\n      <canvas ref={canvasRef} id=\"orderedLineCanvas\"></canvas>\n    </div>\n  );\n}\n\nexport default OrderedLineCanvas;\n"],"names":["_ref","text","canvasRef","useRef","boxCoordinatesRef","labelYPositionsRef","useEffect","canvas","current","ctx","getContext","isDraggingLabel","isDraggingMarker","draggedLabelIndex","draggedMarkerIndex","cleanup","setup","items","split","filter","item","labels","shift","sort","Math","random","handleResize","dpr","window","devicePixelRatio","width","offsetWidth","height","offsetHeight","scale","initializePositions","draw","addEventListener","textBoxHeight","padding","markerSize","lineY","map","_","i","length","minY","maxY","isPointInRect","x","y","rect","clearRect","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","font","textAlign","fillText","boxWidth","measureText","yLabel","fillStyle","fillRect","strokeRect","textBaseline","handleMouseDown","e","mouseX","clientX","getBoundingClientRect","left","mouseY","clientY","top","handleMouseMove","newY","min","max","handleMouseUp","removeEventListener","_jsx","className","children","ref","id"],"sourceRoot":""}