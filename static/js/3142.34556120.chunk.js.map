{"version":3,"file":"static/js/3142.34556120.chunk.js","mappings":"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","sources":["components/CategoryMatch.js","components/MathComponent.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Draggable from \"react-draggable\";\nimport \"./CategoryMatch.css\";\nimport MathComponent from \"./MathComponent.js\";\nimport InputModal from \"./InputModal\";\n\nfunction CategoryMatch({ text }) {\n  // const [showCelebration, setShowCelebration] = useState(false);\n  const [showInstruction, setShowInstruction] = useState(true);\n  const [inputMessage, setInputMessage] = useState({});\n\n  // const [score, setScore] = useState(null);\n  // const [marked, setMarked] = useState(false);\n\n  const categories = text.split(\"\\n\\n\")[0].split(\"\\n\");\n  const termsData = text\n    .split(\"\\n\\n\")[1]\n    .split(\"\\n\")\n    .map((term) => {\n      const [word, catIndex] = term.split(\"@\");\n      return { word, catIndex: catIndex ? parseInt(catIndex) : null };\n    });\n\n  const gameAreaHeight = 0.9 * window.innerHeight;\n  const gameAreaWidth = window.innerWidth;\n\n  const randomizedTerms = termsData.map((term) => ({\n    ...term,\n    x: window.innerWidth / 2 + (-0.5 + Math.random()) * gameAreaWidth * 0.5, // Adjust 100 based on term width\n    y: window.innerHeight / 2 + (-0.5 + Math.random()) * gameAreaHeight * 0.5, // Adjust 50 based on term height\n  }));\n\n  const [allTerms, setAllTerms] = useState(randomizedTerms);\n\n  const numCategories = categories.length;\n  let numRows = Math.round(Math.sqrt(numCategories));\n  let numCols = Math.ceil(numCategories / numRows);\n  const extraStyles = {\n    gridTemplateRows: `repeat(${numRows}, 1fr)`,\n    gridTemplateColumns: `repeat(${numCols}, 1fr)`,\n  };\n\n  const handleAddItem = () => {\n    setInputMessage({\n      prompt: \"Please enter text for the new item:\",\n      value: \"\",\n    });\n  };\n\n  const handleInputSubmit = (userInput) => {\n    if (userInput) {\n      const newTerm = {\n        word: userInput,\n        catIndex: null,\n        x: window.innerWidth / 2,\n        y: window.innerHeight / 2,\n      };\n\n      setAllTerms((prevTerms) => [...prevTerms, newTerm]);\n    }\n    setInputMessage({}); // Clear the inputMessage to close the modal\n  };\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setShowInstruction(false);\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const handleStop = (e, data, draggedTerm) => {\n    const updatedTerms = allTerms.map((term) => {\n      if (term.word === draggedTerm.word) {\n        return {\n          ...term,\n          x: data.x,\n          y: data.y,\n        };\n      }\n      return term;\n    });\n\n    setAllTerms(updatedTerms);\n  };\n\n  const handleRemoveTerm = (termToRemove) => {\n    setAllTerms((prevTerms) =>\n      prevTerms.filter((term) => term !== termToRemove)\n    );\n  };\n\n  return (\n    <>\n      {inputMessage.prompt && (\n        <InputModal\n          title={inputMessage.prompt}\n          placeholder=\"Type here...\"\n          value={inputMessage.value}\n          onSubmit={handleInputSubmit}\n          onClose={() => setInputMessage({})}\n        />\n      )}\n      <button onClick={handleAddItem} className=\"addItemBtn\">\n        Add item\n      </button>\n      {/*\n      {hasMarkedTerm && (\n        <button className=\"submitBtn\" onClick={handleMarking}>\n          Submit\n        </button>\n      )}\n      */}\n      {/* marked && <div className=\"scoreBox\">Score: {score}</div> */}\n      <div className=\"CategoryMatch\" style={extraStyles}>\n        {categories.map((category, index) => (\n          <div key={index} className=\"categoryBox\">\n            {category}\n          </div>\n        ))}\n        {!showInstruction &&\n          allTerms.map((term, index) => (\n            <Draggable\n              key={index}\n              position={{ x: term.x, y: term.y }}\n              onStop={(e, data) => handleStop(e, data, term)}\n            >\n              <div\n                style={{\n                  zIndex: index + 1,\n                }}\n                className=\"term\"\n              >\n                <div\n                  className=\"positionMarker\"\n                  onClick={() => handleRemoveTerm(term)}\n                ></div>\n                {<MathComponent text={term.word} renderNewLines={true} />}\n              </div>\n            </Draggable>\n          ))}\n\n        {/* showCelebration && \"ðŸŽ‰ Celebration ðŸŽ‰\"*/}\n        {showInstruction && (\n          <div className=\"instruction\">\n            <p>Drag each term to its category...</p>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default CategoryMatch;\n","import { InlineMath } from \"react-katex\";\n\nfunction parseAndRenderMath(text) {\n  const prefix = Math.random().toString(36).substring(2, 10); // Generate an 8-character random string\n\n  // Split the text based on $$ delimiters\n  const segments = text.split(\"$$\");\n  const elements = [];\n\n  segments.forEach((segment, index) => {\n    if (index % 2 === 1) {\n      // Odd-indexed segments are LaTeX (since they are enclosed between $$ delimiters)\n      elements.push(\n        <InlineMath key={`MCIM-${prefix}-${index}`} math={segment} />\n      );\n    } else {\n      elements.push(<span key={`MCSP-${prefix}-${index}`}>{segment}</span>);\n    }\n  });\n\n  return elements;\n}\n\nconst renderWithNewLines = (text) => {\n  return text.replace(/\\\\n/g, \"\\n\");\n};\n\nfunction MathComponent({ text, renderNewLines = false }) {\n  if (renderNewLines) {\n    text = renderWithNewLines(text);\n  }\n\n  return (\n    <div\n      style={{\n        whiteSpace:\n          text.includes(\"\\n\") && renderNewLines ? \"pre-wrap\" : \"normal\",\n        marginTop: text.includes(\"$$\") ? \"0.5em\" : \"0\",\n      }}\n    >\n      {parseAndRenderMath(text)}\n    </div>\n  );\n}\n\nexport default MathComponent;\n"],"names":["_ref","text","showInstruction","setShowInstruction","useState","inputMessage","setInputMessage","categories","split","termsData","map","term","word","catIndex","parseInt","gameAreaHeight","window","innerHeight","gameAreaWidth","innerWidth","randomizedTerms","x","Math","random","y","allTerms","setAllTerms","numCategories","length","numRows","round","sqrt","numCols","ceil","extraStyles","gridTemplateRows","concat","gridTemplateColumns","useEffect","timer","setTimeout","clearTimeout","_jsxs","_Fragment","children","prompt","_jsx","InputModal","title","placeholder","value","onSubmit","userInput","newTerm","prevTerms","onClose","onClick","handleAddItem","className","style","category","index","Draggable","position","onStop","e","data","handleStop","draggedTerm","updatedTerms","zIndex","handleRemoveTerm","termToRemove","filter","MathComponent","renderNewLines","parseAndRenderMath","prefix","toString","substring","segments","elements","forEach","segment","push","InlineMath","math","replace","renderWithNewLines","whiteSpace","includes","marginTop"],"sourceRoot":""}