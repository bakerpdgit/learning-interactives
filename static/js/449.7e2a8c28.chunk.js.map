{"version":3,"file":"static/js/449.7e2a8c28.chunk.js","mappings":"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","sources":["webpack://my-react-app/./src/components/Connect.module.css?ad1a","components/Connect.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"GameAreaGrid\":\"Connect_GameAreaGrid__rKelh\",\"instructions\":\"Connect_instructions__tlxhA\",\"tile\":\"Connect_tile__0wgd+\",\"selected\":\"Connect_selected__2O-Fm\",\"matched\":\"Connect_matched__DH8hl\",\"incorrect\":\"Connect_incorrect__Cs5Ug\",\"CorrectArea\":\"Connect_CorrectArea__-QfGo\",\"CorrectGroup\":\"Connect_CorrectGroup__Nb6YY\",\"CorrectTile\":\"Connect_CorrectTile__Dvm-U\",\"celebrationEmoji\":\"Connect_celebrationEmoji__v2SAL\",\"flyAcross\":\"Connect_flyAcross__xAH5C\"};","import React, { useState, useEffect } from \"react\";\nimport styles from \"./Connect.module.css\";\n\nconst Tile = ({ word, onToggle, isSelected, isIncorrect, isMatched }) => {\n  const handleClick = () => {\n    if (!isMatched) {\n      onToggle(word);\n    }\n  };\n\n  return (\n    <div\n      className={`${styles.tile} ${isSelected ? styles.selected : \"\"} ${\n        isMatched ? styles.matched : \"\"\n      } ${isIncorrect ? styles.incorrect : \"\"}`}\n      onClick={handleClick}\n    >\n      {word}\n    </div>\n  );\n};\n\nconst OnlyConnect = ({ text }) => {\n  const [isIncorrect, setIsIncorrect] = useState(false);\n  const [allWords, setAllWords] = useState([]);\n  const [selectedWords, setSelectedWords] = useState([]);\n  const [matchedGroups, setMatchedGroups] = useState([]);\n  const [groups, setGroups] = useState([]);\n  const [correctGroups, setCorrectGroups] = useState([]);\n  const [gameCompleted, setGameCompleted] = useState(false);\n\n  const shuffleArray = (array) => {\n    let newArr = [...array];\n    for (let i = newArr.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [newArr[i], newArr[j]] = [newArr[j], newArr[i]]; // Swap elements\n    }\n    return newArr;\n  };\n\n  useEffect(() => {\n    const initialGroups = text\n      .trim()\n      .split(\"\\n\\n\")\n      .map((group) => group.split(\"\\n\"));\n\n    setGroups(initialGroups);\n    setAllWords(shuffleArray(initialGroups.flat()));\n  }, [text]); // Only depend on 'text'\n\n  useEffect(() => {\n    if (matchedGroups.length === groups.length && matchedGroups.length > 0) {\n      setGameCompleted(true);\n      // Optional: Reset the celebration after a few seconds\n      setTimeout(() => setGameCompleted(false), 4000);\n    }\n  }, [matchedGroups, groups]);\n\n  const toggleWordSelection = (word) => {\n    setSelectedWords((words) =>\n      selectedWords.includes(word)\n        ? selectedWords.filter((selectedWord) => selectedWord !== word)\n        : [...selectedWords, word]\n    );\n  };\n\n  const flashIncorrect = () => {\n    setIsIncorrect(true);\n    setTimeout(() => setIsIncorrect(false), 500); // Reset after 0.5 seconds\n  };\n\n  const checkGroups = () => {\n    let newCorrectGroups = [...correctGroups];\n    groups.forEach((group, index) => {\n      const isFullGroupSelected = group.every((word) =>\n        selectedWords.includes(word)\n      );\n      const isOnlyGroupSelected = selectedWords.every((selectedWord) =>\n        group.includes(selectedWord)\n      );\n\n      if (\n        isFullGroupSelected &&\n        isOnlyGroupSelected &&\n        !matchedGroups.includes(index)\n      ) {\n        setMatchedGroups((prev) => [...prev, index]);\n        newCorrectGroups = [...newCorrectGroups, group];\n        // Remove correctly guessed words from allWords to not display them in the main grid anymore\n        setAllWords((prevAllWords) =>\n          prevAllWords.filter((word) => !group.includes(word))\n        );\n      }\n    });\n\n    setCorrectGroups(newCorrectGroups);\n\n    if (newCorrectGroups.length === correctGroups.length) {\n      flashIncorrect();\n    }\n\n    setSelectedWords([]);\n  };\n\n  const handleCheck = () => {\n    checkGroups();\n    // Additional logic for checking completion of all groups and handling the game's end state\n  };\n\n  return (\n    <>\n      <h1>Connect</h1>\n      <p className={styles.instructions}>\n        Select groups of related words to identify all of the groups\n        <br />\n        <button onClick={handleCheck}>Check</button>\n      </p>\n      <div className={styles.GameAreaGrid}>\n        {allWords.map((word, index) => (\n          <Tile\n            key={index}\n            word={word}\n            onToggle={toggleWordSelection}\n            isSelected={selectedWords.includes(word)}\n            isIncorrect={isIncorrect}\n          />\n        ))}\n      </div>\n\n      <div className={styles.CorrectArea}>\n        {correctGroups.map((group, index) => (\n          <div key={index} className={styles.CorrectGroup}>\n            {group.map((word) => (\n              <div key={word} className={styles.CorrectTile}>\n                {word}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n      {gameCompleted && <div className={styles.celebrationEmoji}>ðŸŽ‰</div>}\n    </>\n  );\n};\n\nexport default OnlyConnect;\n"],"names":["Tile","_ref","word","onToggle","isSelected","isIncorrect","isMatched","_jsx","className","concat","styles","onClick","handleClick","children","_ref2","text","setIsIncorrect","useState","allWords","setAllWords","selectedWords","setSelectedWords","matchedGroups","setMatchedGroups","groups","setGroups","correctGroups","setCorrectGroups","gameCompleted","setGameCompleted","useEffect","initialGroups","trim","split","map","group","array","newArr","i","length","j","Math","floor","random","shuffleArray","flat","setTimeout","toggleWordSelection","words","includes","filter","selectedWord","checkGroups","newCorrectGroups","forEach","index","isFullGroupSelected","every","isOnlyGroupSelected","prev","prevAllWords","_jsxs","_Fragment","handleCheck"],"sourceRoot":""}