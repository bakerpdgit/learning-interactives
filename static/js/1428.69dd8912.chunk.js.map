{"version":3,"file":"static/js/1428.69dd8912.chunk.js","mappings":"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","sources":["webpack://class-interactives/./src/components/ColorPickerModal.module.css?9c08","components/ColorPickerModal.js","webpack://class-interactives/./src/components/KanbanBoard.module.css?5d1a","components/KanbanBoard.js","components/MathComponent.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"modalOverlay\":\"ColorPickerModal_modalOverlay__Wlon6\",\"modalContent\":\"ColorPickerModal_modalContent__9klUK\",\"modalTitle\":\"ColorPickerModal_modalTitle__uSeIm\",\"buttonGroup\":\"ColorPickerModal_buttonGroup__vby8h\",\"submitButton\":\"ColorPickerModal_submitButton__47Nt3\",\"cancelButton\":\"ColorPickerModal_cancelButton__2R5Xi\"};","import React, { useState } from \"react\";\nimport styles from \"./ColorPickerModal.module.css\";\n\nfunction ColorPickerModal({ title, initialColor, onSubmit, onClose }) {\n  const [colorValue, setColorValue] = useState(initialColor || \"#FFFFFF\");\n\n  const handleSubmit = () => {\n    onSubmit(colorValue);\n    onClose();\n  };\n\n  return (\n    <div className={styles.modalOverlay}>\n      <div className={styles.modalContent}>\n        <h2 className={styles.modalTitle}>{title}</h2>\n        <input\n          type=\"color\"\n          value={colorValue}\n          onChange={(e) => setColorValue(e.target.value)}\n        />\n        <div className={styles.buttonGroup}>\n          <button className={styles.submitButton} onClick={handleSubmit}>\n            Submit\n          </button>\n          <button className={styles.cancelButton} onClick={onClose}>\n            Cancel\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ColorPickerModal;\n","// extracted by mini-css-extract-plugin\nexport default {\"kanbanBoard\":\"KanbanBoard_kanbanBoard__DUWoP\",\"kanbanColumns\":\"KanbanBoard_kanbanColumns__l-XdI\",\"kanbanColumn\":\"KanbanBoard_kanbanColumn__TioKQ\",\"kanbanColumnHeader\":\"KanbanBoard_kanbanColumnHeader__COXce\",\"columnMenuButton\":\"KanbanBoard_columnMenuButton__D6tTy\",\"columnDropdown\":\"KanbanBoard_columnDropdown__hBw-L\",\"columnDropdownItem\":\"KanbanBoard_columnDropdownItem__KRqvd\",\"addItemBtn\":\"KanbanBoard_addItemBtn__D4pDQ\",\"kanbanColumnContent\":\"KanbanBoard_kanbanColumnContent__jp1YQ\",\"kanbanItem\":\"KanbanBoard_kanbanItem__nmWId\",\"deleteItem\":\"KanbanBoard_deleteItem__KVV0V\",\"addColumn\":\"KanbanBoard_addColumn__OIpVI\",\"addColumnBar\":\"KanbanBoard_addColumnBar__xNky4\"};","import React, { useState, useMemo } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"@hello-pangea/dnd\";\nimport MathComponent from \"./MathComponent\";\nimport InputModal from \"./InputModal\";\nimport ColorPickerModal from \"./ColorPickerModal\";\nimport styles from \"./KanbanBoard.module.css\";\n\nfunction KanbanBoard({ text }) {\n  // Parse the text prop to extract options and initial columns\n  const { options, initialColumns } = useMemo(() => {\n    const lines = text.split(\"\\n\").filter((line) => line.trim() !== \"\");\n    let options = {};\n    let initialColumns = [];\n\n    if (lines[0].startsWith(\"OPTIONS:\")) {\n      const optionsLine = lines.shift().substring(8); // Remove 'OPTIONS:'\n      optionsLine.split(\",\").forEach((option) => {\n        const [key, value] = option.split(\"=\");\n        options[key.trim()] = value.trim();\n      });\n    }\n\n    initialColumns = lines.map((line, index) => ({\n      id: `column-${index}`,\n      name: line.trim(),\n      color: \"#FFFDD0\", // Light cream color\n      items: [],\n    }));\n\n    return { options, initialColumns };\n  }, [text]);\n\n  const [columns, setColumns] = useState(initialColumns);\n\n  // State for InputModal\n  const [inputModalOpen, setInputModalOpen] = useState(false);\n  const [inputModalProps, setInputModalProps] = useState({});\n\n  // State for ColorPickerModal\n  const [colorPickerModalOpen, setColorPickerModalOpen] = useState(false);\n  const [colorPickerModalProps, setColorPickerModalProps] = useState({});\n\n  const [columnMenuOpen, setColumnMenuOpen] = useState(null);\n\n  // Handle adding new items\n  const handleAddItem = (columnId) => {\n    setInputModalProps({\n      title: \"Please enter text for the new item:\",\n      placeholder: \"Type here...\",\n      value: \"\",\n      onSubmit: (userInput) => {\n        if (userInput) {\n          const newItem = {\n            id: `item-${Date.now()}`,\n            content: userInput,\n          };\n\n          setColumns((prevColumns) =>\n            prevColumns.map((column) => {\n              if (column.id === columnId) {\n                return {\n                  ...column,\n                  items: [...column.items, newItem],\n                };\n              }\n              return column;\n            })\n          );\n        }\n        setInputModalOpen(false);\n      },\n      multiLine: true,\n    });\n    setInputModalOpen(true);\n  };\n\n  // Handle renaming a column\n  const handleRenameColumn = (columnId, currentName) => {\n    setInputModalProps({\n      title: \"Rename Column:\",\n      placeholder: \"Enter new column name\",\n      value: currentName,\n      onSubmit: (newName) => {\n        if (newName) {\n          setColumns((prevColumns) =>\n            prevColumns.map((column) => {\n              if (column.id === columnId) {\n                return {\n                  ...column,\n                  name: newName,\n                };\n              }\n              return column;\n            })\n          );\n        }\n        setInputModalOpen(false);\n      },\n      multiLine: false,\n    });\n    setInputModalOpen(true);\n    setColumnMenuOpen(null);\n  };\n\n  // Handle adding a new column\n  const handleAddColumn = () => {\n    setInputModalProps({\n      title: \"Add New Column:\",\n      placeholder: \"Enter column name\",\n      value: \"\",\n      onSubmit: (newName) => {\n        if (newName) {\n          const newColumn = {\n            id: `column-${Date.now()}`,\n            name: newName,\n            color: \"#FFFDD0\",\n            items: [],\n          };\n          setColumns((prevColumns) => [...prevColumns, newColumn]);\n        }\n        setInputModalOpen(false);\n      },\n      multiLine: false,\n    });\n    setInputModalOpen(true);\n  };\n\n  // Handle recolouring a column\n  const handleRecolourColumn = (columnId, currentColor) => {\n    setColorPickerModalProps({\n      title: \"Select Column Colour:\",\n      initialColor: currentColor,\n      onSubmit: (newColor) => {\n        setColumns((prevColumns) =>\n          prevColumns.map((column) => {\n            if (column.id === columnId) {\n              return {\n                ...column,\n                color: newColor,\n              };\n            }\n            return column;\n          })\n        );\n        setColorPickerModalOpen(false);\n      },\n    });\n    setColorPickerModalOpen(true);\n    setColumnMenuOpen(null);\n  };\n\n  // Handle deleting a column\n  const handleDeleteColumn = (columnId) => {\n    setColumns((prevColumns) =>\n      prevColumns.filter((column) => column.id !== columnId)\n    );\n    setColumnMenuOpen(null);\n  };\n\n  // Handle deleting an item\n  const handleDeleteItem = (columnId, itemId) => {\n    setColumns((prevColumns) =>\n      prevColumns.map((column) => {\n        if (column.id === columnId) {\n          return {\n            ...column,\n            items: column.items.filter((item) => item.id !== itemId),\n          };\n        }\n        return column;\n      })\n    );\n  };\n\n  const handleToggleColumnMenu = (columnId) => {\n    setColumnMenuOpen((prev) => (prev === columnId ? null : columnId));\n  };\n\n  // Handle drag and drop\n  const onDragEnd = (result) => {\n    const { source, destination } = result;\n\n    // If dropped outside the list, do nothing\n    if (!destination) {\n      return;\n    }\n\n    // If dropped in the same place, do nothing\n    if (\n      source.droppableId === destination.droppableId &&\n      source.index === destination.index\n    ) {\n      return;\n    }\n\n    // Move the item from source to destination\n    setColumns((prevColumns) => {\n      const sourceColumnIndex = prevColumns.findIndex(\n        (column) => column.id === source.droppableId\n      );\n      const destColumnIndex = prevColumns.findIndex(\n        (column) => column.id === destination.droppableId\n      );\n\n      const sourceColumn = prevColumns[sourceColumnIndex];\n      const destColumn = prevColumns[destColumnIndex];\n\n      const sourceItems = Array.from(sourceColumn.items);\n      const destItems = Array.from(destColumn.items);\n\n      const [removedItem] = sourceItems.splice(source.index, 1);\n\n      if (sourceColumn.id === destColumn.id) {\n        // Reordering within the same column\n        sourceItems.splice(destination.index, 0, removedItem);\n\n        const newColumns = [...prevColumns];\n        newColumns[sourceColumnIndex] = {\n          ...sourceColumn,\n          items: sourceItems,\n        };\n\n        return newColumns;\n      } else {\n        // Moving item to a different column\n        destItems.splice(destination.index, 0, removedItem);\n\n        const newColumns = [...prevColumns];\n\n        newColumns[sourceColumnIndex] = {\n          ...sourceColumn,\n          items: sourceItems,\n        };\n\n        newColumns[destColumnIndex] = {\n          ...destColumn,\n          items: destItems,\n        };\n\n        return newColumns;\n      }\n    });\n  };\n\n  return (\n    <>\n      {inputModalOpen && (\n        <InputModal\n          title={inputModalProps.title}\n          placeholder={inputModalProps.placeholder}\n          value={inputModalProps.value}\n          onSubmit={inputModalProps.onSubmit}\n          onClose={() => setInputModalOpen(false)}\n          multiLine={inputModalProps.multiLine}\n        />\n      )}\n      {colorPickerModalOpen && (\n        <ColorPickerModal\n          title={colorPickerModalProps.title}\n          initialColor={colorPickerModalProps.initialColor}\n          onSubmit={colorPickerModalProps.onSubmit}\n          onClose={() => setColorPickerModalOpen(false)}\n        />\n      )}\n      {options.add === \"yes\" && (\n        <div className={styles.addColumnBar}>\n          <button className={styles.addColumn} onClick={handleAddColumn}>\n            Add Column\n          </button>\n        </div>\n      )}\n      <div className={styles.kanbanBoard}>\n        <div className={styles.kanbanColumns}>\n          <DragDropContext onDragEnd={onDragEnd}>\n            {columns.map((column) => (\n              <div\n                key={column.id}\n                className={styles.kanbanColumn}\n                style={{ backgroundColor: column.color }}\n              >\n                <div className={styles.kanbanColumnHeader}>\n                  <span className={styles.kanbanColumnTitle}>\n                    {column.name}\n                  </span>\n                  <div>\n                    <button\n                      onClick={() => handleAddItem(column.id)}\n                      className={styles.addItemBtn}\n                    >\n                      Add\n                    </button>\n                  </div>\n                  {/* Dropdown menu */}\n                  <div className={styles.columnMenu}>\n                    <button\n                      className={styles.columnMenuButton}\n                      onClick={() => handleToggleColumnMenu(column.id)}\n                    >\n                      &#x22EE;\n                    </button>\n                    {columnMenuOpen === column.id && (\n                      <div className={styles.columnDropdown}>\n                        {options.add === \"yes\" && (\n                          <>\n                            <div\n                              className={styles.columnDropdownItem}\n                              onClick={() =>\n                                handleRenameColumn(column.id, column.name)\n                              }\n                            >\n                              Rename\n                            </div>\n                            <div\n                              className={styles.columnDropdownItem}\n                              onClick={() => handleDeleteColumn(column.id)}\n                            >\n                              Delete\n                            </div>\n                          </>\n                        )}\n                        <div\n                          className={styles.columnDropdownItem}\n                          onClick={() =>\n                            handleRecolourColumn(column.id, column.color)\n                          }\n                        >\n                          Recolour\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <Droppable droppableId={column.id}>\n                  {(provided) => (\n                    <div\n                      className={styles.kanbanColumnContent}\n                      ref={provided.innerRef}\n                      {...provided.droppableProps}\n                    >\n                      {column.items.map((item, index) => (\n                        <Draggable\n                          key={item.id}\n                          draggableId={item.id}\n                          index={index}\n                        >\n                          {(provided) => (\n                            <div\n                              className={styles.kanbanItem}\n                              ref={provided.innerRef}\n                              {...provided.draggableProps}\n                              {...provided.dragHandleProps}\n                            >\n                              <div\n                                className={styles.deleteItem}\n                                onClick={() =>\n                                  handleDeleteItem(column.id, item.id)\n                                }\n                              >\n                                &#x2716;\n                              </div>\n                              <MathComponent\n                                text={item.content}\n                                renderNewLines={true}\n                              />\n                            </div>\n                          )}\n                        </Draggable>\n                      ))}\n                      {provided.placeholder}\n                    </div>\n                  )}\n                </Droppable>\n              </div>\n            ))}\n          </DragDropContext>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default KanbanBoard;\n","import { InlineMath } from \"react-katex\";\n\nfunction parseAndRenderMath(text) {\n  const prefix = Math.random().toString(36).substring(2, 10); // Generate an 8-character random string\n\n  // Split the text based on $$ delimiters\n  const segments = text.split(\"$$\");\n  const elements = [];\n\n  segments.forEach((segment, index) => {\n    if (index % 2 === 1) {\n      // Odd-indexed segments are LaTeX (since they are enclosed between $$ delimiters)\n      elements.push(\n        <InlineMath key={`MCIM-${prefix}-${index}`} math={segment} />\n      );\n    } else {\n      elements.push(<span key={`MCSP-${prefix}-${index}`}>{segment}</span>);\n    }\n  });\n\n  return elements;\n}\n\nconst renderWithNewLines = (text) => {\n  return text.replace(/\\\\n/g, \"\\n\");\n};\n\nfunction MathComponent({ text, renderNewLines = false }) {\n  if (renderNewLines) {\n    text = renderWithNewLines(text);\n  }\n\n  return (\n    <div\n      style={{\n        whiteSpace:\n          text.includes(\"\\n\") && renderNewLines ? \"pre-wrap\" : \"normal\",\n        marginTop: text.includes(\"$$\") ? \"0.5em\" : \"0\",\n      }}\n    >\n      {parseAndRenderMath(text)}\n    </div>\n  );\n}\n\nexport default MathComponent;\n"],"names":["_ref","title","initialColor","onSubmit","onClose","colorValue","setColorValue","useState","_jsx","className","styles","children","_jsxs","type","value","onChange","e","target","onClick","handleSubmit","text","options","initialColumns","useMemo","lines","split","filter","line","trim","startsWith","shift","substring","forEach","option","key","map","index","id","concat","name","color","items","columns","setColumns","inputModalOpen","setInputModalOpen","inputModalProps","setInputModalProps","colorPickerModalOpen","setColorPickerModalOpen","colorPickerModalProps","setColorPickerModalProps","columnMenuOpen","setColumnMenuOpen","_Fragment","InputModal","placeholder","multiLine","ColorPickerModal","add","addColumnBar","addColumn","handleAddColumn","newName","newColumn","Date","now","prevColumns","kanbanBoard","kanbanColumns","DragDropContext","onDragEnd","result","source","destination","droppableId","sourceColumnIndex","findIndex","column","destColumnIndex","sourceColumn","destColumn","sourceItems","Array","from","destItems","removedItem","splice","newColumns","kanbanColumn","style","backgroundColor","kanbanColumnHeader","kanbanColumnTitle","handleAddItem","columnId","userInput","newItem","content","addItemBtn","columnMenu","columnMenuButton","handleToggleColumnMenu","prev","columnDropdown","columnDropdownItem","handleRenameColumn","currentName","handleDeleteColumn","handleRecolourColumn","currentColor","newColor","Droppable","provided","kanbanColumnContent","ref","innerRef","droppableProps","item","Draggable","draggableId","kanbanItem","draggableProps","dragHandleProps","deleteItem","handleDeleteItem","itemId","MathComponent","renderNewLines","parseAndRenderMath","prefix","Math","random","toString","segments","elements","segment","push","InlineMath","math","replace","renderWithNewLines","whiteSpace","includes","marginTop"],"sourceRoot":""}