{"version":3,"file":"static/js/9131.a94c7a60.chunk.js","mappings":"wLACA,SAAgB,sBAAwB,yCAAyC,kBAAoB,qCAAqC,cAAgB,iCAAiC,SAAW,4BAA4B,aAAe,gCAAgC,WAAa,8BAA8B,sBAAwB,yCAAyC,YAAc,+BAA+B,oBAAsB,uCAAuC,IAAM,uBAAuB,aAAe,gCAAgC,YAAc,+BAA+B,UAAY,8B,cCA5mB,QAA+B,mCAA/B,EAAiF,mCAAjF,EAAkI,kCAAlI,EAA+K,+B,aCE/K,MAaA,EAbqBA,IAA2B,IAA1B,QAAEC,EAAO,QAAEC,GAASF,EACxC,OACEG,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAoBC,UAClCC,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAoBC,SAAA,EAClCH,EAAAA,EAAAA,KAAA,KAAGC,UAAWC,EAAmBC,SAAEL,KACnCE,EAAAA,EAAAA,KAAA,UAAQC,UAAWC,EAAiBG,QAASN,EAAQI,SAAC,WAIpD,E,cCydV,QA7dA,SAAkBN,GAAY,IAAX,KAAES,GAAMT,EACzB,MAAOU,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,KAC1BC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,IACxCG,EAAcC,IAAmBJ,EAAAA,EAAAA,UAAS,KAC1CK,EAAiBC,IAAsBN,EAAAA,EAAAA,WAAS,IAChDO,EAAiBC,IAAsBR,EAAAA,EAAAA,WAAS,IAChDS,EAAeC,IAAoBV,EAAAA,EAAAA,WAAS,IAC5CW,EAAcC,IAAmBZ,EAAAA,EAAAA,UAAS,KAC1Ca,EAAcC,IAAmBd,EAAAA,EAAAA,UAAS,CAAC,IAE3Ce,EAAaC,IAAkBhB,EAAAA,EAAAA,UAAS,CAC7CiB,KAAM,KACNC,MAAO,KACPC,OAAQ,EACRC,OAAQ,KAGHC,EAASC,IAActB,EAAAA,EAAAA,UAAS,OAEhCuB,EAAoBC,IAAyBxB,EAAAA,EAAAA,UAAS,CAC3DyB,MAAO,EACPC,OAAQ,KAGJ,SAAEC,EAAQ,UAAEC,EAAS,aAAEC,IAAiBC,EAAAA,EAAAA,KAExCC,GAASC,EAAAA,EAAAA,QAAO,OAEtBC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAQrC,EAAKsC,MAAM,MACnBC,EAAcF,EAAM,GAAGG,WAAW,YAAcH,EAAMI,QAAU,KAChEC,EAAWL,EAAMM,MAEvB,IAAIC,GAAmB,EACvB,GAAIL,EAAa,CACCA,EAAYM,UAAU,GAAGP,MAAM,KACvCQ,SAASC,IACf,MAAOC,EAAKC,GAASF,EAAOT,MAAM,KACtB,SAARU,GAA4B,QAAVC,EACpBL,GAAmB,EACF,mBAARI,GAAsC,QAAVC,GACrCpC,GAAiB,EACnB,GAEJ,CAEA,MAAMP,EAAe,GAErB,GAAI+B,EAAMa,OAAS,EAAG,CACpB,IAAIC,EAAiB,EAErB,MAAMC,EAAUf,EAAMgB,KAAI,CAACC,EAAOjC,KAChC,MAAMkC,EAAkBD,EAAME,MAAM,oCACpC,GAAID,EAAiB,CACnBJ,IACAG,EAAQA,EAAMG,QAAQF,EAAgB,GAAI,IAC1CjD,EAAaoD,KAAKJ,GAClB,MAAMK,EAAWC,WAAWL,EAAgB,IACtCM,EAAWD,WAAWL,EAAgB,IACtCO,EAAKH,EAAW,IAAOjC,EAAmBE,MAC1CmC,EAAKF,EAAW,IAAOnC,EAAmBG,OAChD,MAAO,CACLiC,IACAC,IACAT,MAAO,GACPU,OAAQF,EACRG,OAAQF,EAAI,GACZG,QAAQ,EACRC,YAAab,EACbc,UAAU,EACVC,UAAU,EAEd,CAAO,CACL,MAAMC,EAAgBjD,EAAQ8B,EACxBW,EAAI,GAAqC,GAAhCS,KAAKC,MAAMF,EAAgB,GACpCP,EAAI,GAAMO,EAAgB,EAAK,GACrC,MAAO,CACLR,IACAC,IACAT,QACAU,OAAQF,EACRG,OAAQF,EAAI,GACZG,QAAQ,EACRE,UAAU,EAEd,KAGFlE,EAAQkD,GACR/C,EAAe8C,GAEXP,GAEFrC,EAAgBD,EAAamE,MAAK,IAAMF,KAAKG,SAAW,KAE5D,CAEAjD,EACEiB,IAAaA,EAASiC,SAASC,EAAAA,IAAgBlC,EAAWX,EAC3D,GACA,CACD/B,EACA8B,EACAC,EACAL,EAAmBE,MACnBF,EAAmBG,UAGrBO,EAAAA,EAAAA,YAAU,KAIR,MAAMyC,EAAYC,YAAW,KACvB5C,EAAO6C,UACTpD,EAAsB,CACpBC,MAAOM,EAAO6C,QAAQC,YACtBnD,OAAQK,EAAO6C,QAAQE,eAGzB/E,GAASgF,GACAA,EAAY7B,KAAK8B,GAGpBA,EAAIrB,EAAI5B,EAAO6C,QAAQC,aACvBG,EAAIpB,EAAI7B,EAAO6C,QAAQE,aAGhB,IAAKE,EAAKrB,EAAG,IAAKC,EAAG,IAAKC,OAAQ,IAAKC,OAAQ,IAEjDkB,MAGb,GACC,KAEH,MAAO,IAAMC,aAAaP,EAAU,GACnC,CAACrD,KAEJY,EAAAA,EAAAA,YAAU,KACR,MAAMiD,EAAQP,YAAW,KACvBrE,GAAmB,EAAM,GACxB,KACH,MAAO,IAAM2E,aAAaC,EAAM,GAC/B,KAEHjD,EAAAA,EAAAA,YAAU,KACR,MAAMkD,EAAeA,KACnB,IACGpD,EAAO6C,SACqB,IAA7BrD,EAAmBE,OACW,IAA9BF,EAAmBG,OAEnB,OAIF,MAAM0D,EACJrD,EAAO6C,QAAQC,YAActD,EAAmBE,MAC5C4D,EACJtD,EAAO6C,QAAQE,aAAevD,EAAmBG,OAEnD,IAAI4D,EAAexF,EAAKoD,KAAK8B,IAEpB,IACFA,EACHrB,EAAGqB,EAAIrB,EAAIyB,EACXxB,EAAGoB,EAAIpB,EAAIyB,EACXxB,OAAQmB,EAAInB,OAASuB,EACrBtB,OAAQkB,EAAIlB,OAASuB,MAIzBC,EAAeA,EAAapC,KAAK8B,GAG7BA,EAAIrB,EAAI5B,EAAO6C,QAAQC,aACvBG,EAAIpB,EAAI7B,EAAO6C,QAAQE,aAGhB,IAAKE,EAAKrB,EAAG,IAAKC,EAAG,IAAKC,OAAQ,IAAKC,OAAQ,IAEjDkB,IAGTjF,EAAQuF,GACJvD,EAAO6C,SACTpD,EAAsB,CACpBC,MAAOM,EAAO6C,QAAQC,YACtBnD,OAAQK,EAAO6C,QAAQE,cAE3B,EAOF,OAHAS,OAAOC,iBAAiB,SAAUL,GAG3B,KACLI,OAAOE,oBAAoB,SAAUN,EAAa,CACnD,GACA,CAAC5D,EAAoBzB,IAExB,MAiHM4F,EAAcA,CAACC,EAAGzE,EAAOD,KAC7B0E,EAAEC,aAAaC,QAAQ,aAAc,IAGrC,MAAMC,EAAOhG,EAAKoB,GACZC,EAAkB,QAATF,EAAiB6E,EAAKnC,EAAImC,EAAKjC,OACxCzC,EAAkB,QAATH,EAAiB6E,EAAKlC,EAAIkC,EAAKhC,OAE9C9C,EAAe,CAAEC,OAAMC,QAAOC,SAAQC,UAAS,EAsC3C2E,EAAmBC,IACvBnE,EAAamE,GACb1E,EAAW0E,EAAK,EAGlB,OACErG,EAAAA,EAAAA,MAAAsG,EAAAA,SAAA,CAAAvG,SAAA,CACoB,KAAjBiB,IACCpB,EAAAA,EAAAA,KAAC2G,EAAY,CAAC7G,QAASsB,EAAcrB,QAvKlB6G,KACvBvF,EAAgB,GAAG,IAwKhBC,EAAauF,SACZ7G,EAAAA,EAAAA,KAAC8G,EAAAA,EAAU,CACTC,MAAOzF,EAAauF,OACpBG,YAAY,eACZzD,MAAOjC,EAAaiC,MACpB0D,SA5HmBC,IACzB,MAAMvF,EAAQL,EAAa6F,gBAI3B,GAHA5F,EAAgB,CAAC,IAGbhB,EAAKoB,GAAOgD,UAIG,OAAfuC,EACF,GAAI3G,EAAKoB,GAAO6C,OAAQ,CAUtB,GATwB0C,EACrBE,OACAC,cACAtD,QAAQ,OAAQ,MACQxD,EAAKoB,GAAO8C,YACpC2C,OACAC,cACAtD,QAAQ,OAAQ,IAEyB,CAC1CvD,EACED,EAAKoD,KAAI,CAAC8B,EAAK6B,IACbA,IAAM3F,EACF,IACK8D,EACH7B,MAAOrD,EAAKoB,GAAO8C,YACnBD,QAAQ,EACRG,UAAU,GAEZc,KAGR,MAAM8B,EAAiB7G,EAAc,EACrCC,EAAe4G,GACQ,IAAnBA,GACFtG,GAAmB,EAEvB,MACET,EACED,EAAKoD,KAAI,CAAC8B,EAAK6B,IACbA,IAAM3F,EAAQ,IAAK8D,EAAK7B,MAAO,YAAa4D,OAAO,GAAS/B,KAGhEL,YAAW,KACT5E,EACED,EAAKoD,KAAI,CAAC8B,EAAK6B,IACbA,IAAM3F,EAAQ,IAAK8D,EAAK7B,MAAO,GAAI4D,OAAO,GAAU/B,IAEvD,GACA,IAEP,MACEjF,EACED,EAAKoD,KAAI,CAAC8B,EAAK6B,IACbA,IAAM3F,EAAQ,IAAK8D,EAAK7B,MAAOsD,GAAezB,IAItD,EAkEM1F,QAASA,IAAMwB,EAAgB,CAAC,MAIpCnB,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAOuH,sBAAsBtH,SAAA,EAC3CC,EAAAA,EAAAA,MAAA,OACEH,UAAWC,EAAOwH,kBAClBC,UAAU,QACVC,WA1DYxB,IAClBA,EAAEyB,gBAAgB,EA0DZC,OAvDQ1B,IACd,IAAK5D,EAAO6C,SAAiC,OAAtB7D,EAAYG,MAAgB,OAEnD,MAAMoG,EAAOvF,EAAO6C,QAAQ2C,wBAC5B,IAAIC,EAAO7B,EAAE8B,QAAUH,EAAKI,KACxBC,EAAOhC,EAAEiC,QAAUN,EAAKO,IAG5B,MAAMC,EAAQN,EAAOzG,EAAYI,OAC3B4G,EAAQJ,EAAO5G,EAAYK,OAEjCrB,EACED,EAAKoD,KAAI,CAAC8B,EAAK9D,IACTA,IAAUH,EAAYG,MAEjB,IACF8D,EACHrB,EAAGqB,EAAIrB,GAA0B,QAArB5C,EAAYE,KAAiB6G,EAAQ,GACjDlE,EAAGoB,EAAIpB,GAA0B,QAArB7C,EAAYE,KAAiB8G,EAAQ,GACjDlE,OAAQmB,EAAInB,OAASiE,EACrBhE,OAAQkB,EAAIlB,OAASiE,GAGlB/C,KAIXhE,EAAe,CAAEC,KAAM,KAAMC,MAAO,KAAMC,OAAQ,EAAGC,OAAQ,GAAI,EA4B5C1B,SAAA,GAEZG,EAAK2E,SAASC,EAAAA,KAAiB9C,KAChCpC,EAAAA,EAAAA,KAAA,OACEyI,IAAKjG,EACLvC,UAAWC,EAAOwI,cAClBC,IAAI,YACJtI,QA3LM+F,IAChB,GAAIlF,EAEF,YADAG,EAAgB,0CAIlB,IAAKmB,EAAO6C,QAAS,OAErB,MAAM0C,EAAOvF,EAAO6C,QAAQ2C,wBAC5B,IAAI5D,EAAIgC,EAAE8B,QAAUH,EAAKI,KACrB9D,EAAI+B,EAAEiC,QAAUN,EAAKO,IAGzB9H,GAASoI,GAAa,IACjBA,EACH,CACExE,EAAGS,KAAKgE,IAAI,EAAGhE,KAAKiE,IAAI1E,EAAG2D,EAAK7F,MAAQ,KACxCmC,EAAGQ,KAAKgE,IAAI,EAAGhE,KAAKiE,IAAIzE,EAAG0D,EAAK5F,OAAS,KACzCyB,MAAO,GACPU,OAAQF,EACRG,OAAQF,EAAI,GACZK,UAAU,KAEZ,EAqKQiD,UAAU,QACVoB,IAAKjH,EACLkH,YAAY,cAIf1I,EAAK2E,SAASC,EAAAA,MAAkB9C,IAC/BhC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CAAK,+CAEHH,EAAAA,EAAAA,KAAA,SAAO,KACPA,EAAAA,EAAAA,KAAA,SACE0B,KAAK,OACLzB,UAAWC,EAAO+I,WAClBC,OAAO,UACPC,SAAWC,IACTC,EAAAA,EAAAA,GAAsBD,EAAME,OAAOC,MAAM,GAAI/C,QAMpDjG,EAAKoD,KAAI,CAAC8B,EAAK9D,KACdvB,EAAAA,EAAAA,MAACoJ,EAAAA,SAAc,CAAArJ,SAAA,EACbH,EAAAA,EAAAA,KAAA,OAEEC,UAAS,GAAAwJ,OAAKvJ,EAAOuF,IAAG,KAAAgE,OACrBhE,EAAIjB,OAA+B,GAAtBtE,EAAOwJ,cAEvBC,MAAO,CAAExB,KAAK,GAADsB,OAAKhE,EAAIrB,EAAI,GAAE,MAAMkE,IAAI,GAADmB,OAAKhE,EAAIpB,EAAI,GAAE,OACpDsD,WAAYlC,EAAIjB,OAChB2B,YAAcC,GAAMD,EAAYC,EAAGzE,EAAO,OAC1CiI,cAAgBxD,GAjMLyD,EAACzD,EAAGzE,KAC3ByE,EAAEyB,iBACFrH,GAASoI,GACPA,EAASkB,QAAO,CAACrE,EAAK6B,IAAMA,IAAM3F,GAAS8D,EAAIf,YAChD,EA6LiCmF,CAAiBzD,EAAGzE,GAC1CoI,cAAeA,IA3LFpI,KAErBpB,EAAKoB,GAAOgD,UAIhBpD,EAAgB,CACdsF,OAAQ,8BACRtD,MAAOhD,EAAKoB,GAAOiC,MACnBuD,gBAAiBxF,GACjB,EAiL+BqI,CAAkBrI,IAAO,OAAA8H,OARlC9H,IAUb8D,EAAI7B,QACH5D,EAAAA,EAAAA,KAAA,OACEC,UAAS,GAAAwJ,OAAKvJ,EAAO+J,SAAQ,KAAAR,QACZ,IAAfhE,EAAIjB,OAAkBtE,EAAOgK,aAAe,GAAE,KAAAT,OAC5ChE,EAAI+B,MAAQtH,EAAOiK,WAAa,IACpCR,MAAO,CACLxB,KAAK,GAADsB,OAAKhE,EAAInB,OAAM,MACnBgE,IAAI,GAADmB,OAAKhE,EAAIlB,OAAS,GAAE,OAEzBoD,UAAU,OACVxB,YAAcC,GAAMD,EAAYC,EAAGzE,EAAO,SAASxB,SAElDsF,EAAI7B,UAER,YAAA6F,OA1B8B9H,SA8BpCb,IACCV,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAOkK,oBAAoBjK,SAAA,EACzCH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,gBACJH,EAAAA,EAAAA,KAAA,KAAAG,SAAG,iHAORS,GAAgBF,EAAc,IAC7BN,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAOmK,sBAAsBlK,SAAA,CAAC,4BAE3CS,EACEkJ,QACElG,IACErD,EAAK+J,MAAM7E,GAAQA,EAAIhB,cAAgBb,GAAS6B,EAAId,aAExDhB,KAAI,CAACC,EAAOjC,KACX3B,EAAAA,EAAAA,KAAA,OAA+BC,UAAWC,EAAOqK,YAAYpK,SAC1DyD,GAAK,YAAA6F,OADc9H,SAO7BX,IAAmBhB,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAOsK,YAAYrK,SAAC,mBAG9D,C,gDCleA,QAA+B,iCAA/B,EAA+E,iCAA/E,EAA6H,+BAA7H,EAAyK,+BAAzK,EAAsN,gCAAtN,EAAqQ,iCAArQ,EAAqT,iC,aCErT,MAgDA,EAhDmBN,IAA4D,IAA3D,MAAEkH,EAAK,YAAEC,EAAW,MAAEzD,EAAQ,GAAE,SAAE0D,EAAQ,QAAElH,GAASF,EACvE,MAAO4K,EAAYC,IAAiBjK,EAAAA,EAAAA,UAAS8C,IAE7Cb,EAAAA,EAAAA,YAAU,KACRgI,EAAcnH,EAAM,GACnB,CAACA,IAEJ,MAIMoH,EAAeA,KACnB1D,EAASwD,GACT1K,GAAS,EASX,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAoBC,UAClCC,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAoBC,SAAA,EAClCH,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAkBC,SAAE4G,KACnC/G,EAAAA,EAAAA,KAAA,SACE0B,KAAK,OACLzB,UAAWC,EACX8G,YAAaA,EACbzD,MAAOkH,EACPtB,SAxBc/C,IACpBsE,EAActE,EAAEkD,OAAO/F,MAAM,EAwBvBqH,UAhBexE,IACP,UAAVA,EAAE9C,KACJqH,GACF,EAcME,WAAS,KAEXzK,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAmBC,SAAA,EACjCH,EAAAA,EAAAA,KAAA,UAAQC,UAAWC,EAAqBG,QAASsK,EAAaxK,SAAC,YAG/DH,EAAAA,EAAAA,KAAA,UAAQC,UAAWC,EAAqBG,QAASN,EAAQI,SAAC,kBAK1D,C","sources":["webpack://class-interactives/./src/components/ImagePins.module.css?0275","webpack://class-interactives/./src/components/MessageModal.module.css?52c0","components/MessageModal.js","components/ImagePins.js","webpack://class-interactives/./src/components/InputModal.module.css?7028","components/InputModal.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"imagePinMaincontainer\":\"ImagePins_imagePinMaincontainer__ve+Rp\",\"imagePinContainer\":\"ImagePins_imagePinContainer__gV26t\",\"imagePinImage\":\"ImagePins_imagePinImage__IpjTM\",\"pinLabel\":\"ImagePins_pinLabel__boY-Q\",\"correctLabel\":\"ImagePins_correctLabel__qIafK\",\"errorLabel\":\"ImagePins_errorLabel__8NLFJ\",\"hiddenLabelsContainer\":\"ImagePins_hiddenLabelsContainer__E33Kt\",\"hiddenLabel\":\"ImagePins_hiddenLabel__j-Yd4\",\"imagePinInstruction\":\"ImagePins_imagePinInstruction__yX44S\",\"pin\":\"ImagePins_pin__FcmAN\",\"pinDraggable\":\"ImagePins_pinDraggable__-W5-y\",\"celebration\":\"ImagePins_celebration__eLfSQ\",\"flyAcross\":\"ImagePins_flyAcross__HgWSj\"};","// extracted by mini-css-extract-plugin\nexport default {\"modalOverlay\":\"MessageModal_modalOverlay__TepVJ\",\"modalContent\":\"MessageModal_modalContent__s8h0e\",\"messageText\":\"MessageModal_messageText__aBUkg\",\"okButton\":\"MessageModal_okButton__MYUiR\"};","import React from \"react\";\r\nimport styles from \"./MessageModal.module.css\";\r\n\r\nconst MessageModal = ({ message, onClose }) => {\r\n  return (\r\n    <div className={styles.modalOverlay}>\r\n      <div className={styles.modalContent}>\r\n        <p className={styles.messageText}>{message}</p>\r\n        <button className={styles.okButton} onClick={onClose}>\r\n          OK\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MessageModal;\r\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { handleImageFileChange } from \"../ImageUploads\";\nimport { useEditContext } from \"../EditContext\";\nimport styles from \"./ImagePins.module.css\";\nimport { LOCAL_MARKER } from \"./TextInput\";\nimport MessageModal from \"./MessageModal\";\nimport InputModal from \"./InputModal\";\n\nfunction ImagePins({ text }) {\n  const [pins, setPins] = useState([]);\n  const [hiddenCount, setHiddenCount] = useState(0);\n  const [hiddenLabels, setHiddenLabels] = useState([]); // Array of hidden labels [label1, label2, ...\n  const [showInstruction, setShowInstruction] = useState(true);\n  const [showCelebration, setShowCelebration] = useState(false);\n  const [disableAdding, setDisableAdding] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n  const [inputMessage, setInputMessage] = useState({});\n\n  const [draggedItem, setDraggedItem] = useState({\n    type: null,\n    index: null,\n    startX: 0,\n    startY: 0,\n  });\n\n  const [imgData, setImgData] = useState(null);\n\n  const [originalDimensions, setOriginalDimensions] = useState({\n    width: 0,\n    height: 0,\n  });\n\n  const { textData, imageData, setImageData } = useEditContext();\n\n  const imgRef = useRef(null);\n\n  useEffect(() => {\n    const lines = text.split(\"\\n\"); // Split the text by new lines\n    const optionsLine = lines[0].startsWith(\"OPTIONS:\") ? lines.shift() : null;\n    const imageUrl = lines.pop(); // The last line is the image URL\n\n    let showHiddenLabels = false;\n    if (optionsLine) {\n      const options = optionsLine.substring(8).split(\",\");\n      options.forEach((option) => {\n        const [key, value] = option.split(\"=\");\n        if (key === \"show\" && value === \"yes\") {\n          showHiddenLabels = true;\n        } else if (key === \"disable_adding\" && value === \"yes\") {\n          setDisableAdding(true);\n        }\n      });\n    }\n\n    const hiddenLabels = [];\n\n    if (lines.length > 0) {\n      let hiddenPinCount = 0;\n\n      const newPins = lines.map((label, index) => {\n        const coordinateMatch = label.match(/\\((\\d+(\\.\\d+)?),(\\d+(\\.\\d+)?)\\)$/);\n        if (coordinateMatch) {\n          hiddenPinCount++;\n          label = label.replace(coordinateMatch[0], \"\"); // Remove the coordinates from the label\n          hiddenLabels.push(label);\n          const xPercent = parseFloat(coordinateMatch[1]);\n          const yPercent = parseFloat(coordinateMatch[3]);\n          const x = (xPercent / 100) * originalDimensions.width;\n          const y = (yPercent / 100) * originalDimensions.height;\n          return {\n            x,\n            y,\n            label: \"\",\n            labelX: x,\n            labelY: y - 40,\n            hidden: true, // Mark the label as hidden\n            labelAnswer: label,\n            provided: true, // given in setup so cannot be deleted\n            answered: false,\n          };\n        } else {\n          const adjustedIndex = index - hiddenPinCount;\n          const x = 50 + Math.floor(adjustedIndex / 5) * 70; // Move 50 pixels right for every new column of 5 labels\n          const y = 50 + (adjustedIndex % 5) * 70; // Place labels 70 pixels apart vertically\n          return {\n            x,\n            y,\n            label,\n            labelX: x,\n            labelY: y - 40,\n            hidden: false, // Visible label\n            provided: true,\n          };\n        }\n      });\n\n      setPins(newPins);\n      setHiddenCount(hiddenPinCount);\n\n      if (showHiddenLabels) {\n        // randomly shuffle the hidden labels\n        setHiddenLabels(hiddenLabels.sort(() => Math.random() - 0.5));\n      }\n    }\n\n    setImgData(\n      imageUrl && !imageUrl.includes(LOCAL_MARKER) ? imageUrl : imageData\n    );\n  }, [\n    text,\n    textData,\n    imageData,\n    originalDimensions.width,\n    originalDimensions.height,\n  ]); // Dependency array includes textData to re-run this effect when textData changes\n\n  useEffect(() => {\n    // Assuming imgRef is a ref to your img element\n\n    // Set a timeout to wait for the image to stabilize\n    const timeoutId = setTimeout(() => {\n      if (imgRef.current) {\n        setOriginalDimensions({\n          width: imgRef.current.offsetWidth,\n          height: imgRef.current.offsetHeight,\n        });\n        // Adjust pins if necessary\n        setPins((currentPins) => {\n          return currentPins.map((pin) => {\n            // Check if the pin is outside the bounds of the image\n            if (\n              pin.x > imgRef.current.offsetWidth ||\n              pin.y > imgRef.current.offsetHeight\n            ) {\n              // Reset position to (100, 100) if outside bounds\n              return { ...pin, x: 100, y: 100, labelX: 100, labelY: 50 }; // Adjust labelY accordingly if needed\n            }\n            return pin; // Return the pin unchanged if it's within bounds\n          });\n        });\n      }\n    }, 1000); // 1 second delay to allow for image dimensions to stabilize\n\n    return () => clearTimeout(timeoutId); // Cleanup the timeout if the component unmounts or if textData changes again before the timeout finishes\n  }, [imgData]); // Dependency array includes textData to re-run this effect when textData changes\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setShowInstruction(false);\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  useEffect(() => {\n    const handleResize = () => {\n      if (\n        !imgRef.current ||\n        originalDimensions.width === 0 ||\n        originalDimensions.height === 0\n      )\n        return; // Ensure the image ref is available\n\n      // Example: Calculate new scale factors based on image's resized dimensions\n      // This assumes you have some way of determining or storing the original dimensions\n      const scaleFactorWidth =\n        imgRef.current.offsetWidth / originalDimensions.width;\n      const scaleFactorHeight =\n        imgRef.current.offsetHeight / originalDimensions.height;\n\n      let rescaledPins = pins.map((pin) => {\n        // Adjust each pin's position based on the scale factor\n        return {\n          ...pin,\n          x: pin.x * scaleFactorWidth,\n          y: pin.y * scaleFactorHeight,\n          labelX: pin.labelX * scaleFactorWidth,\n          labelY: pin.labelY * scaleFactorHeight,\n        };\n      });\n\n      rescaledPins = rescaledPins.map((pin) => {\n        // Check if the pin is outside the bounds of the image\n        if (\n          pin.x > imgRef.current.offsetWidth ||\n          pin.y > imgRef.current.offsetHeight\n        ) {\n          // Reset position to (100, 100) if outside bounds\n          return { ...pin, x: 100, y: 100, labelX: 100, labelY: 50 }; // Adjust labelY accordingly if needed\n        }\n        return pin; // Return the pin unchanged if it's within bounds\n      });\n\n      setPins(rescaledPins); // Update the state with the new positions\n      if (imgRef.current) {\n        setOriginalDimensions({\n          width: imgRef.current.offsetWidth,\n          height: imgRef.current.offsetHeight,\n        });\n      }\n    };\n\n    // Add resize listener\n    window.addEventListener(\"resize\", handleResize);\n\n    // Cleanup function to remove the listener\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, [originalDimensions, pins]); // Empty dependency array means this runs once on mount and cleanup on unmount\n\n  const handleModalClose = () => {\n    setModalMessage(\"\");\n  };\n\n  const placePin = (e) => {\n    if (disableAdding) {\n      setModalMessage(\"Adding pins is disabled for this task.\");\n      return;\n    }\n\n    if (!imgRef.current) return;\n\n    const rect = imgRef.current.getBoundingClientRect();\n    let x = e.clientX - rect.left;\n    let y = e.clientY - rect.top;\n\n    // Add new pin to the array\n    setPins((prevPins) => [\n      ...prevPins,\n      {\n        x: Math.max(0, Math.min(x, rect.width - 20)),\n        y: Math.max(0, Math.min(y, rect.height - 20)),\n        label: \"\",\n        labelX: x, // Initial Label X (same as pin X initially)\n        labelY: y - 40, // Initial Label Y (slightly above pin Y)\n        provided: false, // can be deleted\n      },\n    ]);\n  };\n\n  const handleRightClick = (e, index) => {\n    e.preventDefault(); // Prevent the browser context menu from opening\n    setPins((prevPins) =>\n      prevPins.filter((pin, i) => i !== index || pin.provided)\n    ); // Remove the pin at the clicked index\n  };\n\n  const handleDoubleClick = (index) => {\n    // ignore if pin is already answered\n    if (pins[index].answered) {\n      return;\n    }\n\n    setInputMessage({\n      prompt: \"Enter a label for this pin:\",\n      value: pins[index].label,\n      currentPinIndex: index,\n    });\n  };\n\n  const handleInputSubmit = (inputLabel) => {\n    const index = inputMessage.currentPinIndex;\n    setInputMessage({});\n\n    // ignore if pin is already answered\n    if (pins[index].answered) {\n      return;\n    }\n\n    if (inputLabel !== null) {\n      if (pins[index].hidden) {\n        const normalizedInput = inputLabel\n          .trim()\n          .toLowerCase()\n          .replace(/\\s+/g, \"\");\n        const normalizedOriginal = pins[index].labelAnswer\n          .trim()\n          .toLowerCase()\n          .replace(/\\s+/g, \"\");\n\n        if (normalizedInput === normalizedOriginal) {\n          setPins(\n            pins.map((pin, i) =>\n              i === index\n                ? {\n                    ...pin,\n                    label: pins[index].labelAnswer,\n                    hidden: true,\n                    answered: true,\n                  }\n                : pin\n            )\n          );\n          const newHiddenCount = hiddenCount - 1;\n          setHiddenCount(newHiddenCount);\n          if (newHiddenCount === 0) {\n            setShowCelebration(true);\n          }\n        } else {\n          setPins(\n            pins.map((pin, i) =>\n              i === index ? { ...pin, label: \"try again\", error: true } : pin\n            )\n          );\n          setTimeout(() => {\n            setPins(\n              pins.map((pin, i) =>\n                i === index ? { ...pin, label: \"\", error: false } : pin\n              )\n            );\n          }, 1000);\n        }\n      } else {\n        setPins(\n          pins.map((pin, i) =>\n            i === index ? { ...pin, label: inputLabel } : pin\n          )\n        );\n      }\n    }\n  };\n\n  // Adjusted onDragStart to prevent default behavior\n  const onDragStart = (e, index, type) => {\n    e.dataTransfer.setData(\"text/plain\", \"\"); // For Firefox compatibility\n\n    // Determine initial position\n    const item = pins[index];\n    const startX = type === \"pin\" ? item.x : item.labelX;\n    const startY = type === \"pin\" ? item.y : item.labelY;\n\n    setDraggedItem({ type, index, startX, startY });\n  };\n\n  // Moved onDragOver to the image-pin-container\n  const onDragOver = (e) => {\n    e.preventDefault(); // This is crucial for allowing the drop\n  };\n\n  const onDrop = (e) => {\n    if (!imgRef.current || draggedItem.index === null) return;\n\n    const rect = imgRef.current.getBoundingClientRect();\n    let endX = e.clientX - rect.left;\n    let endY = e.clientY - rect.top;\n\n    // Calculate movement vector\n    const moveX = endX - draggedItem.startX;\n    const moveY = endY - draggedItem.startY;\n\n    setPins(\n      pins.map((pin, index) => {\n        if (index === draggedItem.index) {\n          // Apply movement vector to both pin and label\n          return {\n            ...pin,\n            x: pin.x + (draggedItem.type === \"pin\" ? moveX : 0),\n            y: pin.y + (draggedItem.type === \"pin\" ? moveY : 0),\n            labelX: pin.labelX + moveX,\n            labelY: pin.labelY + moveY,\n          };\n        }\n        return pin;\n      })\n    );\n\n    setDraggedItem({ type: null, index: null, startX: 0, startY: 0 }); // Reset after drop\n  };\n\n  const updateImageData = (data) => {\n    setImageData(data);\n    setImgData(data);\n  };\n\n  return (\n    <>\n      {modalMessage !== \"\" && (\n        <MessageModal message={modalMessage} onClose={handleModalClose} />\n      )}\n      {inputMessage.prompt && (\n        <InputModal\n          title={inputMessage.prompt}\n          placeholder=\"type here...\"\n          value={inputMessage.value}\n          onSubmit={handleInputSubmit}\n          onClose={() => setInputMessage({})}\n        />\n      )}\n\n      <div className={styles.imagePinMaincontainer}>\n        <div\n          className={styles.imagePinContainer}\n          draggable=\"false\" // Prevent the container from being draggable\n          onDragOver={onDragOver}\n          onDrop={onDrop}\n        >\n          {(!text.includes(LOCAL_MARKER) || textData) && (\n            <img\n              ref={imgRef}\n              className={styles.imagePinImage}\n              alt=\"Highlight\"\n              onClick={placePin}\n              draggable=\"false\"\n              src={imgData}\n              crossOrigin=\"anonymous\"\n            />\n          )}\n\n          {text.includes(LOCAL_MARKER) && !textData && (\n            <div>\n              The local image will need to be provided...\n              <br />{\" \"}\n              <input\n                type=\"file\"\n                className={styles.fileUpload}\n                accept=\"image/*\"\n                onChange={(event) =>\n                  handleImageFileChange(event.target.files[0], updateImageData)\n                }\n              />\n            </div>\n          )}\n\n          {pins.map((pin, index) => (\n            <React.Fragment key={`pinlabel-${index}`}>\n              <div\n                key={`pin-${index}`}\n                className={`${styles.pin} ${\n                  !pin.hidden ? styles.pinDraggable : \"\"\n                }`}\n                style={{ left: `${pin.x - 10}px`, top: `${pin.y - 10}px` }}\n                draggable={!pin.hidden}\n                onDragStart={(e) => onDragStart(e, index, \"pin\")}\n                onContextMenu={(e) => handleRightClick(e, index)}\n                onDoubleClick={() => handleDoubleClick(index)}\n              ></div>\n              {pin.label && (\n                <div\n                  className={`${styles.pinLabel} ${\n                    pin.hidden === true ? styles.correctLabel : \"\"\n                  } ${pin.error ? styles.errorLabel : \"\"}`}\n                  style={{\n                    left: `${pin.labelX}px`,\n                    top: `${pin.labelY - 10}px`,\n                  }}\n                  draggable=\"true\"\n                  onDragStart={(e) => onDragStart(e, index, \"label\")}\n                >\n                  {pin.label}\n                </div>\n              )}\n            </React.Fragment>\n          ))}\n        </div>\n        {showInstruction && (\n          <div className={styles.imagePinInstruction}>\n            <h1>Image Pins</h1>\n            <p>\n              click to drop pins, right-click to delete pin, double-click to add\n              a label; drag labels to reposition.\n            </p>\n          </div>\n        )}\n      </div>\n      {hiddenLabels && hiddenCount > 0 && (\n        <div className={styles.hiddenLabelsContainer}>\n          Double-click pins to add:\n          {hiddenLabels\n            .filter(\n              (label) =>\n                !pins.some((pin) => pin.labelAnswer === label && pin.answered)\n            )\n            .map((label, index) => (\n              <div key={`hiddenLbl${index}`} className={styles.hiddenLabel}>\n                {label}\n              </div>\n            ))}\n        </div>\n      )}\n\n      {showCelebration && <div className={styles.celebration}>🎺</div>}\n    </>\n  );\n}\n\nexport default ImagePins;\n","// extracted by mini-css-extract-plugin\nexport default {\"modalOverlay\":\"InputModal_modalOverlay__Y-bWN\",\"modalContent\":\"InputModal_modalContent__z50rT\",\"modalTitle\":\"InputModal_modalTitle__FCo0P\",\"inputField\":\"InputModal_inputField__IeKtc\",\"buttonGroup\":\"InputModal_buttonGroup__3nwbY\",\"submitButton\":\"InputModal_submitButton__irpiv\",\"cancelButton\":\"InputModal_cancelButton__xmt2G\"};","import React, { useState, useEffect } from \"react\";\r\nimport styles from \"./InputModal.module.css\";\r\n\r\nconst InputModal = ({ title, placeholder, value = \"\", onSubmit, onClose }) => {\r\n  const [inputValue, setInputValue] = useState(value);\r\n\r\n  useEffect(() => {\r\n    setInputValue(value);\r\n  }, [value]);\r\n\r\n  const handleChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    onSubmit(inputValue);\r\n    onClose();\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      handleSubmit();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.modalOverlay}>\r\n      <div className={styles.modalContent}>\r\n        <h2 className={styles.modalTitle}>{title}</h2>\r\n        <input\r\n          type=\"text\"\r\n          className={styles.inputField}\r\n          placeholder={placeholder}\r\n          value={inputValue}\r\n          onChange={handleChange}\r\n          onKeyDown={handleKeyDown}\r\n          autoFocus\r\n        />\r\n        <div className={styles.buttonGroup}>\r\n          <button className={styles.submitButton} onClick={handleSubmit}>\r\n            Submit\r\n          </button>\r\n          <button className={styles.cancelButton} onClick={onClose}>\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputModal;\r\n"],"names":["_ref","message","onClose","_jsx","className","styles","children","_jsxs","onClick","text","pins","setPins","useState","hiddenCount","setHiddenCount","hiddenLabels","setHiddenLabels","showInstruction","setShowInstruction","showCelebration","setShowCelebration","disableAdding","setDisableAdding","modalMessage","setModalMessage","inputMessage","setInputMessage","draggedItem","setDraggedItem","type","index","startX","startY","imgData","setImgData","originalDimensions","setOriginalDimensions","width","height","textData","imageData","setImageData","useEditContext","imgRef","useRef","useEffect","lines","split","optionsLine","startsWith","shift","imageUrl","pop","showHiddenLabels","substring","forEach","option","key","value","length","hiddenPinCount","newPins","map","label","coordinateMatch","match","replace","push","xPercent","parseFloat","yPercent","x","y","labelX","labelY","hidden","labelAnswer","provided","answered","adjustedIndex","Math","floor","sort","random","includes","LOCAL_MARKER","timeoutId","setTimeout","current","offsetWidth","offsetHeight","currentPins","pin","clearTimeout","timer","handleResize","scaleFactorWidth","scaleFactorHeight","rescaledPins","window","addEventListener","removeEventListener","onDragStart","e","dataTransfer","setData","item","updateImageData","data","_Fragment","MessageModal","handleModalClose","prompt","InputModal","title","placeholder","onSubmit","inputLabel","currentPinIndex","trim","toLowerCase","i","newHiddenCount","error","imagePinMaincontainer","imagePinContainer","draggable","onDragOver","preventDefault","onDrop","rect","getBoundingClientRect","endX","clientX","left","endY","clientY","top","moveX","moveY","ref","imagePinImage","alt","prevPins","max","min","src","crossOrigin","fileUpload","accept","onChange","event","handleImageFileChange","target","files","React","concat","pinDraggable","style","onContextMenu","handleRightClick","filter","onDoubleClick","handleDoubleClick","pinLabel","correctLabel","errorLabel","imagePinInstruction","hiddenLabelsContainer","some","hiddenLabel","celebration","inputValue","setInputValue","handleSubmit","onKeyDown","autoFocus"],"sourceRoot":""}