{"version":3,"file":"static/js/306.2d710b82.chunk.js","mappings":"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","sources":["components/CategoryMatch.js","components/MathComponent.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Draggable from \"react-draggable\";\nimport \"./CategoryMatch.css\";\nimport MathComponent from \"./MathComponent.js\";\n\nfunction CategoryMatch({ text }) {\n  // const [showCelebration, setShowCelebration] = useState(false);\n  const [showInstruction, setShowInstruction] = useState(true);\n  // const [score, setScore] = useState(null);\n  // const [marked, setMarked] = useState(false);\n\n  const categories = text.split(\"\\n\\n\")[0].split(\"\\n\");\n  const termsData = text\n    .split(\"\\n\\n\")[1]\n    .split(\"\\n\")\n    .map((term) => {\n      const [word, catIndex] = term.split(\"@\");\n      return { word, catIndex: catIndex ? parseInt(catIndex) : null };\n    });\n\n  const gameAreaHeight = 0.9 * window.innerHeight;\n  const gameAreaWidth = window.innerWidth;\n\n  const randomizedTerms = termsData.map((term) => ({\n    ...term,\n    x: window.innerWidth / 2 + (-0.5 + Math.random()) * gameAreaWidth * 0.5, // Adjust 100 based on term width\n    y: window.innerHeight / 2 + (-0.5 + Math.random()) * gameAreaHeight * 0.5, // Adjust 50 based on term height\n  }));\n\n  const [allTerms, setAllTerms] = useState(randomizedTerms);\n\n  const numCategories = categories.length;\n  let numRows = Math.round(Math.sqrt(numCategories));\n  let numCols = Math.ceil(numCategories / numRows);\n  const extraStyles = {\n    gridTemplateRows: `repeat(${numRows}, 1fr)`,\n    gridTemplateColumns: `repeat(${numCols}, 1fr)`,\n  };\n\n  const handleAddItem = () => {\n    const userInput = window.prompt(\"Please enter text for the new item:\");\n\n    if (userInput) {\n      // Check if user provided a value and didn't cancel the prompt\n      const newTerm = {\n        word: userInput,\n        catIndex: null,\n        x: window.innerWidth / 2,\n        y: window.innerHeight / 2,\n      };\n\n      setAllTerms((prevTerms) => [...prevTerms, newTerm]);\n    }\n  };\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setShowInstruction(false);\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const handleStop = (e, data, draggedTerm) => {\n    const updatedTerms = allTerms.map((term) => {\n      if (term.word === draggedTerm.word) {\n        return {\n          ...term,\n          x: data.x,\n          y: data.y,\n        };\n      }\n      return term;\n    });\n\n    setAllTerms(updatedTerms);\n  };\n\n  const handleRemoveTerm = (termToRemove) => {\n    setAllTerms((prevTerms) =>\n      prevTerms.filter((term) => term !== termToRemove)\n    );\n  };\n\n  return (\n    <>\n      <h1>Categorise</h1>\n      <button onClick={handleAddItem} className=\"addItemBtn\">\n        Add item\n      </button>\n      {/*\n      {hasMarkedTerm && (\n        <button className=\"submitBtn\" onClick={handleMarking}>\n          Submit\n        </button>\n      )}\n      */}\n      {/* marked && <div className=\"scoreBox\">Score: {score}</div> */}\n      <div className=\"CategoryMatch\" style={extraStyles}>\n        {categories.map((category, index) => (\n          <div key={index} className=\"categoryBox\">\n            {category}\n          </div>\n        ))}\n        {!showInstruction &&\n          allTerms.map((term, index) => (\n            <Draggable\n              key={index}\n              position={{ x: term.x, y: term.y }}\n              onStop={(e, data) => handleStop(e, data, term)}\n            >\n              <div\n                style={{\n                  zIndex: index + 1,\n                }}\n                className=\"term\"\n              >\n                <div\n                  className=\"positionMarker\"\n                  onClick={() => handleRemoveTerm(term)}\n                ></div>\n                {<MathComponent text={term.word} renderNewLines={true} />}\n              </div>\n            </Draggable>\n          ))}\n\n        {/* showCelebration && \"ðŸŽ‰ Celebration ðŸŽ‰\"*/}\n        {showInstruction && (\n          <div className=\"instruction\">\n            <p>Drag each term to its category...</p>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default CategoryMatch;\n","import { InlineMath } from \"react-katex\";\r\n\r\nfunction parseAndRenderMath(text) {\r\n  // Split the text based on $$ delimiters\r\n  const segments = text.split(\"$$\");\r\n  const elements = [];\r\n\r\n  segments.forEach((segment, index) => {\r\n    if (index % 2 === 1) {\r\n      // Odd-indexed segments are LaTeX (since they are enclosed between $$ delimiters)\r\n      elements.push(<InlineMath key={`MCIM${index}`} math={segment} />);\r\n    } else {\r\n      elements.push(<span key={`MCSP${index}`}>{segment}</span>);\r\n    }\r\n  });\r\n\r\n  return elements;\r\n}\r\n\r\nconst renderWithNewLines = (text) => {\r\n  return text.replace(/\\\\n/g, \"\\n\");\r\n};\r\n\r\nfunction MathComponent({ text, renderNewLines = false }) {\r\n  if (renderNewLines) {\r\n    text = renderWithNewLines(text);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        whiteSpace:\r\n          text.includes(\"\\n\") && renderNewLines ? \"pre-wrap\" : \"normal\",\r\n        marginTop: text.includes(\"$$\") ? \"0.5em\" : \"0\",\r\n      }}\r\n    >\r\n      {parseAndRenderMath(text)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MathComponent;\r\n"],"names":["_ref","text","showInstruction","setShowInstruction","useState","categories","split","termsData","map","term","word","catIndex","parseInt","gameAreaHeight","window","innerHeight","gameAreaWidth","innerWidth","randomizedTerms","x","Math","random","y","allTerms","setAllTerms","numCategories","length","numRows","round","sqrt","numCols","ceil","extraStyles","gridTemplateRows","concat","gridTemplateColumns","useEffect","timer","setTimeout","clearTimeout","_jsxs","_Fragment","children","_jsx","onClick","handleAddItem","userInput","prompt","newTerm","prevTerms","className","style","category","index","Draggable","position","onStop","e","data","handleStop","draggedTerm","updatedTerms","zIndex","handleRemoveTerm","termToRemove","filter","MathComponent","renderNewLines","parseAndRenderMath","segments","elements","forEach","segment","push","InlineMath","math","replace","renderWithNewLines","whiteSpace","includes","marginTop"],"sourceRoot":""}