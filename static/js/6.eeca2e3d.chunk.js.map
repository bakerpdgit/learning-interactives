{"version":3,"file":"static/js/6.eeca2e3d.chunk.js","mappings":"qJACA,QAAgC,mCAAhC,EAA0E,0BAA1E,EAA8G,6BAA9G,EAAoJ,4B,aC2FpJ,QAzFA,SAAoBA,GAAY,IAAX,KAAEC,GAAMD,EAC3B,MA2BOE,EAAOC,IAAYC,EAAAA,EAAAA,UAZJC,KACpB,IAAIC,EAAgB,IAAID,GACxB,IAAK,IAAIE,EAAID,EAAcE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACjD,MAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,KACzCD,EAAcC,GAAID,EAAcG,IAAM,CACrCH,EAAcG,GACdH,EAAcC,GAElB,CACA,OAAOD,CAAa,EAGaO,CA3BfZ,IACXA,EAAKa,MAAM,MAAMC,KAAKC,IAC3B,MAAOC,EAASC,GAAQF,EAAKF,MAAM,KAC7BK,EAAQF,EAAQH,MAAM,KACtBM,EAAQD,EAAM,GACdE,EAAOF,EAAMX,OAAS,EAAIW,EAAM,GAAK,GAC3C,MAAO,CACLC,MAAOA,EAAME,OACbD,KAAMA,EAAKC,OACXC,QAASJ,EAAMX,OAAS,EACxBU,KAAMA,EAAOA,EAAKI,OAAS,GAC5B,IAgB2CE,CAAWvB,MACpDwB,EAAcC,IAAmBtB,EAAAA,EAAAA,UAAS,IAC1CuB,EAAMC,IAAWxB,EAAAA,EAAAA,WAAS,GAwBjC,OACEyB,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAqBC,SACjB,IAAjB9B,EAAMM,QACLqB,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAYC,SAAC,gCAE7BC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAF,SAAA,EACEH,EAAAA,EAAAA,KAAA,OACEC,UAAWC,EACXI,QAASA,IAAMjC,EAAMuB,GAAcP,MAfrBkB,MACtB,MAAMC,EAAcnC,EAAMuB,GACtBY,EAAYnB,MACdoB,OAAOC,KAAKF,EAAYnB,KAAM,SAChC,EAWmDkB,GAC3CI,MAAO,CAAEC,OAAQvC,EAAMuB,GAAcP,KAAO,UAAY,WAAYc,SAEnEL,GAAQzB,EAAMuB,GAAcJ,KACzBnB,EAAMuB,GAAcJ,KACpBnB,EAAMuB,GAAcL,SAG1Ba,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAeC,SAAA,EAC7BH,EAAAA,EAAAA,KAAA,UAAQC,UAAWC,EAAeI,QAvCzBO,KACjBd,GAAQ,GACRF,GAAiBD,EAAe,GAAKvB,EAAMM,OAAO,EAqCYwB,SAAC,UAGvDH,EAAAA,EAAAA,KAAA,UAAQC,UAAWC,EAAeI,QArCvBQ,KACnB,MAAMC,EAAW1C,EAAM2C,QAAO,CAACC,EAAGC,IAAUA,IAAUtB,IACtDtB,EAASyC,GACTlB,EAAgBD,EAAemB,EAASpC,OAAO,EAkCiBwB,SAAC,WAGxD9B,EAAMuB,GAAcF,UACnBM,EAAAA,EAAAA,KAAA,UAAQC,UAAWC,EAAeI,QAnC3Ba,KACjBpB,GAASD,EAAK,EAkCkDK,SAAC,gBASrE,C","sources":["webpack://my-react-app/./src/components/DeckOfCards.module.css?3e2a","components/DeckOfCards.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"cardContainer\":\"DeckOfCards_cardContainer__W0kVx\",\"card\":\"DeckOfCards_card__Tk3MG\",\"buttons\":\"DeckOfCards_buttons__oVC93\",\"button\":\"DeckOfCards_button__3f8yT\"};","import React, { useState } from \"react\";\nimport styles from \"./DeckOfCards.module.css\";\n\nfunction DeckOfCards({ text }) {\n  const parseCards = (text) => {\n    return text.split(\"\\n\").map((line) => {\n      const [content, link] = line.split(\"@\");\n      const parts = content.split(\"|\");\n      const front = parts[0];\n      const back = parts.length > 1 ? parts[1] : \"\";\n      return {\n        front: front.trim(),\n        back: back.trim(),\n        hasFlip: parts.length > 1,\n        link: link ? link.trim() : \"\",\n      };\n    });\n  };\n\n  const shuffleArray = (array) => {\n    let shuffledArray = [...array];\n    for (let i = shuffledArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [shuffledArray[i], shuffledArray[j]] = [\n        shuffledArray[j],\n        shuffledArray[i],\n      ];\n    }\n    return shuffledArray;\n  };\n\n  const [cards, setCards] = useState(shuffleArray(parseCards(text)));\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [flip, setFlip] = useState(false);\n\n  const handleNext = () => {\n    setFlip(false); // Reset flip state on moving to next\n    setCurrentIndex((currentIndex + 1) % cards.length);\n  };\n\n  const handleRemove = () => {\n    const newCards = cards.filter((_, index) => index !== currentIndex);\n    setCards(newCards);\n    setCurrentIndex(currentIndex % newCards.length);\n  };\n\n  const handleFlip = () => {\n    setFlip(!flip);\n  };\n\n  const handleCardClick = () => {\n    const currentCard = cards[currentIndex];\n    if (currentCard.link) {\n      window.open(currentCard.link, \"_blank\");\n    }\n  };\n\n  return (\n    <div className={styles.cardContainer}>\n      {cards.length === 0 ? (\n        <div className={styles.card}>No more cards in the deck.</div>\n      ) : (\n        <>\n          <div\n            className={styles.card}\n            onClick={() => cards[currentIndex].link && handleCardClick()}\n            style={{ cursor: cards[currentIndex].link ? \"pointer\" : \"default\" }}\n          >\n            {flip && cards[currentIndex].back\n              ? cards[currentIndex].back\n              : cards[currentIndex].front}\n          </div>\n\n          <div className={styles.buttons}>\n            <button className={styles.button} onClick={handleNext}>\n              Next\n            </button>\n            <button className={styles.button} onClick={handleRemove}>\n              Remove\n            </button>\n            {cards[currentIndex].hasFlip && (\n              <button className={styles.button} onClick={handleFlip}>\n                Flip\n              </button>\n            )}\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default DeckOfCards;\n"],"names":["_ref","text","cards","setCards","useState","array","shuffledArray","i","length","j","Math","floor","random","shuffleArray","split","map","line","content","link","parts","front","back","trim","hasFlip","parseCards","currentIndex","setCurrentIndex","flip","setFlip","_jsx","className","styles","children","_jsxs","_Fragment","onClick","handleCardClick","currentCard","window","open","style","cursor","handleNext","handleRemove","newCards","filter","_","index","handleFlip"],"sourceRoot":""}